
Mini_project4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003430  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000012e  00800060  00003430  000034c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080018e  0080018e  000035f2  2**0
                  ALLOC
  3 .stab         00002a84  00000000  00000000  000035f4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001039  00000000  00000000  00006078  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000070b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007251  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007443  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000984e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000abd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000bdac  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000bf6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c262  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cbd0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 17 0d 	jmp	0x1a2e	; 0x1a2e <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e3       	ldi	r30, 0x30	; 48
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae e8       	ldi	r26, 0x8E	; 142
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 39       	cpi	r26, 0x95	; 149
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 c7 07 	call	0xf8e	; 0xf8e <main>
      8a:	0c 94 16 1a 	jmp	0x342c	; 0x342c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a5 e8       	ldi	r26, 0x85	; 133
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 b6 19 	jmp	0x336c	; 0x336c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9a 19 	jmp	0x3334	; 0x3334 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	85 e8       	ldi	r24, 0x85	; 133
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 b6 19 	jmp	0x336c	; 0x336c <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	65 e8       	ldi	r22, 0x85	; 133
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 be 19 	jmp	0x337c	; 0x337c <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 a6 19 	jmp	0x334c	; 0x334c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c2 19 	jmp	0x3384	; 0x3384 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 aa 19 	jmp	0x3354	; 0x3354 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 c6 19 	jmp	0x338c	; 0x338c <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 a2 19 	jmp	0x3344	; 0x3344 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 be 19 	jmp	0x337c	; 0x337c <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e3 57       	subi	r30, 0x73	; 115
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <Buzzer_init>:
#include "BUZZER.h"  // Include the header for buzzer functionality
#include "gpio.h"    // Include the GPIO (General Purpose Input/Output) header

// Function to initialize the buzzer
void Buzzer_init(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
	// Set the direction of the buzzer pin to output
	GPIO_setupPinDirection(BUZZER_PORT_ID, BUZZER_PIN_ID, PIN_OUTPUT);
     e36:	82 e0       	ldi	r24, 0x02	; 2
     e38:	65 e0       	ldi	r22, 0x05	; 5
     e3a:	41 e0       	ldi	r20, 0x01	; 1
     e3c:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>

	// Initialize the buzzer pin to low (buzzer off)
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     e40:	82 e0       	ldi	r24, 0x02	; 2
     e42:	65 e0       	ldi	r22, 0x05	; 5
     e44:	40 e0       	ldi	r20, 0x00	; 0
     e46:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
}
     e4a:	cf 91       	pop	r28
     e4c:	df 91       	pop	r29
     e4e:	08 95       	ret

00000e50 <Buzzer_on>:

// Function to turn the buzzer on
void Buzzer_on(void)
{
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
	// Set the buzzer pin to high to activate the buzzer
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_HIGH);
     e58:	82 e0       	ldi	r24, 0x02	; 2
     e5a:	65 e0       	ldi	r22, 0x05	; 5
     e5c:	41 e0       	ldi	r20, 0x01	; 1
     e5e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
}
     e62:	cf 91       	pop	r28
     e64:	df 91       	pop	r29
     e66:	08 95       	ret

00000e68 <Buzzer_off>:

// Function to turn the buzzer off
void Buzzer_off(void)
{
     e68:	df 93       	push	r29
     e6a:	cf 93       	push	r28
     e6c:	cd b7       	in	r28, 0x3d	; 61
     e6e:	de b7       	in	r29, 0x3e	; 62
	// Set the buzzer pin to low to deactivate the buzzer
	GPIO_writePin(BUZZER_PORT_ID, BUZZER_PIN_ID, LOGIC_LOW);
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	65 e0       	ldi	r22, 0x05	; 5
     e74:	40 e0       	ldi	r20, 0x00	; 0
     e76:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	08 95       	ret

00000e80 <LEDS_init>:
#include "LED.h"   // Include the header for LED functionality
#include "gpio.h"  // Include the header for GPIO (General Purpose Input/Output) functionality

// Function to initialize the LED pins
void LEDS_init(void)
{
     e80:	df 93       	push	r29
     e82:	cf 93       	push	r28
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
	// Set the direction of each LED pin to output
	GPIO_setupPinDirection(LED_PORT_ID, RED_PIN_ID, PIN_OUTPUT);
     e88:	82 e0       	ldi	r24, 0x02	; 2
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	41 e0       	ldi	r20, 0x01	; 1
     e8e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_PORT_ID, GREEN_PIN_ID, PIN_OUTPUT);
     e92:	82 e0       	ldi	r24, 0x02	; 2
     e94:	61 e0       	ldi	r22, 0x01	; 1
     e96:	41 e0       	ldi	r20, 0x01	; 1
     e98:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LED_PORT_ID, BLUE_PIN_ID, PIN_OUTPUT);
     e9c:	82 e0       	ldi	r24, 0x02	; 2
     e9e:	62 e0       	ldi	r22, 0x02	; 2
     ea0:	41 e0       	ldi	r20, 0x01	; 1
     ea2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>

	// Initialize all LEDs to OFF state based on the defined logic
#ifdef LOGIC_POSITIVE
	{
		GPIO_writePin(LED_PORT_ID, RED_PIN_ID, LOGIC_LOW);   // Turn off red LED
     ea6:	82 e0       	ldi	r24, 0x02	; 2
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
		GPIO_writePin(LED_PORT_ID, GREEN_PIN_ID, LOGIC_LOW); // Turn off green LED
     eb0:	82 e0       	ldi	r24, 0x02	; 2
     eb2:	61 e0       	ldi	r22, 0x01	; 1
     eb4:	40 e0       	ldi	r20, 0x00	; 0
     eb6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
		GPIO_writePin(LED_PORT_ID, BLUE_PIN_ID, LOGIC_LOW);  // Turn off blue LED
     eba:	82 e0       	ldi	r24, 0x02	; 2
     ebc:	62 e0       	ldi	r22, 0x02	; 2
     ebe:	40 e0       	ldi	r20, 0x00	; 0
     ec0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
		GPIO_writePin(LED_PORT_ID, RED_PIN_ID, LOGIC_HIGH);  // Turn off red LED (LOGIC NEGATIVE)
		GPIO_writePin(LED_PORT_ID, GREEN_PIN_ID, LOGIC_HIGH); // Turn off green LED (LOGIC NEGATIVE)
		GPIO_writePin(LED_PORT_ID, BLUE_PIN_ID, LOGIC_HIGH);  // Turn off blue LED (LOGIC NEGATIVE)
	}
#endif
}
     ec4:	cf 91       	pop	r28
     ec6:	df 91       	pop	r29
     ec8:	08 95       	ret

00000eca <LED_on>:

// Function to turn on a specific LED
void LED_on(LED_ID id)
{
     eca:	df 93       	push	r29
     ecc:	cf 93       	push	r28
     ece:	00 d0       	rcall	.+0      	; 0xed0 <LED_on+0x6>
     ed0:	0f 92       	push	r0
     ed2:	cd b7       	in	r28, 0x3d	; 61
     ed4:	de b7       	in	r29, 0x3e	; 62
     ed6:	89 83       	std	Y+1, r24	; 0x01
	switch (id) {
     ed8:	89 81       	ldd	r24, Y+1	; 0x01
     eda:	28 2f       	mov	r18, r24
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	3b 83       	std	Y+3, r19	; 0x03
     ee0:	2a 83       	std	Y+2, r18	; 0x02
     ee2:	8a 81       	ldd	r24, Y+2	; 0x02
     ee4:	9b 81       	ldd	r25, Y+3	; 0x03
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	91 05       	cpc	r25, r1
     eea:	79 f0       	breq	.+30     	; 0xf0a <LED_on+0x40>
     eec:	2a 81       	ldd	r18, Y+2	; 0x02
     eee:	3b 81       	ldd	r19, Y+3	; 0x03
     ef0:	22 30       	cpi	r18, 0x02	; 2
     ef2:	31 05       	cpc	r19, r1
     ef4:	81 f0       	breq	.+32     	; 0xf16 <LED_on+0x4c>
     ef6:	8a 81       	ldd	r24, Y+2	; 0x02
     ef8:	9b 81       	ldd	r25, Y+3	; 0x03
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	89 f4       	brne	.+34     	; 0xf20 <LED_on+0x56>
	case LED_RED:
#ifdef LOGIC_POSITIVE
		GPIO_writePin(LED_PORT_ID, RED_PIN_ID, LOGIC_HIGH); // Turn on red LED
     efe:	82 e0       	ldi	r24, 0x02	; 2
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	41 e0       	ldi	r20, 0x01	; 1
     f04:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
     f08:	0b c0       	rjmp	.+22     	; 0xf20 <LED_on+0x56>
		GPIO_writePin(LED_PORT_ID, RED_PIN_ID, LOGIC_LOW);  // Turn on red LED (LOGIC NEGATIVE)
#endif
		break;
	case LED_GREEN:
#ifdef LOGIC_POSITIVE
		GPIO_writePin(LED_PORT_ID, GREEN_PIN_ID, LOGIC_HIGH); // Turn on green LED
     f0a:	82 e0       	ldi	r24, 0x02	; 2
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	41 e0       	ldi	r20, 0x01	; 1
     f10:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
     f14:	05 c0       	rjmp	.+10     	; 0xf20 <LED_on+0x56>
		GPIO_writePin(LED_PORT_ID, GREEN_PIN_ID, LOGIC_LOW);  // Turn on green LED (LOGIC NEGATIVE)
#endif
		break;
	case LED_BLUE:
#ifdef LOGIC_POSITIVE
		GPIO_writePin(LED_PORT_ID, BLUE_PIN_ID, LOGIC_HIGH); // Turn on blue LED
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	62 e0       	ldi	r22, 0x02	; 2
     f1a:	41 e0       	ldi	r20, 0x01	; 1
     f1c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
		break;
	default:
		// Handle invalid LED_ID if necessary
		break;
	}
}
     f20:	0f 90       	pop	r0
     f22:	0f 90       	pop	r0
     f24:	0f 90       	pop	r0
     f26:	cf 91       	pop	r28
     f28:	df 91       	pop	r29
     f2a:	08 95       	ret

00000f2c <LED_off>:

// Function to turn off a specific LED
void LED_off(LED_ID id)
{
     f2c:	df 93       	push	r29
     f2e:	cf 93       	push	r28
     f30:	00 d0       	rcall	.+0      	; 0xf32 <LED_off+0x6>
     f32:	0f 92       	push	r0
     f34:	cd b7       	in	r28, 0x3d	; 61
     f36:	de b7       	in	r29, 0x3e	; 62
     f38:	89 83       	std	Y+1, r24	; 0x01
	switch (id) {
     f3a:	89 81       	ldd	r24, Y+1	; 0x01
     f3c:	28 2f       	mov	r18, r24
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	3b 83       	std	Y+3, r19	; 0x03
     f42:	2a 83       	std	Y+2, r18	; 0x02
     f44:	8a 81       	ldd	r24, Y+2	; 0x02
     f46:	9b 81       	ldd	r25, Y+3	; 0x03
     f48:	81 30       	cpi	r24, 0x01	; 1
     f4a:	91 05       	cpc	r25, r1
     f4c:	79 f0       	breq	.+30     	; 0xf6c <LED_off+0x40>
     f4e:	2a 81       	ldd	r18, Y+2	; 0x02
     f50:	3b 81       	ldd	r19, Y+3	; 0x03
     f52:	22 30       	cpi	r18, 0x02	; 2
     f54:	31 05       	cpc	r19, r1
     f56:	81 f0       	breq	.+32     	; 0xf78 <LED_off+0x4c>
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	9b 81       	ldd	r25, Y+3	; 0x03
     f5c:	00 97       	sbiw	r24, 0x00	; 0
     f5e:	89 f4       	brne	.+34     	; 0xf82 <LED_off+0x56>
	case LED_RED:
#ifdef LOGIC_POSITIVE
		GPIO_writePin(LED_PORT_ID, RED_PIN_ID, LOGIC_LOW);  // Turn off red LED
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	40 e0       	ldi	r20, 0x00	; 0
     f66:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
     f6a:	0b c0       	rjmp	.+22     	; 0xf82 <LED_off+0x56>
		GPIO_writePin(LED_PORT_ID, RED_PIN_ID, LOGIC_HIGH); // Turn off red LED (LOGIC NEGATIVE)
#endif
		break;
	case LED_GREEN:
#ifdef LOGIC_POSITIVE
		GPIO_writePin(LED_PORT_ID, GREEN_PIN_ID, LOGIC_LOW);  // Turn off green LED
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	61 e0       	ldi	r22, 0x01	; 1
     f70:	40 e0       	ldi	r20, 0x00	; 0
     f72:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
     f76:	05 c0       	rjmp	.+10     	; 0xf82 <LED_off+0x56>
		GPIO_writePin(LED_PORT_ID, GREEN_PIN_ID, LOGIC_HIGH); // Turn off green LED (LOGIC NEGATIVE)
#endif
		break;
	case LED_BLUE:
#ifdef LOGIC_POSITIVE
		GPIO_writePin(LED_PORT_ID, BLUE_PIN_ID, LOGIC_LOW);  // Turn off blue LED
     f78:	82 e0       	ldi	r24, 0x02	; 2
     f7a:	62 e0       	ldi	r22, 0x02	; 2
     f7c:	40 e0       	ldi	r20, 0x00	; 0
     f7e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
		break;
	default:
		// Handle invalid LED_ID if necessary
		break;
	}
}
     f82:	0f 90       	pop	r0
     f84:	0f 90       	pop	r0
     f86:	0f 90       	pop	r0
     f88:	cf 91       	pop	r28
     f8a:	df 91       	pop	r29
     f8c:	08 95       	ret

00000f8e <main>:
#include "ultrasonic.h"



int main(void)
{
     f8e:	df 93       	push	r29
     f90:	cf 93       	push	r28
     f92:	cd b7       	in	r28, 0x3d	; 61
     f94:	de b7       	in	r29, 0x3e	; 62
     f96:	ac 97       	sbiw	r28, 0x2c	; 44
     f98:	0f b6       	in	r0, 0x3f	; 63
     f9a:	f8 94       	cli
     f9c:	de bf       	out	0x3e, r29	; 62
     f9e:	0f be       	out	0x3f, r0	; 63
     fa0:	cd bf       	out	0x3d, r28	; 61
	SET_BIT(SREG,7);
     fa2:	af e5       	ldi	r26, 0x5F	; 95
     fa4:	b0 e0       	ldi	r27, 0x00	; 0
     fa6:	ef e5       	ldi	r30, 0x5F	; 95
     fa8:	f0 e0       	ldi	r31, 0x00	; 0
     faa:	80 81       	ld	r24, Z
     fac:	80 68       	ori	r24, 0x80	; 128
     fae:	8c 93       	st	X, r24
	LCD_init();               // Initialize the LCD
     fb0:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <LCD_init>
	Buzzer_init();            // Initialize the buzzer
     fb4:	0e 94 17 07 	call	0xe2e	; 0xe2e <Buzzer_init>
	LEDS_init();              // Initialize the LEDs
     fb8:	0e 94 40 07 	call	0xe80	; 0xe80 <LEDS_init>
	Ultrasonic_init();        // Initialize the Ultrasonic
     fbc:	0e 94 53 18 	call	0x30a6	; 0x30a6 <Ultrasonic_init>

	uint16 Distance = 0; // Variable to store distance read by the ultrasonic sensor
     fc0:	1c a6       	std	Y+44, r1	; 0x2c
     fc2:	1b a6       	std	Y+43, r1	; 0x2b

	LCD_displayString("Distance=   CM");
     fc4:	80 e6       	ldi	r24, 0x60	; 96
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <LCD_displayString>

	while(1)
	{
		/* Read the distance from the ultrasonic sensor */
		Distance = Ultrasonic_readDistance();
     fcc:	0e 94 49 19 	call	0x3292	; 0x3292 <Ultrasonic_readDistance>
     fd0:	9c a7       	std	Y+44, r25	; 0x2c
     fd2:	8b a7       	std	Y+43, r24	; 0x2b


		if (Distance > 100)
     fd4:	8b a5       	ldd	r24, Y+43	; 0x2b
     fd6:	9c a5       	ldd	r25, Y+44	; 0x2c
     fd8:	85 36       	cpi	r24, 0x65	; 101
     fda:	91 05       	cpc	r25, r1
     fdc:	48 f0       	brcs	.+18     	; 0xff0 <main+0x62>
		{
			/* If the distance is more than 100 cm, display it directly */
			LCD_moveCursor(0,9);
     fde:	80 e0       	ldi	r24, 0x00	; 0
     fe0:	69 e0       	ldi	r22, 0x09	; 9
     fe2:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_moveCursor>
			LCD_intgerToString(Distance);
     fe6:	8b a5       	ldd	r24, Y+43	; 0x2b
     fe8:	9c a5       	ldd	r25, Y+44	; 0x2c
     fea:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_intgerToString>
     fee:	0b c0       	rjmp	.+22     	; 0x1006 <main+0x78>
		}
		else
		{
			LCD_moveCursor(0,9);
     ff0:	80 e0       	ldi	r24, 0x00	; 0
     ff2:	69 e0       	ldi	r22, 0x09	; 9
     ff4:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_moveCursor>
			LCD_intgerToString(Distance);
     ff8:	8b a5       	ldd	r24, Y+43	; 0x2b
     ffa:	9c a5       	ldd	r25, Y+44	; 0x2c
     ffc:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_intgerToString>
			// Clear the next character on the LCD if present
			LCD_displayCharacter(' ');
    1000:	80 e2       	ldi	r24, 0x20	; 32
    1002:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_displayCharacter>
		}


		/* Check for dangerous proximity (distance <= 5 cm) */
		if(Distance <= 5)
    1006:	8b a5       	ldd	r24, Y+43	; 0x2b
    1008:	9c a5       	ldd	r25, Y+44	; 0x2c
    100a:	86 30       	cpi	r24, 0x06	; 6
    100c:	91 05       	cpc	r25, r1
    100e:	08 f0       	brcs	.+2      	; 0x1012 <main+0x84>
    1010:	27 c1       	rjmp	.+590    	; 0x1260 <main+0x2d2>
		{
			Buzzer_on();
    1012:	0e 94 28 07 	call	0xe50	; 0xe50 <Buzzer_on>
			LCD_moveCursor(1,6);
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	66 e0       	ldi	r22, 0x06	; 6
    101a:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_moveCursor>
			LCD_displayString("STOP");
    101e:	8f e6       	ldi	r24, 0x6F	; 111
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <LCD_displayString>
    1026:	02 c1       	rjmp	.+516    	; 0x122c <main+0x29e>
			/* Keep blinking the LEDs and refreshing the distance until the obstacle is removed */
			while (Distance <= 5)
			{
				Distance = Ultrasonic_readDistance();
    1028:	0e 94 49 19 	call	0x3292	; 0x3292 <Ultrasonic_readDistance>
    102c:	9c a7       	std	Y+44, r25	; 0x2c
    102e:	8b a7       	std	Y+43, r24	; 0x2b
				LCD_moveCursor(0,9);
    1030:	80 e0       	ldi	r24, 0x00	; 0
    1032:	69 e0       	ldi	r22, 0x09	; 9
    1034:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_moveCursor>
				LCD_intgerToString(Distance);
    1038:	8b a5       	ldd	r24, Y+43	; 0x2b
    103a:	9c a5       	ldd	r25, Y+44	; 0x2c
    103c:	0e 94 26 18 	call	0x304c	; 0x304c <LCD_intgerToString>
				LED_on(0);
    1040:	80 e0       	ldi	r24, 0x00	; 0
    1042:	0e 94 65 07 	call	0xeca	; 0xeca <LED_on>
				LED_on(1);
    1046:	81 e0       	ldi	r24, 0x01	; 1
    1048:	0e 94 65 07 	call	0xeca	; 0xeca <LED_on>
				LED_on(2);
    104c:	82 e0       	ldi	r24, 0x02	; 2
    104e:	0e 94 65 07 	call	0xeca	; 0xeca <LED_on>
    1052:	80 e0       	ldi	r24, 0x00	; 0
    1054:	90 e0       	ldi	r25, 0x00	; 0
    1056:	a8 e4       	ldi	r26, 0x48	; 72
    1058:	b3 e4       	ldi	r27, 0x43	; 67
    105a:	8f a3       	std	Y+39, r24	; 0x27
    105c:	98 a7       	std	Y+40, r25	; 0x28
    105e:	a9 a7       	std	Y+41, r26	; 0x29
    1060:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1062:	6f a1       	ldd	r22, Y+39	; 0x27
    1064:	78 a5       	ldd	r23, Y+40	; 0x28
    1066:	89 a5       	ldd	r24, Y+41	; 0x29
    1068:	9a a5       	ldd	r25, Y+42	; 0x2a
    106a:	20 e0       	ldi	r18, 0x00	; 0
    106c:	30 e0       	ldi	r19, 0x00	; 0
    106e:	4a e7       	ldi	r20, 0x7A	; 122
    1070:	55 e4       	ldi	r21, 0x45	; 69
    1072:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1076:	dc 01       	movw	r26, r24
    1078:	cb 01       	movw	r24, r22
    107a:	8b a3       	std	Y+35, r24	; 0x23
    107c:	9c a3       	std	Y+36, r25	; 0x24
    107e:	ad a3       	std	Y+37, r26	; 0x25
    1080:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1082:	6b a1       	ldd	r22, Y+35	; 0x23
    1084:	7c a1       	ldd	r23, Y+36	; 0x24
    1086:	8d a1       	ldd	r24, Y+37	; 0x25
    1088:	9e a1       	ldd	r25, Y+38	; 0x26
    108a:	20 e0       	ldi	r18, 0x00	; 0
    108c:	30 e0       	ldi	r19, 0x00	; 0
    108e:	40 e8       	ldi	r20, 0x80	; 128
    1090:	5f e3       	ldi	r21, 0x3F	; 63
    1092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1096:	88 23       	and	r24, r24
    1098:	2c f4       	brge	.+10     	; 0x10a4 <main+0x116>
		__ticks = 1;
    109a:	81 e0       	ldi	r24, 0x01	; 1
    109c:	90 e0       	ldi	r25, 0x00	; 0
    109e:	9a a3       	std	Y+34, r25	; 0x22
    10a0:	89 a3       	std	Y+33, r24	; 0x21
    10a2:	3f c0       	rjmp	.+126    	; 0x1122 <main+0x194>
	else if (__tmp > 65535)
    10a4:	6b a1       	ldd	r22, Y+35	; 0x23
    10a6:	7c a1       	ldd	r23, Y+36	; 0x24
    10a8:	8d a1       	ldd	r24, Y+37	; 0x25
    10aa:	9e a1       	ldd	r25, Y+38	; 0x26
    10ac:	20 e0       	ldi	r18, 0x00	; 0
    10ae:	3f ef       	ldi	r19, 0xFF	; 255
    10b0:	4f e7       	ldi	r20, 0x7F	; 127
    10b2:	57 e4       	ldi	r21, 0x47	; 71
    10b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10b8:	18 16       	cp	r1, r24
    10ba:	4c f5       	brge	.+82     	; 0x110e <main+0x180>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10bc:	6f a1       	ldd	r22, Y+39	; 0x27
    10be:	78 a5       	ldd	r23, Y+40	; 0x28
    10c0:	89 a5       	ldd	r24, Y+41	; 0x29
    10c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	30 e0       	ldi	r19, 0x00	; 0
    10c8:	40 e2       	ldi	r20, 0x20	; 32
    10ca:	51 e4       	ldi	r21, 0x41	; 65
    10cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10d0:	dc 01       	movw	r26, r24
    10d2:	cb 01       	movw	r24, r22
    10d4:	bc 01       	movw	r22, r24
    10d6:	cd 01       	movw	r24, r26
    10d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10dc:	dc 01       	movw	r26, r24
    10de:	cb 01       	movw	r24, r22
    10e0:	9a a3       	std	Y+34, r25	; 0x22
    10e2:	89 a3       	std	Y+33, r24	; 0x21
    10e4:	0f c0       	rjmp	.+30     	; 0x1104 <main+0x176>
    10e6:	80 e9       	ldi	r24, 0x90	; 144
    10e8:	91 e0       	ldi	r25, 0x01	; 1
    10ea:	98 a3       	std	Y+32, r25	; 0x20
    10ec:	8f 8f       	std	Y+31, r24	; 0x1f
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    10ee:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10f0:	98 a1       	ldd	r25, Y+32	; 0x20
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <main+0x164>
    10f6:	98 a3       	std	Y+32, r25	; 0x20
    10f8:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10fa:	89 a1       	ldd	r24, Y+33	; 0x21
    10fc:	9a a1       	ldd	r25, Y+34	; 0x22
    10fe:	01 97       	sbiw	r24, 0x01	; 1
    1100:	9a a3       	std	Y+34, r25	; 0x22
    1102:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1104:	89 a1       	ldd	r24, Y+33	; 0x21
    1106:	9a a1       	ldd	r25, Y+34	; 0x22
    1108:	00 97       	sbiw	r24, 0x00	; 0
    110a:	69 f7       	brne	.-38     	; 0x10e6 <main+0x158>
    110c:	14 c0       	rjmp	.+40     	; 0x1136 <main+0x1a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110e:	6b a1       	ldd	r22, Y+35	; 0x23
    1110:	7c a1       	ldd	r23, Y+36	; 0x24
    1112:	8d a1       	ldd	r24, Y+37	; 0x25
    1114:	9e a1       	ldd	r25, Y+38	; 0x26
    1116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    111a:	dc 01       	movw	r26, r24
    111c:	cb 01       	movw	r24, r22
    111e:	9a a3       	std	Y+34, r25	; 0x22
    1120:	89 a3       	std	Y+33, r24	; 0x21
    1122:	89 a1       	ldd	r24, Y+33	; 0x21
    1124:	9a a1       	ldd	r25, Y+34	; 0x22
    1126:	9e 8f       	std	Y+30, r25	; 0x1e
    1128:	8d 8f       	std	Y+29, r24	; 0x1d
    112a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    112c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    112e:	01 97       	sbiw	r24, 0x01	; 1
    1130:	f1 f7       	brne	.-4      	; 0x112e <main+0x1a0>
    1132:	9e 8f       	std	Y+30, r25	; 0x1e
    1134:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(200);
				LED_off(0);
    1136:	80 e0       	ldi	r24, 0x00	; 0
    1138:	0e 94 96 07 	call	0xf2c	; 0xf2c <LED_off>
				LED_off(1);
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	0e 94 96 07 	call	0xf2c	; 0xf2c <LED_off>
				LED_off(2);
    1142:	82 e0       	ldi	r24, 0x02	; 2
    1144:	0e 94 96 07 	call	0xf2c	; 0xf2c <LED_off>
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	90 e0       	ldi	r25, 0x00	; 0
    114c:	a8 e4       	ldi	r26, 0x48	; 72
    114e:	b3 e4       	ldi	r27, 0x43	; 67
    1150:	89 8f       	std	Y+25, r24	; 0x19
    1152:	9a 8f       	std	Y+26, r25	; 0x1a
    1154:	ab 8f       	std	Y+27, r26	; 0x1b
    1156:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1158:	69 8d       	ldd	r22, Y+25	; 0x19
    115a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    115c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    115e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	4a e7       	ldi	r20, 0x7A	; 122
    1166:	55 e4       	ldi	r21, 0x45	; 69
    1168:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    116c:	dc 01       	movw	r26, r24
    116e:	cb 01       	movw	r24, r22
    1170:	8d 8b       	std	Y+21, r24	; 0x15
    1172:	9e 8b       	std	Y+22, r25	; 0x16
    1174:	af 8b       	std	Y+23, r26	; 0x17
    1176:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1178:	6d 89       	ldd	r22, Y+21	; 0x15
    117a:	7e 89       	ldd	r23, Y+22	; 0x16
    117c:	8f 89       	ldd	r24, Y+23	; 0x17
    117e:	98 8d       	ldd	r25, Y+24	; 0x18
    1180:	20 e0       	ldi	r18, 0x00	; 0
    1182:	30 e0       	ldi	r19, 0x00	; 0
    1184:	40 e8       	ldi	r20, 0x80	; 128
    1186:	5f e3       	ldi	r21, 0x3F	; 63
    1188:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    118c:	88 23       	and	r24, r24
    118e:	2c f4       	brge	.+10     	; 0x119a <main+0x20c>
		__ticks = 1;
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	9c 8b       	std	Y+20, r25	; 0x14
    1196:	8b 8b       	std	Y+19, r24	; 0x13
    1198:	3f c0       	rjmp	.+126    	; 0x1218 <main+0x28a>
	else if (__tmp > 65535)
    119a:	6d 89       	ldd	r22, Y+21	; 0x15
    119c:	7e 89       	ldd	r23, Y+22	; 0x16
    119e:	8f 89       	ldd	r24, Y+23	; 0x17
    11a0:	98 8d       	ldd	r25, Y+24	; 0x18
    11a2:	20 e0       	ldi	r18, 0x00	; 0
    11a4:	3f ef       	ldi	r19, 0xFF	; 255
    11a6:	4f e7       	ldi	r20, 0x7F	; 127
    11a8:	57 e4       	ldi	r21, 0x47	; 71
    11aa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11ae:	18 16       	cp	r1, r24
    11b0:	4c f5       	brge	.+82     	; 0x1204 <main+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11b2:	69 8d       	ldd	r22, Y+25	; 0x19
    11b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ba:	20 e0       	ldi	r18, 0x00	; 0
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	40 e2       	ldi	r20, 0x20	; 32
    11c0:	51 e4       	ldi	r21, 0x41	; 65
    11c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	bc 01       	movw	r22, r24
    11cc:	cd 01       	movw	r24, r26
    11ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d2:	dc 01       	movw	r26, r24
    11d4:	cb 01       	movw	r24, r22
    11d6:	9c 8b       	std	Y+20, r25	; 0x14
    11d8:	8b 8b       	std	Y+19, r24	; 0x13
    11da:	0f c0       	rjmp	.+30     	; 0x11fa <main+0x26c>
    11dc:	80 e9       	ldi	r24, 0x90	; 144
    11de:	91 e0       	ldi	r25, 0x01	; 1
    11e0:	9a 8b       	std	Y+18, r25	; 0x12
    11e2:	89 8b       	std	Y+17, r24	; 0x11
    11e4:	89 89       	ldd	r24, Y+17	; 0x11
    11e6:	9a 89       	ldd	r25, Y+18	; 0x12
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	f1 f7       	brne	.-4      	; 0x11e8 <main+0x25a>
    11ec:	9a 8b       	std	Y+18, r25	; 0x12
    11ee:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11f0:	8b 89       	ldd	r24, Y+19	; 0x13
    11f2:	9c 89       	ldd	r25, Y+20	; 0x14
    11f4:	01 97       	sbiw	r24, 0x01	; 1
    11f6:	9c 8b       	std	Y+20, r25	; 0x14
    11f8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11fa:	8b 89       	ldd	r24, Y+19	; 0x13
    11fc:	9c 89       	ldd	r25, Y+20	; 0x14
    11fe:	00 97       	sbiw	r24, 0x00	; 0
    1200:	69 f7       	brne	.-38     	; 0x11dc <main+0x24e>
    1202:	14 c0       	rjmp	.+40     	; 0x122c <main+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1204:	6d 89       	ldd	r22, Y+21	; 0x15
    1206:	7e 89       	ldd	r23, Y+22	; 0x16
    1208:	8f 89       	ldd	r24, Y+23	; 0x17
    120a:	98 8d       	ldd	r25, Y+24	; 0x18
    120c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1210:	dc 01       	movw	r26, r24
    1212:	cb 01       	movw	r24, r22
    1214:	9c 8b       	std	Y+20, r25	; 0x14
    1216:	8b 8b       	std	Y+19, r24	; 0x13
    1218:	8b 89       	ldd	r24, Y+19	; 0x13
    121a:	9c 89       	ldd	r25, Y+20	; 0x14
    121c:	98 8b       	std	Y+16, r25	; 0x10
    121e:	8f 87       	std	Y+15, r24	; 0x0f
    1220:	8f 85       	ldd	r24, Y+15	; 0x0f
    1222:	98 89       	ldd	r25, Y+16	; 0x10
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <main+0x296>
    1228:	98 8b       	std	Y+16, r25	; 0x10
    122a:	8f 87       	std	Y+15, r24	; 0x0f
		{
			Buzzer_on();
			LCD_moveCursor(1,6);
			LCD_displayString("STOP");
			/* Keep blinking the LEDs and refreshing the distance until the obstacle is removed */
			while (Distance <= 5)
    122c:	8b a5       	ldd	r24, Y+43	; 0x2b
    122e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1230:	86 30       	cpi	r24, 0x06	; 6
    1232:	91 05       	cpc	r25, r1
    1234:	08 f4       	brcc	.+2      	; 0x1238 <main+0x2aa>
    1236:	f8 ce       	rjmp	.-528    	; 0x1028 <main+0x9a>
				LED_off(1);
				LED_off(2);
				_delay_ms(200);
			}
			/* Once the distance is safe, turn off the buzzer and LEDs */
			Buzzer_off();
    1238:	0e 94 34 07 	call	0xe68	; 0xe68 <Buzzer_off>
			LED_off(0);
    123c:	80 e0       	ldi	r24, 0x00	; 0
    123e:	0e 94 96 07 	call	0xf2c	; 0xf2c <LED_off>
			LED_off(1);
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	0e 94 96 07 	call	0xf2c	; 0xf2c <LED_off>
			LED_off(2);
    1248:	82 e0       	ldi	r24, 0x02	; 2
    124a:	0e 94 96 07 	call	0xf2c	; 0xf2c <LED_off>
			/* Clear the STOP message on the LCD */
			LCD_moveCursor(1,0);
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_moveCursor>
			LCD_displayString("                ");
    1256:	84 e7       	ldi	r24, 0x74	; 116
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <LCD_displayString>
    125e:	36 c0       	rjmp	.+108    	; 0x12cc <main+0x33e>
		}
		/* If the distance is between 6 and 10 cm */
		else if(Distance <= 10)
    1260:	8b a5       	ldd	r24, Y+43	; 0x2b
    1262:	9c a5       	ldd	r25, Y+44	; 0x2c
    1264:	8b 30       	cpi	r24, 0x0B	; 11
    1266:	91 05       	cpc	r25, r1
    1268:	50 f4       	brcc	.+20     	; 0x127e <main+0x2f0>
		{
			LED_on(0);
    126a:	80 e0       	ldi	r24, 0x00	; 0
    126c:	0e 94 65 07 	call	0xeca	; 0xeca <LED_on>
			LED_on(1);
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	0e 94 65 07 	call	0xeca	; 0xeca <LED_on>
			LED_on(2);
    1276:	82 e0       	ldi	r24, 0x02	; 2
    1278:	0e 94 65 07 	call	0xeca	; 0xeca <LED_on>
    127c:	27 c0       	rjmp	.+78     	; 0x12cc <main+0x33e>
		}
		/* If the distance is between 11 and 15 cm */
		else if(Distance <= 15)
    127e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1280:	9c a5       	ldd	r25, Y+44	; 0x2c
    1282:	80 31       	cpi	r24, 0x10	; 16
    1284:	91 05       	cpc	r25, r1
    1286:	50 f4       	brcc	.+20     	; 0x129c <main+0x30e>
		{
			LED_on(0);
    1288:	80 e0       	ldi	r24, 0x00	; 0
    128a:	0e 94 65 07 	call	0xeca	; 0xeca <LED_on>
			LED_on(1);
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	0e 94 65 07 	call	0xeca	; 0xeca <LED_on>
			LED_off(2);
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	0e 94 96 07 	call	0xf2c	; 0xf2c <LED_off>
    129a:	18 c0       	rjmp	.+48     	; 0x12cc <main+0x33e>
		}
		/* If the distance is between 16 and 20 cm */
		else if(Distance <= 20)
    129c:	8b a5       	ldd	r24, Y+43	; 0x2b
    129e:	9c a5       	ldd	r25, Y+44	; 0x2c
    12a0:	85 31       	cpi	r24, 0x15	; 21
    12a2:	91 05       	cpc	r25, r1
    12a4:	50 f4       	brcc	.+20     	; 0x12ba <main+0x32c>
		{
			LED_on(0);
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	0e 94 65 07 	call	0xeca	; 0xeca <LED_on>
			LED_off(1);
    12ac:	81 e0       	ldi	r24, 0x01	; 1
    12ae:	0e 94 96 07 	call	0xf2c	; 0xf2c <LED_off>
			LED_off(2);
    12b2:	82 e0       	ldi	r24, 0x02	; 2
    12b4:	0e 94 96 07 	call	0xf2c	; 0xf2c <LED_off>
    12b8:	09 c0       	rjmp	.+18     	; 0x12cc <main+0x33e>
		}
		/* If the distance is more than 20 cm */
		else
		{
			LED_off(0);
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	0e 94 96 07 	call	0xf2c	; 0xf2c <LED_off>
			LED_off(1);
    12c0:	81 e0       	ldi	r24, 0x01	; 1
    12c2:	0e 94 96 07 	call	0xf2c	; 0xf2c <LED_off>
			LED_off(2);
    12c6:	82 e0       	ldi	r24, 0x02	; 2
    12c8:	0e 94 96 07 	call	0xf2c	; 0xf2c <LED_off>
    12cc:	80 e0       	ldi	r24, 0x00	; 0
    12ce:	90 e0       	ldi	r25, 0x00	; 0
    12d0:	a8 ec       	ldi	r26, 0xC8	; 200
    12d2:	b2 e4       	ldi	r27, 0x42	; 66
    12d4:	8b 87       	std	Y+11, r24	; 0x0b
    12d6:	9c 87       	std	Y+12, r25	; 0x0c
    12d8:	ad 87       	std	Y+13, r26	; 0x0d
    12da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    12de:	7c 85       	ldd	r23, Y+12	; 0x0c
    12e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    12e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    12e4:	20 e0       	ldi	r18, 0x00	; 0
    12e6:	30 e0       	ldi	r19, 0x00	; 0
    12e8:	4a e7       	ldi	r20, 0x7A	; 122
    12ea:	55 e4       	ldi	r21, 0x45	; 69
    12ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12f0:	dc 01       	movw	r26, r24
    12f2:	cb 01       	movw	r24, r22
    12f4:	8f 83       	std	Y+7, r24	; 0x07
    12f6:	98 87       	std	Y+8, r25	; 0x08
    12f8:	a9 87       	std	Y+9, r26	; 0x09
    12fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    12fc:	6f 81       	ldd	r22, Y+7	; 0x07
    12fe:	78 85       	ldd	r23, Y+8	; 0x08
    1300:	89 85       	ldd	r24, Y+9	; 0x09
    1302:	9a 85       	ldd	r25, Y+10	; 0x0a
    1304:	20 e0       	ldi	r18, 0x00	; 0
    1306:	30 e0       	ldi	r19, 0x00	; 0
    1308:	40 e8       	ldi	r20, 0x80	; 128
    130a:	5f e3       	ldi	r21, 0x3F	; 63
    130c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1310:	88 23       	and	r24, r24
    1312:	2c f4       	brge	.+10     	; 0x131e <main+0x390>
		__ticks = 1;
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	90 e0       	ldi	r25, 0x00	; 0
    1318:	9e 83       	std	Y+6, r25	; 0x06
    131a:	8d 83       	std	Y+5, r24	; 0x05
    131c:	3f c0       	rjmp	.+126    	; 0x139c <main+0x40e>
	else if (__tmp > 65535)
    131e:	6f 81       	ldd	r22, Y+7	; 0x07
    1320:	78 85       	ldd	r23, Y+8	; 0x08
    1322:	89 85       	ldd	r24, Y+9	; 0x09
    1324:	9a 85       	ldd	r25, Y+10	; 0x0a
    1326:	20 e0       	ldi	r18, 0x00	; 0
    1328:	3f ef       	ldi	r19, 0xFF	; 255
    132a:	4f e7       	ldi	r20, 0x7F	; 127
    132c:	57 e4       	ldi	r21, 0x47	; 71
    132e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1332:	18 16       	cp	r1, r24
    1334:	4c f5       	brge	.+82     	; 0x1388 <main+0x3fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1336:	6b 85       	ldd	r22, Y+11	; 0x0b
    1338:	7c 85       	ldd	r23, Y+12	; 0x0c
    133a:	8d 85       	ldd	r24, Y+13	; 0x0d
    133c:	9e 85       	ldd	r25, Y+14	; 0x0e
    133e:	20 e0       	ldi	r18, 0x00	; 0
    1340:	30 e0       	ldi	r19, 0x00	; 0
    1342:	40 e2       	ldi	r20, 0x20	; 32
    1344:	51 e4       	ldi	r21, 0x41	; 65
    1346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    134a:	dc 01       	movw	r26, r24
    134c:	cb 01       	movw	r24, r22
    134e:	bc 01       	movw	r22, r24
    1350:	cd 01       	movw	r24, r26
    1352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1356:	dc 01       	movw	r26, r24
    1358:	cb 01       	movw	r24, r22
    135a:	9e 83       	std	Y+6, r25	; 0x06
    135c:	8d 83       	std	Y+5, r24	; 0x05
    135e:	0f c0       	rjmp	.+30     	; 0x137e <main+0x3f0>
    1360:	80 e9       	ldi	r24, 0x90	; 144
    1362:	91 e0       	ldi	r25, 0x01	; 1
    1364:	9c 83       	std	Y+4, r25	; 0x04
    1366:	8b 83       	std	Y+3, r24	; 0x03
    1368:	8b 81       	ldd	r24, Y+3	; 0x03
    136a:	9c 81       	ldd	r25, Y+4	; 0x04
    136c:	01 97       	sbiw	r24, 0x01	; 1
    136e:	f1 f7       	brne	.-4      	; 0x136c <main+0x3de>
    1370:	9c 83       	std	Y+4, r25	; 0x04
    1372:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1374:	8d 81       	ldd	r24, Y+5	; 0x05
    1376:	9e 81       	ldd	r25, Y+6	; 0x06
    1378:	01 97       	sbiw	r24, 0x01	; 1
    137a:	9e 83       	std	Y+6, r25	; 0x06
    137c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    137e:	8d 81       	ldd	r24, Y+5	; 0x05
    1380:	9e 81       	ldd	r25, Y+6	; 0x06
    1382:	00 97       	sbiw	r24, 0x00	; 0
    1384:	69 f7       	brne	.-38     	; 0x1360 <main+0x3d2>
    1386:	22 ce       	rjmp	.-956    	; 0xfcc <main+0x3e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1388:	6f 81       	ldd	r22, Y+7	; 0x07
    138a:	78 85       	ldd	r23, Y+8	; 0x08
    138c:	89 85       	ldd	r24, Y+9	; 0x09
    138e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1394:	dc 01       	movw	r26, r24
    1396:	cb 01       	movw	r24, r22
    1398:	9e 83       	std	Y+6, r25	; 0x06
    139a:	8d 83       	std	Y+5, r24	; 0x05
    139c:	8d 81       	ldd	r24, Y+5	; 0x05
    139e:	9e 81       	ldd	r25, Y+6	; 0x06
    13a0:	9a 83       	std	Y+2, r25	; 0x02
    13a2:	89 83       	std	Y+1, r24	; 0x01
    13a4:	89 81       	ldd	r24, Y+1	; 0x01
    13a6:	9a 81       	ldd	r25, Y+2	; 0x02
    13a8:	01 97       	sbiw	r24, 0x01	; 1
    13aa:	f1 f7       	brne	.-4      	; 0x13a8 <main+0x41a>
    13ac:	9a 83       	std	Y+2, r25	; 0x02
    13ae:	89 83       	std	Y+1, r24	; 0x01
    13b0:	0d ce       	rjmp	.-998    	; 0xfcc <main+0x3e>

000013b2 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	00 d0       	rcall	.+0      	; 0x13b8 <GPIO_setupPinDirection+0x6>
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <GPIO_setupPinDirection+0x8>
    13ba:	0f 92       	push	r0
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	89 83       	std	Y+1, r24	; 0x01
    13c2:	6a 83       	std	Y+2, r22	; 0x02
    13c4:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    13c6:	8a 81       	ldd	r24, Y+2	; 0x02
    13c8:	88 30       	cpi	r24, 0x08	; 8
    13ca:	08 f0       	brcs	.+2      	; 0x13ce <GPIO_setupPinDirection+0x1c>
    13cc:	d5 c0       	rjmp	.+426    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
    13ce:	89 81       	ldd	r24, Y+1	; 0x01
    13d0:	84 30       	cpi	r24, 0x04	; 4
    13d2:	08 f0       	brcs	.+2      	; 0x13d6 <GPIO_setupPinDirection+0x24>
    13d4:	d1 c0       	rjmp	.+418    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    13d6:	89 81       	ldd	r24, Y+1	; 0x01
    13d8:	28 2f       	mov	r18, r24
    13da:	30 e0       	ldi	r19, 0x00	; 0
    13dc:	3d 83       	std	Y+5, r19	; 0x05
    13de:	2c 83       	std	Y+4, r18	; 0x04
    13e0:	8c 81       	ldd	r24, Y+4	; 0x04
    13e2:	9d 81       	ldd	r25, Y+5	; 0x05
    13e4:	81 30       	cpi	r24, 0x01	; 1
    13e6:	91 05       	cpc	r25, r1
    13e8:	09 f4       	brne	.+2      	; 0x13ec <GPIO_setupPinDirection+0x3a>
    13ea:	43 c0       	rjmp	.+134    	; 0x1472 <GPIO_setupPinDirection+0xc0>
    13ec:	2c 81       	ldd	r18, Y+4	; 0x04
    13ee:	3d 81       	ldd	r19, Y+5	; 0x05
    13f0:	22 30       	cpi	r18, 0x02	; 2
    13f2:	31 05       	cpc	r19, r1
    13f4:	2c f4       	brge	.+10     	; 0x1400 <GPIO_setupPinDirection+0x4e>
    13f6:	8c 81       	ldd	r24, Y+4	; 0x04
    13f8:	9d 81       	ldd	r25, Y+5	; 0x05
    13fa:	00 97       	sbiw	r24, 0x00	; 0
    13fc:	71 f0       	breq	.+28     	; 0x141a <GPIO_setupPinDirection+0x68>
    13fe:	bc c0       	rjmp	.+376    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
    1400:	2c 81       	ldd	r18, Y+4	; 0x04
    1402:	3d 81       	ldd	r19, Y+5	; 0x05
    1404:	22 30       	cpi	r18, 0x02	; 2
    1406:	31 05       	cpc	r19, r1
    1408:	09 f4       	brne	.+2      	; 0x140c <GPIO_setupPinDirection+0x5a>
    140a:	5f c0       	rjmp	.+190    	; 0x14ca <GPIO_setupPinDirection+0x118>
    140c:	8c 81       	ldd	r24, Y+4	; 0x04
    140e:	9d 81       	ldd	r25, Y+5	; 0x05
    1410:	83 30       	cpi	r24, 0x03	; 3
    1412:	91 05       	cpc	r25, r1
    1414:	09 f4       	brne	.+2      	; 0x1418 <GPIO_setupPinDirection+0x66>
    1416:	85 c0       	rjmp	.+266    	; 0x1522 <GPIO_setupPinDirection+0x170>
    1418:	af c0       	rjmp	.+350    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    141a:	8b 81       	ldd	r24, Y+3	; 0x03
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	a1 f4       	brne	.+40     	; 0x1448 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1420:	aa e3       	ldi	r26, 0x3A	; 58
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	ea e3       	ldi	r30, 0x3A	; 58
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	48 2f       	mov	r20, r24
    142c:	8a 81       	ldd	r24, Y+2	; 0x02
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	02 2e       	mov	r0, r18
    1438:	02 c0       	rjmp	.+4      	; 0x143e <GPIO_setupPinDirection+0x8c>
    143a:	88 0f       	add	r24, r24
    143c:	99 1f       	adc	r25, r25
    143e:	0a 94       	dec	r0
    1440:	e2 f7       	brpl	.-8      	; 0x143a <GPIO_setupPinDirection+0x88>
    1442:	84 2b       	or	r24, r20
    1444:	8c 93       	st	X, r24
    1446:	98 c0       	rjmp	.+304    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1448:	aa e3       	ldi	r26, 0x3A	; 58
    144a:	b0 e0       	ldi	r27, 0x00	; 0
    144c:	ea e3       	ldi	r30, 0x3A	; 58
    144e:	f0 e0       	ldi	r31, 0x00	; 0
    1450:	80 81       	ld	r24, Z
    1452:	48 2f       	mov	r20, r24
    1454:	8a 81       	ldd	r24, Y+2	; 0x02
    1456:	28 2f       	mov	r18, r24
    1458:	30 e0       	ldi	r19, 0x00	; 0
    145a:	81 e0       	ldi	r24, 0x01	; 1
    145c:	90 e0       	ldi	r25, 0x00	; 0
    145e:	02 2e       	mov	r0, r18
    1460:	02 c0       	rjmp	.+4      	; 0x1466 <GPIO_setupPinDirection+0xb4>
    1462:	88 0f       	add	r24, r24
    1464:	99 1f       	adc	r25, r25
    1466:	0a 94       	dec	r0
    1468:	e2 f7       	brpl	.-8      	; 0x1462 <GPIO_setupPinDirection+0xb0>
    146a:	80 95       	com	r24
    146c:	84 23       	and	r24, r20
    146e:	8c 93       	st	X, r24
    1470:	83 c0       	rjmp	.+262    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1472:	8b 81       	ldd	r24, Y+3	; 0x03
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	a1 f4       	brne	.+40     	; 0x14a0 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1478:	a7 e3       	ldi	r26, 0x37	; 55
    147a:	b0 e0       	ldi	r27, 0x00	; 0
    147c:	e7 e3       	ldi	r30, 0x37	; 55
    147e:	f0 e0       	ldi	r31, 0x00	; 0
    1480:	80 81       	ld	r24, Z
    1482:	48 2f       	mov	r20, r24
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	28 2f       	mov	r18, r24
    1488:	30 e0       	ldi	r19, 0x00	; 0
    148a:	81 e0       	ldi	r24, 0x01	; 1
    148c:	90 e0       	ldi	r25, 0x00	; 0
    148e:	02 2e       	mov	r0, r18
    1490:	02 c0       	rjmp	.+4      	; 0x1496 <GPIO_setupPinDirection+0xe4>
    1492:	88 0f       	add	r24, r24
    1494:	99 1f       	adc	r25, r25
    1496:	0a 94       	dec	r0
    1498:	e2 f7       	brpl	.-8      	; 0x1492 <GPIO_setupPinDirection+0xe0>
    149a:	84 2b       	or	r24, r20
    149c:	8c 93       	st	X, r24
    149e:	6c c0       	rjmp	.+216    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    14a0:	a7 e3       	ldi	r26, 0x37	; 55
    14a2:	b0 e0       	ldi	r27, 0x00	; 0
    14a4:	e7 e3       	ldi	r30, 0x37	; 55
    14a6:	f0 e0       	ldi	r31, 0x00	; 0
    14a8:	80 81       	ld	r24, Z
    14aa:	48 2f       	mov	r20, r24
    14ac:	8a 81       	ldd	r24, Y+2	; 0x02
    14ae:	28 2f       	mov	r18, r24
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	81 e0       	ldi	r24, 0x01	; 1
    14b4:	90 e0       	ldi	r25, 0x00	; 0
    14b6:	02 2e       	mov	r0, r18
    14b8:	02 c0       	rjmp	.+4      	; 0x14be <GPIO_setupPinDirection+0x10c>
    14ba:	88 0f       	add	r24, r24
    14bc:	99 1f       	adc	r25, r25
    14be:	0a 94       	dec	r0
    14c0:	e2 f7       	brpl	.-8      	; 0x14ba <GPIO_setupPinDirection+0x108>
    14c2:	80 95       	com	r24
    14c4:	84 23       	and	r24, r20
    14c6:	8c 93       	st	X, r24
    14c8:	57 c0       	rjmp	.+174    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	81 30       	cpi	r24, 0x01	; 1
    14ce:	a1 f4       	brne	.+40     	; 0x14f8 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    14d0:	a4 e3       	ldi	r26, 0x34	; 52
    14d2:	b0 e0       	ldi	r27, 0x00	; 0
    14d4:	e4 e3       	ldi	r30, 0x34	; 52
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	80 81       	ld	r24, Z
    14da:	48 2f       	mov	r20, r24
    14dc:	8a 81       	ldd	r24, Y+2	; 0x02
    14de:	28 2f       	mov	r18, r24
    14e0:	30 e0       	ldi	r19, 0x00	; 0
    14e2:	81 e0       	ldi	r24, 0x01	; 1
    14e4:	90 e0       	ldi	r25, 0x00	; 0
    14e6:	02 2e       	mov	r0, r18
    14e8:	02 c0       	rjmp	.+4      	; 0x14ee <GPIO_setupPinDirection+0x13c>
    14ea:	88 0f       	add	r24, r24
    14ec:	99 1f       	adc	r25, r25
    14ee:	0a 94       	dec	r0
    14f0:	e2 f7       	brpl	.-8      	; 0x14ea <GPIO_setupPinDirection+0x138>
    14f2:	84 2b       	or	r24, r20
    14f4:	8c 93       	st	X, r24
    14f6:	40 c0       	rjmp	.+128    	; 0x1578 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    14f8:	a4 e3       	ldi	r26, 0x34	; 52
    14fa:	b0 e0       	ldi	r27, 0x00	; 0
    14fc:	e4 e3       	ldi	r30, 0x34	; 52
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	80 81       	ld	r24, Z
    1502:	48 2f       	mov	r20, r24
    1504:	8a 81       	ldd	r24, Y+2	; 0x02
    1506:	28 2f       	mov	r18, r24
    1508:	30 e0       	ldi	r19, 0x00	; 0
    150a:	81 e0       	ldi	r24, 0x01	; 1
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	02 2e       	mov	r0, r18
    1510:	02 c0       	rjmp	.+4      	; 0x1516 <GPIO_setupPinDirection+0x164>
    1512:	88 0f       	add	r24, r24
    1514:	99 1f       	adc	r25, r25
    1516:	0a 94       	dec	r0
    1518:	e2 f7       	brpl	.-8      	; 0x1512 <GPIO_setupPinDirection+0x160>
    151a:	80 95       	com	r24
    151c:	84 23       	and	r24, r20
    151e:	8c 93       	st	X, r24
    1520:	2b c0       	rjmp	.+86     	; 0x1578 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1522:	8b 81       	ldd	r24, Y+3	; 0x03
    1524:	81 30       	cpi	r24, 0x01	; 1
    1526:	a1 f4       	brne	.+40     	; 0x1550 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1528:	a1 e3       	ldi	r26, 0x31	; 49
    152a:	b0 e0       	ldi	r27, 0x00	; 0
    152c:	e1 e3       	ldi	r30, 0x31	; 49
    152e:	f0 e0       	ldi	r31, 0x00	; 0
    1530:	80 81       	ld	r24, Z
    1532:	48 2f       	mov	r20, r24
    1534:	8a 81       	ldd	r24, Y+2	; 0x02
    1536:	28 2f       	mov	r18, r24
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	81 e0       	ldi	r24, 0x01	; 1
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	02 2e       	mov	r0, r18
    1540:	02 c0       	rjmp	.+4      	; 0x1546 <GPIO_setupPinDirection+0x194>
    1542:	88 0f       	add	r24, r24
    1544:	99 1f       	adc	r25, r25
    1546:	0a 94       	dec	r0
    1548:	e2 f7       	brpl	.-8      	; 0x1542 <GPIO_setupPinDirection+0x190>
    154a:	84 2b       	or	r24, r20
    154c:	8c 93       	st	X, r24
    154e:	14 c0       	rjmp	.+40     	; 0x1578 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1550:	a1 e3       	ldi	r26, 0x31	; 49
    1552:	b0 e0       	ldi	r27, 0x00	; 0
    1554:	e1 e3       	ldi	r30, 0x31	; 49
    1556:	f0 e0       	ldi	r31, 0x00	; 0
    1558:	80 81       	ld	r24, Z
    155a:	48 2f       	mov	r20, r24
    155c:	8a 81       	ldd	r24, Y+2	; 0x02
    155e:	28 2f       	mov	r18, r24
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	81 e0       	ldi	r24, 0x01	; 1
    1564:	90 e0       	ldi	r25, 0x00	; 0
    1566:	02 2e       	mov	r0, r18
    1568:	02 c0       	rjmp	.+4      	; 0x156e <GPIO_setupPinDirection+0x1bc>
    156a:	88 0f       	add	r24, r24
    156c:	99 1f       	adc	r25, r25
    156e:	0a 94       	dec	r0
    1570:	e2 f7       	brpl	.-8      	; 0x156a <GPIO_setupPinDirection+0x1b8>
    1572:	80 95       	com	r24
    1574:	84 23       	and	r24, r20
    1576:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	0f 90       	pop	r0
    1580:	0f 90       	pop	r0
    1582:	cf 91       	pop	r28
    1584:	df 91       	pop	r29
    1586:	08 95       	ret

00001588 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1588:	df 93       	push	r29
    158a:	cf 93       	push	r28
    158c:	00 d0       	rcall	.+0      	; 0x158e <GPIO_writePin+0x6>
    158e:	00 d0       	rcall	.+0      	; 0x1590 <GPIO_writePin+0x8>
    1590:	0f 92       	push	r0
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	89 83       	std	Y+1, r24	; 0x01
    1598:	6a 83       	std	Y+2, r22	; 0x02
    159a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    159c:	8a 81       	ldd	r24, Y+2	; 0x02
    159e:	88 30       	cpi	r24, 0x08	; 8
    15a0:	08 f0       	brcs	.+2      	; 0x15a4 <GPIO_writePin+0x1c>
    15a2:	d5 c0       	rjmp	.+426    	; 0x174e <GPIO_writePin+0x1c6>
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	84 30       	cpi	r24, 0x04	; 4
    15a8:	08 f0       	brcs	.+2      	; 0x15ac <GPIO_writePin+0x24>
    15aa:	d1 c0       	rjmp	.+418    	; 0x174e <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	3d 83       	std	Y+5, r19	; 0x05
    15b4:	2c 83       	std	Y+4, r18	; 0x04
    15b6:	8c 81       	ldd	r24, Y+4	; 0x04
    15b8:	9d 81       	ldd	r25, Y+5	; 0x05
    15ba:	81 30       	cpi	r24, 0x01	; 1
    15bc:	91 05       	cpc	r25, r1
    15be:	09 f4       	brne	.+2      	; 0x15c2 <GPIO_writePin+0x3a>
    15c0:	43 c0       	rjmp	.+134    	; 0x1648 <GPIO_writePin+0xc0>
    15c2:	2c 81       	ldd	r18, Y+4	; 0x04
    15c4:	3d 81       	ldd	r19, Y+5	; 0x05
    15c6:	22 30       	cpi	r18, 0x02	; 2
    15c8:	31 05       	cpc	r19, r1
    15ca:	2c f4       	brge	.+10     	; 0x15d6 <GPIO_writePin+0x4e>
    15cc:	8c 81       	ldd	r24, Y+4	; 0x04
    15ce:	9d 81       	ldd	r25, Y+5	; 0x05
    15d0:	00 97       	sbiw	r24, 0x00	; 0
    15d2:	71 f0       	breq	.+28     	; 0x15f0 <GPIO_writePin+0x68>
    15d4:	bc c0       	rjmp	.+376    	; 0x174e <GPIO_writePin+0x1c6>
    15d6:	2c 81       	ldd	r18, Y+4	; 0x04
    15d8:	3d 81       	ldd	r19, Y+5	; 0x05
    15da:	22 30       	cpi	r18, 0x02	; 2
    15dc:	31 05       	cpc	r19, r1
    15de:	09 f4       	brne	.+2      	; 0x15e2 <GPIO_writePin+0x5a>
    15e0:	5f c0       	rjmp	.+190    	; 0x16a0 <GPIO_writePin+0x118>
    15e2:	8c 81       	ldd	r24, Y+4	; 0x04
    15e4:	9d 81       	ldd	r25, Y+5	; 0x05
    15e6:	83 30       	cpi	r24, 0x03	; 3
    15e8:	91 05       	cpc	r25, r1
    15ea:	09 f4       	brne	.+2      	; 0x15ee <GPIO_writePin+0x66>
    15ec:	85 c0       	rjmp	.+266    	; 0x16f8 <GPIO_writePin+0x170>
    15ee:	af c0       	rjmp	.+350    	; 0x174e <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	a1 f4       	brne	.+40     	; 0x161e <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    15f6:	ab e3       	ldi	r26, 0x3B	; 59
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	eb e3       	ldi	r30, 0x3B	; 59
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	48 2f       	mov	r20, r24
    1602:	8a 81       	ldd	r24, Y+2	; 0x02
    1604:	28 2f       	mov	r18, r24
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	81 e0       	ldi	r24, 0x01	; 1
    160a:	90 e0       	ldi	r25, 0x00	; 0
    160c:	02 2e       	mov	r0, r18
    160e:	02 c0       	rjmp	.+4      	; 0x1614 <GPIO_writePin+0x8c>
    1610:	88 0f       	add	r24, r24
    1612:	99 1f       	adc	r25, r25
    1614:	0a 94       	dec	r0
    1616:	e2 f7       	brpl	.-8      	; 0x1610 <GPIO_writePin+0x88>
    1618:	84 2b       	or	r24, r20
    161a:	8c 93       	st	X, r24
    161c:	98 c0       	rjmp	.+304    	; 0x174e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    161e:	ab e3       	ldi	r26, 0x3B	; 59
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	eb e3       	ldi	r30, 0x3B	; 59
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	48 2f       	mov	r20, r24
    162a:	8a 81       	ldd	r24, Y+2	; 0x02
    162c:	28 2f       	mov	r18, r24
    162e:	30 e0       	ldi	r19, 0x00	; 0
    1630:	81 e0       	ldi	r24, 0x01	; 1
    1632:	90 e0       	ldi	r25, 0x00	; 0
    1634:	02 2e       	mov	r0, r18
    1636:	02 c0       	rjmp	.+4      	; 0x163c <GPIO_writePin+0xb4>
    1638:	88 0f       	add	r24, r24
    163a:	99 1f       	adc	r25, r25
    163c:	0a 94       	dec	r0
    163e:	e2 f7       	brpl	.-8      	; 0x1638 <GPIO_writePin+0xb0>
    1640:	80 95       	com	r24
    1642:	84 23       	and	r24, r20
    1644:	8c 93       	st	X, r24
    1646:	83 c0       	rjmp	.+262    	; 0x174e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	81 30       	cpi	r24, 0x01	; 1
    164c:	a1 f4       	brne	.+40     	; 0x1676 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    164e:	a8 e3       	ldi	r26, 0x38	; 56
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	e8 e3       	ldi	r30, 0x38	; 56
    1654:	f0 e0       	ldi	r31, 0x00	; 0
    1656:	80 81       	ld	r24, Z
    1658:	48 2f       	mov	r20, r24
    165a:	8a 81       	ldd	r24, Y+2	; 0x02
    165c:	28 2f       	mov	r18, r24
    165e:	30 e0       	ldi	r19, 0x00	; 0
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	90 e0       	ldi	r25, 0x00	; 0
    1664:	02 2e       	mov	r0, r18
    1666:	02 c0       	rjmp	.+4      	; 0x166c <GPIO_writePin+0xe4>
    1668:	88 0f       	add	r24, r24
    166a:	99 1f       	adc	r25, r25
    166c:	0a 94       	dec	r0
    166e:	e2 f7       	brpl	.-8      	; 0x1668 <GPIO_writePin+0xe0>
    1670:	84 2b       	or	r24, r20
    1672:	8c 93       	st	X, r24
    1674:	6c c0       	rjmp	.+216    	; 0x174e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1676:	a8 e3       	ldi	r26, 0x38	; 56
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e8 e3       	ldi	r30, 0x38	; 56
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	48 2f       	mov	r20, r24
    1682:	8a 81       	ldd	r24, Y+2	; 0x02
    1684:	28 2f       	mov	r18, r24
    1686:	30 e0       	ldi	r19, 0x00	; 0
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	02 2e       	mov	r0, r18
    168e:	02 c0       	rjmp	.+4      	; 0x1694 <GPIO_writePin+0x10c>
    1690:	88 0f       	add	r24, r24
    1692:	99 1f       	adc	r25, r25
    1694:	0a 94       	dec	r0
    1696:	e2 f7       	brpl	.-8      	; 0x1690 <GPIO_writePin+0x108>
    1698:	80 95       	com	r24
    169a:	84 23       	and	r24, r20
    169c:	8c 93       	st	X, r24
    169e:	57 c0       	rjmp	.+174    	; 0x174e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	a1 f4       	brne	.+40     	; 0x16ce <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    16a6:	a5 e3       	ldi	r26, 0x35	; 53
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e5 e3       	ldi	r30, 0x35	; 53
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	80 81       	ld	r24, Z
    16b0:	48 2f       	mov	r20, r24
    16b2:	8a 81       	ldd	r24, Y+2	; 0x02
    16b4:	28 2f       	mov	r18, r24
    16b6:	30 e0       	ldi	r19, 0x00	; 0
    16b8:	81 e0       	ldi	r24, 0x01	; 1
    16ba:	90 e0       	ldi	r25, 0x00	; 0
    16bc:	02 2e       	mov	r0, r18
    16be:	02 c0       	rjmp	.+4      	; 0x16c4 <GPIO_writePin+0x13c>
    16c0:	88 0f       	add	r24, r24
    16c2:	99 1f       	adc	r25, r25
    16c4:	0a 94       	dec	r0
    16c6:	e2 f7       	brpl	.-8      	; 0x16c0 <GPIO_writePin+0x138>
    16c8:	84 2b       	or	r24, r20
    16ca:	8c 93       	st	X, r24
    16cc:	40 c0       	rjmp	.+128    	; 0x174e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    16ce:	a5 e3       	ldi	r26, 0x35	; 53
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e5 e3       	ldi	r30, 0x35	; 53
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	48 2f       	mov	r20, r24
    16da:	8a 81       	ldd	r24, Y+2	; 0x02
    16dc:	28 2f       	mov	r18, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	81 e0       	ldi	r24, 0x01	; 1
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	02 2e       	mov	r0, r18
    16e6:	02 c0       	rjmp	.+4      	; 0x16ec <GPIO_writePin+0x164>
    16e8:	88 0f       	add	r24, r24
    16ea:	99 1f       	adc	r25, r25
    16ec:	0a 94       	dec	r0
    16ee:	e2 f7       	brpl	.-8      	; 0x16e8 <GPIO_writePin+0x160>
    16f0:	80 95       	com	r24
    16f2:	84 23       	and	r24, r20
    16f4:	8c 93       	st	X, r24
    16f6:	2b c0       	rjmp	.+86     	; 0x174e <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    16f8:	8b 81       	ldd	r24, Y+3	; 0x03
    16fa:	81 30       	cpi	r24, 0x01	; 1
    16fc:	a1 f4       	brne	.+40     	; 0x1726 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    16fe:	a2 e3       	ldi	r26, 0x32	; 50
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e2 e3       	ldi	r30, 0x32	; 50
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <GPIO_writePin+0x194>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <GPIO_writePin+0x190>
    1720:	84 2b       	or	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	14 c0       	rjmp	.+40     	; 0x174e <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1726:	a2 e3       	ldi	r26, 0x32	; 50
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e2 e3       	ldi	r30, 0x32	; 50
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <GPIO_writePin+0x1bc>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <GPIO_writePin+0x1b8>
    1748:	80 95       	com	r24
    174a:	84 23       	and	r24, r20
    174c:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    174e:	0f 90       	pop	r0
    1750:	0f 90       	pop	r0
    1752:	0f 90       	pop	r0
    1754:	0f 90       	pop	r0
    1756:	0f 90       	pop	r0
    1758:	cf 91       	pop	r28
    175a:	df 91       	pop	r29
    175c:	08 95       	ret

0000175e <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    175e:	df 93       	push	r29
    1760:	cf 93       	push	r28
    1762:	00 d0       	rcall	.+0      	; 0x1764 <GPIO_readPin+0x6>
    1764:	00 d0       	rcall	.+0      	; 0x1766 <GPIO_readPin+0x8>
    1766:	0f 92       	push	r0
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
    176c:	8a 83       	std	Y+2, r24	; 0x02
    176e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1770:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1772:	8b 81       	ldd	r24, Y+3	; 0x03
    1774:	88 30       	cpi	r24, 0x08	; 8
    1776:	08 f0       	brcs	.+2      	; 0x177a <GPIO_readPin+0x1c>
    1778:	84 c0       	rjmp	.+264    	; 0x1882 <GPIO_readPin+0x124>
    177a:	8a 81       	ldd	r24, Y+2	; 0x02
    177c:	84 30       	cpi	r24, 0x04	; 4
    177e:	08 f0       	brcs	.+2      	; 0x1782 <GPIO_readPin+0x24>
    1780:	80 c0       	rjmp	.+256    	; 0x1882 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1782:	8a 81       	ldd	r24, Y+2	; 0x02
    1784:	28 2f       	mov	r18, r24
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	3d 83       	std	Y+5, r19	; 0x05
    178a:	2c 83       	std	Y+4, r18	; 0x04
    178c:	4c 81       	ldd	r20, Y+4	; 0x04
    178e:	5d 81       	ldd	r21, Y+5	; 0x05
    1790:	41 30       	cpi	r20, 0x01	; 1
    1792:	51 05       	cpc	r21, r1
    1794:	79 f1       	breq	.+94     	; 0x17f4 <GPIO_readPin+0x96>
    1796:	8c 81       	ldd	r24, Y+4	; 0x04
    1798:	9d 81       	ldd	r25, Y+5	; 0x05
    179a:	82 30       	cpi	r24, 0x02	; 2
    179c:	91 05       	cpc	r25, r1
    179e:	34 f4       	brge	.+12     	; 0x17ac <GPIO_readPin+0x4e>
    17a0:	2c 81       	ldd	r18, Y+4	; 0x04
    17a2:	3d 81       	ldd	r19, Y+5	; 0x05
    17a4:	21 15       	cp	r18, r1
    17a6:	31 05       	cpc	r19, r1
    17a8:	69 f0       	breq	.+26     	; 0x17c4 <GPIO_readPin+0x66>
    17aa:	6b c0       	rjmp	.+214    	; 0x1882 <GPIO_readPin+0x124>
    17ac:	4c 81       	ldd	r20, Y+4	; 0x04
    17ae:	5d 81       	ldd	r21, Y+5	; 0x05
    17b0:	42 30       	cpi	r20, 0x02	; 2
    17b2:	51 05       	cpc	r21, r1
    17b4:	b9 f1       	breq	.+110    	; 0x1824 <GPIO_readPin+0xc6>
    17b6:	8c 81       	ldd	r24, Y+4	; 0x04
    17b8:	9d 81       	ldd	r25, Y+5	; 0x05
    17ba:	83 30       	cpi	r24, 0x03	; 3
    17bc:	91 05       	cpc	r25, r1
    17be:	09 f4       	brne	.+2      	; 0x17c2 <GPIO_readPin+0x64>
    17c0:	49 c0       	rjmp	.+146    	; 0x1854 <GPIO_readPin+0xf6>
    17c2:	5f c0       	rjmp	.+190    	; 0x1882 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    17c4:	e9 e3       	ldi	r30, 0x39	; 57
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	28 2f       	mov	r18, r24
    17cc:	30 e0       	ldi	r19, 0x00	; 0
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	88 2f       	mov	r24, r24
    17d2:	90 e0       	ldi	r25, 0x00	; 0
    17d4:	a9 01       	movw	r20, r18
    17d6:	02 c0       	rjmp	.+4      	; 0x17dc <GPIO_readPin+0x7e>
    17d8:	55 95       	asr	r21
    17da:	47 95       	ror	r20
    17dc:	8a 95       	dec	r24
    17de:	e2 f7       	brpl	.-8      	; 0x17d8 <GPIO_readPin+0x7a>
    17e0:	ca 01       	movw	r24, r20
    17e2:	81 70       	andi	r24, 0x01	; 1
    17e4:	90 70       	andi	r25, 0x00	; 0
    17e6:	88 23       	and	r24, r24
    17e8:	19 f0       	breq	.+6      	; 0x17f0 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    17ea:	81 e0       	ldi	r24, 0x01	; 1
    17ec:	89 83       	std	Y+1, r24	; 0x01
    17ee:	49 c0       	rjmp	.+146    	; 0x1882 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    17f0:	19 82       	std	Y+1, r1	; 0x01
    17f2:	47 c0       	rjmp	.+142    	; 0x1882 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    17f4:	e6 e3       	ldi	r30, 0x36	; 54
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	28 2f       	mov	r18, r24
    17fc:	30 e0       	ldi	r19, 0x00	; 0
    17fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1800:	88 2f       	mov	r24, r24
    1802:	90 e0       	ldi	r25, 0x00	; 0
    1804:	a9 01       	movw	r20, r18
    1806:	02 c0       	rjmp	.+4      	; 0x180c <GPIO_readPin+0xae>
    1808:	55 95       	asr	r21
    180a:	47 95       	ror	r20
    180c:	8a 95       	dec	r24
    180e:	e2 f7       	brpl	.-8      	; 0x1808 <GPIO_readPin+0xaa>
    1810:	ca 01       	movw	r24, r20
    1812:	81 70       	andi	r24, 0x01	; 1
    1814:	90 70       	andi	r25, 0x00	; 0
    1816:	88 23       	and	r24, r24
    1818:	19 f0       	breq	.+6      	; 0x1820 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	89 83       	std	Y+1, r24	; 0x01
    181e:	31 c0       	rjmp	.+98     	; 0x1882 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1820:	19 82       	std	Y+1, r1	; 0x01
    1822:	2f c0       	rjmp	.+94     	; 0x1882 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1824:	e3 e3       	ldi	r30, 0x33	; 51
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	28 2f       	mov	r18, r24
    182c:	30 e0       	ldi	r19, 0x00	; 0
    182e:	8b 81       	ldd	r24, Y+3	; 0x03
    1830:	88 2f       	mov	r24, r24
    1832:	90 e0       	ldi	r25, 0x00	; 0
    1834:	a9 01       	movw	r20, r18
    1836:	02 c0       	rjmp	.+4      	; 0x183c <GPIO_readPin+0xde>
    1838:	55 95       	asr	r21
    183a:	47 95       	ror	r20
    183c:	8a 95       	dec	r24
    183e:	e2 f7       	brpl	.-8      	; 0x1838 <GPIO_readPin+0xda>
    1840:	ca 01       	movw	r24, r20
    1842:	81 70       	andi	r24, 0x01	; 1
    1844:	90 70       	andi	r25, 0x00	; 0
    1846:	88 23       	and	r24, r24
    1848:	19 f0       	breq	.+6      	; 0x1850 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    184a:	81 e0       	ldi	r24, 0x01	; 1
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	19 c0       	rjmp	.+50     	; 0x1882 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1850:	19 82       	std	Y+1, r1	; 0x01
    1852:	17 c0       	rjmp	.+46     	; 0x1882 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1854:	e0 e3       	ldi	r30, 0x30	; 48
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	28 2f       	mov	r18, r24
    185c:	30 e0       	ldi	r19, 0x00	; 0
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	88 2f       	mov	r24, r24
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	a9 01       	movw	r20, r18
    1866:	02 c0       	rjmp	.+4      	; 0x186c <GPIO_readPin+0x10e>
    1868:	55 95       	asr	r21
    186a:	47 95       	ror	r20
    186c:	8a 95       	dec	r24
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <GPIO_readPin+0x10a>
    1870:	ca 01       	movw	r24, r20
    1872:	81 70       	andi	r24, 0x01	; 1
    1874:	90 70       	andi	r25, 0x00	; 0
    1876:	88 23       	and	r24, r24
    1878:	19 f0       	breq	.+6      	; 0x1880 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    187a:	81 e0       	ldi	r24, 0x01	; 1
    187c:	89 83       	std	Y+1, r24	; 0x01
    187e:	01 c0       	rjmp	.+2      	; 0x1882 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1880:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1882:	89 81       	ldd	r24, Y+1	; 0x01
}
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	0f 90       	pop	r0
    188c:	0f 90       	pop	r0
    188e:	cf 91       	pop	r28
    1890:	df 91       	pop	r29
    1892:	08 95       	ret

00001894 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1894:	df 93       	push	r29
    1896:	cf 93       	push	r28
    1898:	00 d0       	rcall	.+0      	; 0x189a <GPIO_setupPortDirection+0x6>
    189a:	00 d0       	rcall	.+0      	; 0x189c <GPIO_setupPortDirection+0x8>
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18a4:	89 81       	ldd	r24, Y+1	; 0x01
    18a6:	84 30       	cpi	r24, 0x04	; 4
    18a8:	90 f5       	brcc	.+100    	; 0x190e <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    18aa:	89 81       	ldd	r24, Y+1	; 0x01
    18ac:	28 2f       	mov	r18, r24
    18ae:	30 e0       	ldi	r19, 0x00	; 0
    18b0:	3c 83       	std	Y+4, r19	; 0x04
    18b2:	2b 83       	std	Y+3, r18	; 0x03
    18b4:	8b 81       	ldd	r24, Y+3	; 0x03
    18b6:	9c 81       	ldd	r25, Y+4	; 0x04
    18b8:	81 30       	cpi	r24, 0x01	; 1
    18ba:	91 05       	cpc	r25, r1
    18bc:	d1 f0       	breq	.+52     	; 0x18f2 <GPIO_setupPortDirection+0x5e>
    18be:	2b 81       	ldd	r18, Y+3	; 0x03
    18c0:	3c 81       	ldd	r19, Y+4	; 0x04
    18c2:	22 30       	cpi	r18, 0x02	; 2
    18c4:	31 05       	cpc	r19, r1
    18c6:	2c f4       	brge	.+10     	; 0x18d2 <GPIO_setupPortDirection+0x3e>
    18c8:	8b 81       	ldd	r24, Y+3	; 0x03
    18ca:	9c 81       	ldd	r25, Y+4	; 0x04
    18cc:	00 97       	sbiw	r24, 0x00	; 0
    18ce:	61 f0       	breq	.+24     	; 0x18e8 <GPIO_setupPortDirection+0x54>
    18d0:	1e c0       	rjmp	.+60     	; 0x190e <GPIO_setupPortDirection+0x7a>
    18d2:	2b 81       	ldd	r18, Y+3	; 0x03
    18d4:	3c 81       	ldd	r19, Y+4	; 0x04
    18d6:	22 30       	cpi	r18, 0x02	; 2
    18d8:	31 05       	cpc	r19, r1
    18da:	81 f0       	breq	.+32     	; 0x18fc <GPIO_setupPortDirection+0x68>
    18dc:	8b 81       	ldd	r24, Y+3	; 0x03
    18de:	9c 81       	ldd	r25, Y+4	; 0x04
    18e0:	83 30       	cpi	r24, 0x03	; 3
    18e2:	91 05       	cpc	r25, r1
    18e4:	81 f0       	breq	.+32     	; 0x1906 <GPIO_setupPortDirection+0x72>
    18e6:	13 c0       	rjmp	.+38     	; 0x190e <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    18e8:	ea e3       	ldi	r30, 0x3A	; 58
    18ea:	f0 e0       	ldi	r31, 0x00	; 0
    18ec:	8a 81       	ldd	r24, Y+2	; 0x02
    18ee:	80 83       	st	Z, r24
    18f0:	0e c0       	rjmp	.+28     	; 0x190e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    18f2:	e7 e3       	ldi	r30, 0x37	; 55
    18f4:	f0 e0       	ldi	r31, 0x00	; 0
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	80 83       	st	Z, r24
    18fa:	09 c0       	rjmp	.+18     	; 0x190e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    18fc:	e4 e3       	ldi	r30, 0x34	; 52
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	8a 81       	ldd	r24, Y+2	; 0x02
    1902:	80 83       	st	Z, r24
    1904:	04 c0       	rjmp	.+8      	; 0x190e <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1906:	e1 e3       	ldi	r30, 0x31	; 49
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	8a 81       	ldd	r24, Y+2	; 0x02
    190c:	80 83       	st	Z, r24
			break;
		}
	}
}
    190e:	0f 90       	pop	r0
    1910:	0f 90       	pop	r0
    1912:	0f 90       	pop	r0
    1914:	0f 90       	pop	r0
    1916:	cf 91       	pop	r28
    1918:	df 91       	pop	r29
    191a:	08 95       	ret

0000191c <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    191c:	df 93       	push	r29
    191e:	cf 93       	push	r28
    1920:	00 d0       	rcall	.+0      	; 0x1922 <GPIO_writePort+0x6>
    1922:	00 d0       	rcall	.+0      	; 0x1924 <GPIO_writePort+0x8>
    1924:	cd b7       	in	r28, 0x3d	; 61
    1926:	de b7       	in	r29, 0x3e	; 62
    1928:	89 83       	std	Y+1, r24	; 0x01
    192a:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    192c:	89 81       	ldd	r24, Y+1	; 0x01
    192e:	84 30       	cpi	r24, 0x04	; 4
    1930:	90 f5       	brcc	.+100    	; 0x1996 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1932:	89 81       	ldd	r24, Y+1	; 0x01
    1934:	28 2f       	mov	r18, r24
    1936:	30 e0       	ldi	r19, 0x00	; 0
    1938:	3c 83       	std	Y+4, r19	; 0x04
    193a:	2b 83       	std	Y+3, r18	; 0x03
    193c:	8b 81       	ldd	r24, Y+3	; 0x03
    193e:	9c 81       	ldd	r25, Y+4	; 0x04
    1940:	81 30       	cpi	r24, 0x01	; 1
    1942:	91 05       	cpc	r25, r1
    1944:	d1 f0       	breq	.+52     	; 0x197a <GPIO_writePort+0x5e>
    1946:	2b 81       	ldd	r18, Y+3	; 0x03
    1948:	3c 81       	ldd	r19, Y+4	; 0x04
    194a:	22 30       	cpi	r18, 0x02	; 2
    194c:	31 05       	cpc	r19, r1
    194e:	2c f4       	brge	.+10     	; 0x195a <GPIO_writePort+0x3e>
    1950:	8b 81       	ldd	r24, Y+3	; 0x03
    1952:	9c 81       	ldd	r25, Y+4	; 0x04
    1954:	00 97       	sbiw	r24, 0x00	; 0
    1956:	61 f0       	breq	.+24     	; 0x1970 <GPIO_writePort+0x54>
    1958:	1e c0       	rjmp	.+60     	; 0x1996 <GPIO_writePort+0x7a>
    195a:	2b 81       	ldd	r18, Y+3	; 0x03
    195c:	3c 81       	ldd	r19, Y+4	; 0x04
    195e:	22 30       	cpi	r18, 0x02	; 2
    1960:	31 05       	cpc	r19, r1
    1962:	81 f0       	breq	.+32     	; 0x1984 <GPIO_writePort+0x68>
    1964:	8b 81       	ldd	r24, Y+3	; 0x03
    1966:	9c 81       	ldd	r25, Y+4	; 0x04
    1968:	83 30       	cpi	r24, 0x03	; 3
    196a:	91 05       	cpc	r25, r1
    196c:	81 f0       	breq	.+32     	; 0x198e <GPIO_writePort+0x72>
    196e:	13 c0       	rjmp	.+38     	; 0x1996 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1970:	eb e3       	ldi	r30, 0x3B	; 59
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	8a 81       	ldd	r24, Y+2	; 0x02
    1976:	80 83       	st	Z, r24
    1978:	0e c0       	rjmp	.+28     	; 0x1996 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    197a:	e8 e3       	ldi	r30, 0x38	; 56
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	8a 81       	ldd	r24, Y+2	; 0x02
    1980:	80 83       	st	Z, r24
    1982:	09 c0       	rjmp	.+18     	; 0x1996 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1984:	e5 e3       	ldi	r30, 0x35	; 53
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	8a 81       	ldd	r24, Y+2	; 0x02
    198a:	80 83       	st	Z, r24
    198c:	04 c0       	rjmp	.+8      	; 0x1996 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    198e:	e2 e3       	ldi	r30, 0x32	; 50
    1990:	f0 e0       	ldi	r31, 0x00	; 0
    1992:	8a 81       	ldd	r24, Y+2	; 0x02
    1994:	80 83       	st	Z, r24
			break;
		}
	}
}
    1996:	0f 90       	pop	r0
    1998:	0f 90       	pop	r0
    199a:	0f 90       	pop	r0
    199c:	0f 90       	pop	r0
    199e:	cf 91       	pop	r28
    19a0:	df 91       	pop	r29
    19a2:	08 95       	ret

000019a4 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    19a4:	df 93       	push	r29
    19a6:	cf 93       	push	r28
    19a8:	00 d0       	rcall	.+0      	; 0x19aa <GPIO_readPort+0x6>
    19aa:	00 d0       	rcall	.+0      	; 0x19ac <GPIO_readPort+0x8>
    19ac:	cd b7       	in	r28, 0x3d	; 61
    19ae:	de b7       	in	r29, 0x3e	; 62
    19b0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    19b2:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	84 30       	cpi	r24, 0x04	; 4
    19b8:	90 f5       	brcc	.+100    	; 0x1a1e <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    19ba:	8a 81       	ldd	r24, Y+2	; 0x02
    19bc:	28 2f       	mov	r18, r24
    19be:	30 e0       	ldi	r19, 0x00	; 0
    19c0:	3c 83       	std	Y+4, r19	; 0x04
    19c2:	2b 83       	std	Y+3, r18	; 0x03
    19c4:	8b 81       	ldd	r24, Y+3	; 0x03
    19c6:	9c 81       	ldd	r25, Y+4	; 0x04
    19c8:	81 30       	cpi	r24, 0x01	; 1
    19ca:	91 05       	cpc	r25, r1
    19cc:	d1 f0       	breq	.+52     	; 0x1a02 <GPIO_readPort+0x5e>
    19ce:	2b 81       	ldd	r18, Y+3	; 0x03
    19d0:	3c 81       	ldd	r19, Y+4	; 0x04
    19d2:	22 30       	cpi	r18, 0x02	; 2
    19d4:	31 05       	cpc	r19, r1
    19d6:	2c f4       	brge	.+10     	; 0x19e2 <GPIO_readPort+0x3e>
    19d8:	8b 81       	ldd	r24, Y+3	; 0x03
    19da:	9c 81       	ldd	r25, Y+4	; 0x04
    19dc:	00 97       	sbiw	r24, 0x00	; 0
    19de:	61 f0       	breq	.+24     	; 0x19f8 <GPIO_readPort+0x54>
    19e0:	1e c0       	rjmp	.+60     	; 0x1a1e <GPIO_readPort+0x7a>
    19e2:	2b 81       	ldd	r18, Y+3	; 0x03
    19e4:	3c 81       	ldd	r19, Y+4	; 0x04
    19e6:	22 30       	cpi	r18, 0x02	; 2
    19e8:	31 05       	cpc	r19, r1
    19ea:	81 f0       	breq	.+32     	; 0x1a0c <GPIO_readPort+0x68>
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	9c 81       	ldd	r25, Y+4	; 0x04
    19f0:	83 30       	cpi	r24, 0x03	; 3
    19f2:	91 05       	cpc	r25, r1
    19f4:	81 f0       	breq	.+32     	; 0x1a16 <GPIO_readPort+0x72>
    19f6:	13 c0       	rjmp	.+38     	; 0x1a1e <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    19f8:	e9 e3       	ldi	r30, 0x39	; 57
    19fa:	f0 e0       	ldi	r31, 0x00	; 0
    19fc:	80 81       	ld	r24, Z
    19fe:	89 83       	std	Y+1, r24	; 0x01
    1a00:	0e c0       	rjmp	.+28     	; 0x1a1e <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1a02:	e6 e3       	ldi	r30, 0x36	; 54
    1a04:	f0 e0       	ldi	r31, 0x00	; 0
    1a06:	80 81       	ld	r24, Z
    1a08:	89 83       	std	Y+1, r24	; 0x01
    1a0a:	09 c0       	rjmp	.+18     	; 0x1a1e <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1a0c:	e3 e3       	ldi	r30, 0x33	; 51
    1a0e:	f0 e0       	ldi	r31, 0x00	; 0
    1a10:	80 81       	ld	r24, Z
    1a12:	89 83       	std	Y+1, r24	; 0x01
    1a14:	04 c0       	rjmp	.+8      	; 0x1a1e <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1a16:	e0 e3       	ldi	r30, 0x30	; 48
    1a18:	f0 e0       	ldi	r31, 0x00	; 0
    1a1a:	80 81       	ld	r24, Z
    1a1c:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1a1e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	0f 90       	pop	r0
    1a26:	0f 90       	pop	r0
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <__vector_6>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect)
{
    1a2e:	1f 92       	push	r1
    1a30:	0f 92       	push	r0
    1a32:	0f b6       	in	r0, 0x3f	; 63
    1a34:	0f 92       	push	r0
    1a36:	11 24       	eor	r1, r1
    1a38:	2f 93       	push	r18
    1a3a:	3f 93       	push	r19
    1a3c:	4f 93       	push	r20
    1a3e:	5f 93       	push	r21
    1a40:	6f 93       	push	r22
    1a42:	7f 93       	push	r23
    1a44:	8f 93       	push	r24
    1a46:	9f 93       	push	r25
    1a48:	af 93       	push	r26
    1a4a:	bf 93       	push	r27
    1a4c:	ef 93       	push	r30
    1a4e:	ff 93       	push	r31
    1a50:	df 93       	push	r29
    1a52:	cf 93       	push	r28
    1a54:	cd b7       	in	r28, 0x3d	; 61
    1a56:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    1a58:	80 91 8e 01 	lds	r24, 0x018E
    1a5c:	90 91 8f 01 	lds	r25, 0x018F
    1a60:	00 97       	sbiw	r24, 0x00	; 0
    1a62:	29 f0       	breq	.+10     	; 0x1a6e <__vector_6+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1a64:	e0 91 8e 01 	lds	r30, 0x018E
    1a68:	f0 91 8f 01 	lds	r31, 0x018F
    1a6c:	09 95       	icall
	}
}
    1a6e:	cf 91       	pop	r28
    1a70:	df 91       	pop	r29
    1a72:	ff 91       	pop	r31
    1a74:	ef 91       	pop	r30
    1a76:	bf 91       	pop	r27
    1a78:	af 91       	pop	r26
    1a7a:	9f 91       	pop	r25
    1a7c:	8f 91       	pop	r24
    1a7e:	7f 91       	pop	r23
    1a80:	6f 91       	pop	r22
    1a82:	5f 91       	pop	r21
    1a84:	4f 91       	pop	r20
    1a86:	3f 91       	pop	r19
    1a88:	2f 91       	pop	r18
    1a8a:	0f 90       	pop	r0
    1a8c:	0f be       	out	0x3f, r0	; 63
    1a8e:	0f 90       	pop	r0
    1a90:	1f 90       	pop	r1
    1a92:	18 95       	reti

00001a94 <ICU_init>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void ICU_init(const ICU_ConfigType * Config_Ptr)
{
    1a94:	df 93       	push	r29
    1a96:	cf 93       	push	r28
    1a98:	00 d0       	rcall	.+0      	; 0x1a9a <ICU_init+0x6>
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	9a 83       	std	Y+2, r25	; 0x02
    1aa0:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DDRD &= ~(1<<PD6);
    1aa2:	a1 e3       	ldi	r26, 0x31	; 49
    1aa4:	b0 e0       	ldi	r27, 0x00	; 0
    1aa6:	e1 e3       	ldi	r30, 0x31	; 49
    1aa8:	f0 e0       	ldi	r31, 0x00	; 0
    1aaa:	80 81       	ld	r24, Z
    1aac:	8f 7b       	andi	r24, 0xBF	; 191
    1aae:	8c 93       	st	X, r24

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    1ab0:	ef e4       	ldi	r30, 0x4F	; 79
    1ab2:	f0 e0       	ldi	r31, 0x00	; 0
    1ab4:	8c e0       	ldi	r24, 0x0C	; 12
    1ab6:	80 83       	st	Z, r24

	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1ab8:	ae e4       	ldi	r26, 0x4E	; 78
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	ee e4       	ldi	r30, 0x4E	; 78
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	98 2f       	mov	r25, r24
    1ac4:	98 7f       	andi	r25, 0xF8	; 248
    1ac6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ac8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aca:	80 81       	ld	r24, Z
    1acc:	89 2b       	or	r24, r25
    1ace:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    1ad0:	ae e4       	ldi	r26, 0x4E	; 78
    1ad2:	b0 e0       	ldi	r27, 0x00	; 0
    1ad4:	ee e4       	ldi	r30, 0x4E	; 78
    1ad6:	f0 e0       	ldi	r31, 0x00	; 0
    1ad8:	80 81       	ld	r24, Z
    1ada:	28 2f       	mov	r18, r24
    1adc:	2f 7b       	andi	r18, 0xBF	; 191
    1ade:	e9 81       	ldd	r30, Y+1	; 0x01
    1ae0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ae2:	81 81       	ldd	r24, Z+1	; 0x01
    1ae4:	88 2f       	mov	r24, r24
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	00 24       	eor	r0, r0
    1aea:	96 95       	lsr	r25
    1aec:	87 95       	ror	r24
    1aee:	07 94       	ror	r0
    1af0:	96 95       	lsr	r25
    1af2:	87 95       	ror	r24
    1af4:	07 94       	ror	r0
    1af6:	98 2f       	mov	r25, r24
    1af8:	80 2d       	mov	r24, r0
    1afa:	82 2b       	or	r24, r18
    1afc:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    1afe:	ec e4       	ldi	r30, 0x4C	; 76
    1b00:	f0 e0       	ldi	r31, 0x00	; 0
    1b02:	11 82       	std	Z+1, r1	; 0x01
    1b04:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    1b06:	e6 e4       	ldi	r30, 0x46	; 70
    1b08:	f0 e0       	ldi	r31, 0x00	; 0
    1b0a:	11 82       	std	Z+1, r1	; 0x01
    1b0c:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    1b0e:	a9 e5       	ldi	r26, 0x59	; 89
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	e9 e5       	ldi	r30, 0x59	; 89
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	80 62       	ori	r24, 0x20	; 32
    1b1a:	8c 93       	st	X, r24
}
    1b1c:	0f 90       	pop	r0
    1b1e:	0f 90       	pop	r0
    1b20:	cf 91       	pop	r28
    1b22:	df 91       	pop	r29
    1b24:	08 95       	ret

00001b26 <ICU_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void ICU_setCallBack(void(*a_ptr)(void))
{
    1b26:	df 93       	push	r29
    1b28:	cf 93       	push	r28
    1b2a:	00 d0       	rcall	.+0      	; 0x1b2c <ICU_setCallBack+0x6>
    1b2c:	cd b7       	in	r28, 0x3d	; 61
    1b2e:	de b7       	in	r29, 0x3e	; 62
    1b30:	9a 83       	std	Y+2, r25	; 0x02
    1b32:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    1b34:	89 81       	ldd	r24, Y+1	; 0x01
    1b36:	9a 81       	ldd	r25, Y+2	; 0x02
    1b38:	90 93 8f 01 	sts	0x018F, r25
    1b3c:	80 93 8e 01 	sts	0x018E, r24
}
    1b40:	0f 90       	pop	r0
    1b42:	0f 90       	pop	r0
    1b44:	cf 91       	pop	r28
    1b46:	df 91       	pop	r29
    1b48:	08 95       	ret

00001b4a <ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void ICU_setEdgeDetectionType(const ICU_EdgeType a_edgeType)
{
    1b4a:	df 93       	push	r29
    1b4c:	cf 93       	push	r28
    1b4e:	0f 92       	push	r0
    1b50:	cd b7       	in	r28, 0x3d	; 61
    1b52:	de b7       	in	r29, 0x3e	; 62
    1b54:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1b56:	ae e4       	ldi	r26, 0x4E	; 78
    1b58:	b0 e0       	ldi	r27, 0x00	; 0
    1b5a:	ee e4       	ldi	r30, 0x4E	; 78
    1b5c:	f0 e0       	ldi	r31, 0x00	; 0
    1b5e:	80 81       	ld	r24, Z
    1b60:	28 2f       	mov	r18, r24
    1b62:	2f 7b       	andi	r18, 0xBF	; 191
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
    1b66:	88 2f       	mov	r24, r24
    1b68:	90 e0       	ldi	r25, 0x00	; 0
    1b6a:	00 24       	eor	r0, r0
    1b6c:	96 95       	lsr	r25
    1b6e:	87 95       	ror	r24
    1b70:	07 94       	ror	r0
    1b72:	96 95       	lsr	r25
    1b74:	87 95       	ror	r24
    1b76:	07 94       	ror	r0
    1b78:	98 2f       	mov	r25, r24
    1b7a:	80 2d       	mov	r24, r0
    1b7c:	82 2b       	or	r24, r18
    1b7e:	8c 93       	st	X, r24
}
    1b80:	0f 90       	pop	r0
    1b82:	cf 91       	pop	r28
    1b84:	df 91       	pop	r29
    1b86:	08 95       	ret

00001b88 <ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 ICU_getInputCaptureValue(void)
{
    1b88:	df 93       	push	r29
    1b8a:	cf 93       	push	r28
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    1b90:	e6 e4       	ldi	r30, 0x46	; 70
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	91 81       	ldd	r25, Z+1	; 0x01
}
    1b98:	cf 91       	pop	r28
    1b9a:	df 91       	pop	r29
    1b9c:	08 95       	ret

00001b9e <ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void ICU_clearTimerValue(void)
{
    1b9e:	df 93       	push	r29
    1ba0:	cf 93       	push	r28
    1ba2:	cd b7       	in	r28, 0x3d	; 61
    1ba4:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1ba6:	ec e4       	ldi	r30, 0x4C	; 76
    1ba8:	f0 e0       	ldi	r31, 0x00	; 0
    1baa:	11 82       	std	Z+1, r1	; 0x01
    1bac:	10 82       	st	Z, r1
}
    1bae:	cf 91       	pop	r28
    1bb0:	df 91       	pop	r29
    1bb2:	08 95       	ret

00001bb4 <ICU_deInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void ICU_deInit(void)
{
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1/ICU Registers */
	TCCR1A = 0;
    1bbc:	ef e4       	ldi	r30, 0x4F	; 79
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	10 82       	st	Z, r1
	TCCR1B = 0;
    1bc2:	ee e4       	ldi	r30, 0x4E	; 78
    1bc4:	f0 e0       	ldi	r31, 0x00	; 0
    1bc6:	10 82       	st	Z, r1
	TCNT1 = 0;
    1bc8:	ec e4       	ldi	r30, 0x4C	; 76
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	11 82       	std	Z+1, r1	; 0x01
    1bce:	10 82       	st	Z, r1
	ICR1 = 0;
    1bd0:	e6 e4       	ldi	r30, 0x46	; 70
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	11 82       	std	Z+1, r1	; 0x01
    1bd6:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<TICIE1);
    1bd8:	a9 e5       	ldi	r26, 0x59	; 89
    1bda:	b0 e0       	ldi	r27, 0x00	; 0
    1bdc:	e9 e5       	ldi	r30, 0x59	; 89
    1bde:	f0 e0       	ldi	r31, 0x00	; 0
    1be0:	80 81       	ld	r24, Z
    1be2:	8f 7d       	andi	r24, 0xDF	; 223
    1be4:	8c 93       	st	X, r24

	/* Reset the global pointer value */
	g_callBackPtr = NULL_PTR;
    1be6:	10 92 8f 01 	sts	0x018F, r1
    1bea:	10 92 8e 01 	sts	0x018E, r1
}
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	2e 97       	sbiw	r28, 0x0e	; 14
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	61 e0       	ldi	r22, 0x01	; 1
    1c0c:	41 e0       	ldi	r20, 0x01	; 1
    1c0e:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1c12:	80 e0       	ldi	r24, 0x00	; 0
    1c14:	62 e0       	ldi	r22, 0x02	; 2
    1c16:	41 e0       	ldi	r20, 0x01	; 1
    1c18:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>
    1c1c:	80 e0       	ldi	r24, 0x00	; 0
    1c1e:	90 e0       	ldi	r25, 0x00	; 0
    1c20:	a0 ea       	ldi	r26, 0xA0	; 160
    1c22:	b1 e4       	ldi	r27, 0x41	; 65
    1c24:	8b 87       	std	Y+11, r24	; 0x0b
    1c26:	9c 87       	std	Y+12, r25	; 0x0c
    1c28:	ad 87       	std	Y+13, r26	; 0x0d
    1c2a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c2c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c2e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c30:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c32:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c34:	20 e0       	ldi	r18, 0x00	; 0
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	4a e7       	ldi	r20, 0x7A	; 122
    1c3a:	55 e4       	ldi	r21, 0x45	; 69
    1c3c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c40:	dc 01       	movw	r26, r24
    1c42:	cb 01       	movw	r24, r22
    1c44:	8f 83       	std	Y+7, r24	; 0x07
    1c46:	98 87       	std	Y+8, r25	; 0x08
    1c48:	a9 87       	std	Y+9, r26	; 0x09
    1c4a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c4c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c4e:	78 85       	ldd	r23, Y+8	; 0x08
    1c50:	89 85       	ldd	r24, Y+9	; 0x09
    1c52:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c54:	20 e0       	ldi	r18, 0x00	; 0
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	40 e8       	ldi	r20, 0x80	; 128
    1c5a:	5f e3       	ldi	r21, 0x3F	; 63
    1c5c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1c60:	88 23       	and	r24, r24
    1c62:	2c f4       	brge	.+10     	; 0x1c6e <LCD_init+0x7a>
		__ticks = 1;
    1c64:	81 e0       	ldi	r24, 0x01	; 1
    1c66:	90 e0       	ldi	r25, 0x00	; 0
    1c68:	9e 83       	std	Y+6, r25	; 0x06
    1c6a:	8d 83       	std	Y+5, r24	; 0x05
    1c6c:	3f c0       	rjmp	.+126    	; 0x1cec <LCD_init+0xf8>
	else if (__tmp > 65535)
    1c6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1c70:	78 85       	ldd	r23, Y+8	; 0x08
    1c72:	89 85       	ldd	r24, Y+9	; 0x09
    1c74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c76:	20 e0       	ldi	r18, 0x00	; 0
    1c78:	3f ef       	ldi	r19, 0xFF	; 255
    1c7a:	4f e7       	ldi	r20, 0x7F	; 127
    1c7c:	57 e4       	ldi	r21, 0x47	; 71
    1c7e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1c82:	18 16       	cp	r1, r24
    1c84:	4c f5       	brge	.+82     	; 0x1cd8 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c86:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c88:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c8a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c8c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c8e:	20 e0       	ldi	r18, 0x00	; 0
    1c90:	30 e0       	ldi	r19, 0x00	; 0
    1c92:	40 e2       	ldi	r20, 0x20	; 32
    1c94:	51 e4       	ldi	r21, 0x41	; 65
    1c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c9a:	dc 01       	movw	r26, r24
    1c9c:	cb 01       	movw	r24, r22
    1c9e:	bc 01       	movw	r22, r24
    1ca0:	cd 01       	movw	r24, r26
    1ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ca6:	dc 01       	movw	r26, r24
    1ca8:	cb 01       	movw	r24, r22
    1caa:	9e 83       	std	Y+6, r25	; 0x06
    1cac:	8d 83       	std	Y+5, r24	; 0x05
    1cae:	0f c0       	rjmp	.+30     	; 0x1cce <LCD_init+0xda>
    1cb0:	80 e9       	ldi	r24, 0x90	; 144
    1cb2:	91 e0       	ldi	r25, 0x01	; 1
    1cb4:	9c 83       	std	Y+4, r25	; 0x04
    1cb6:	8b 83       	std	Y+3, r24	; 0x03
    1cb8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cba:	9c 81       	ldd	r25, Y+4	; 0x04
    1cbc:	01 97       	sbiw	r24, 0x01	; 1
    1cbe:	f1 f7       	brne	.-4      	; 0x1cbc <LCD_init+0xc8>
    1cc0:	9c 83       	std	Y+4, r25	; 0x04
    1cc2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1cc4:	8d 81       	ldd	r24, Y+5	; 0x05
    1cc6:	9e 81       	ldd	r25, Y+6	; 0x06
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	9e 83       	std	Y+6, r25	; 0x06
    1ccc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cce:	8d 81       	ldd	r24, Y+5	; 0x05
    1cd0:	9e 81       	ldd	r25, Y+6	; 0x06
    1cd2:	00 97       	sbiw	r24, 0x00	; 0
    1cd4:	69 f7       	brne	.-38     	; 0x1cb0 <LCD_init+0xbc>
    1cd6:	14 c0       	rjmp	.+40     	; 0x1d00 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1cda:	78 85       	ldd	r23, Y+8	; 0x08
    1cdc:	89 85       	ldd	r24, Y+9	; 0x09
    1cde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	9e 83       	std	Y+6, r25	; 0x06
    1cea:	8d 83       	std	Y+5, r24	; 0x05
    1cec:	8d 81       	ldd	r24, Y+5	; 0x05
    1cee:	9e 81       	ldd	r25, Y+6	; 0x06
    1cf0:	9a 83       	std	Y+2, r25	; 0x02
    1cf2:	89 83       	std	Y+1, r24	; 0x01
    1cf4:	89 81       	ldd	r24, Y+1	; 0x01
    1cf6:	9a 81       	ldd	r25, Y+2	; 0x02
    1cf8:	01 97       	sbiw	r24, 0x01	; 1
    1cfa:	f1 f7       	brne	.-4      	; 0x1cf8 <LCD_init+0x104>
    1cfc:	9a 83       	std	Y+2, r25	; 0x02
    1cfe:	89 83       	std	Y+1, r24	; 0x01

	_delay_ms(20);		/* LCD Power ON delay always > 15ms */

#if(LCD_DATA_BITS_MODE == 4)
	/* Configure 4 pins in the data port as output pins */
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,PIN_OUTPUT);
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	63 e0       	ldi	r22, 0x03	; 3
    1d04:	41 e0       	ldi	r20, 0x01	; 1
    1d06:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,PIN_OUTPUT);
    1d0a:	80 e0       	ldi	r24, 0x00	; 0
    1d0c:	64 e0       	ldi	r22, 0x04	; 4
    1d0e:	41 e0       	ldi	r20, 0x01	; 1
    1d10:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,PIN_OUTPUT);
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	65 e0       	ldi	r22, 0x05	; 5
    1d18:	41 e0       	ldi	r20, 0x01	; 1
    1d1a:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,PIN_OUTPUT);
    1d1e:	80 e0       	ldi	r24, 0x00	; 0
    1d20:	66 e0       	ldi	r22, 0x06	; 6
    1d22:	41 e0       	ldi	r20, 0x01	; 1
    1d24:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>

	/* Send for 4 bit initialization of LCD  */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1);
    1d28:	83 e3       	ldi	r24, 0x33	; 51
    1d2a:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_sendCommand>
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    1d2e:	82 e3       	ldi	r24, 0x32	; 50
    1d30:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_sendCommand>

	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);
    1d34:	88 e2       	ldi	r24, 0x28	; 40
    1d36:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_sendCommand>
	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1d3a:	8c e0       	ldi	r24, 0x0C	; 12
    1d3c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1d40:	81 e0       	ldi	r24, 0x01	; 1
    1d42:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_sendCommand>
}
    1d46:	2e 96       	adiw	r28, 0x0e	; 14
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
    1d52:	cf 91       	pop	r28
    1d54:	df 91       	pop	r29
    1d56:	08 95       	ret

00001d58 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1d58:	0f 93       	push	r16
    1d5a:	1f 93       	push	r17
    1d5c:	df 93       	push	r29
    1d5e:	cf 93       	push	r28
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	c3 56       	subi	r28, 0x63	; 99
    1d66:	d0 40       	sbci	r29, 0x00	; 0
    1d68:	0f b6       	in	r0, 0x3f	; 63
    1d6a:	f8 94       	cli
    1d6c:	de bf       	out	0x3e, r29	; 62
    1d6e:	0f be       	out	0x3f, r0	; 63
    1d70:	cd bf       	out	0x3d, r28	; 61
    1d72:	fe 01       	movw	r30, r28
    1d74:	ed 59       	subi	r30, 0x9D	; 157
    1d76:	ff 4f       	sbci	r31, 0xFF	; 255
    1d78:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1d7a:	80 e0       	ldi	r24, 0x00	; 0
    1d7c:	61 e0       	ldi	r22, 0x01	; 1
    1d7e:	40 e0       	ldi	r20, 0x00	; 0
    1d80:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    1d84:	fe 01       	movw	r30, r28
    1d86:	e1 5a       	subi	r30, 0xA1	; 161
    1d88:	ff 4f       	sbci	r31, 0xFF	; 255
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	a0 e8       	ldi	r26, 0x80	; 128
    1d90:	bf e3       	ldi	r27, 0x3F	; 63
    1d92:	80 83       	st	Z, r24
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	a2 83       	std	Z+2, r26	; 0x02
    1d98:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d9a:	8e 01       	movw	r16, r28
    1d9c:	05 5a       	subi	r16, 0xA5	; 165
    1d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1da0:	fe 01       	movw	r30, r28
    1da2:	e1 5a       	subi	r30, 0xA1	; 161
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	60 81       	ld	r22, Z
    1da8:	71 81       	ldd	r23, Z+1	; 0x01
    1daa:	82 81       	ldd	r24, Z+2	; 0x02
    1dac:	93 81       	ldd	r25, Z+3	; 0x03
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	4a e7       	ldi	r20, 0x7A	; 122
    1db4:	55 e4       	ldi	r21, 0x45	; 69
    1db6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	f8 01       	movw	r30, r16
    1dc0:	80 83       	st	Z, r24
    1dc2:	91 83       	std	Z+1, r25	; 0x01
    1dc4:	a2 83       	std	Z+2, r26	; 0x02
    1dc6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1dc8:	fe 01       	movw	r30, r28
    1dca:	e5 5a       	subi	r30, 0xA5	; 165
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	60 81       	ld	r22, Z
    1dd0:	71 81       	ldd	r23, Z+1	; 0x01
    1dd2:	82 81       	ldd	r24, Z+2	; 0x02
    1dd4:	93 81       	ldd	r25, Z+3	; 0x03
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	40 e8       	ldi	r20, 0x80	; 128
    1ddc:	5f e3       	ldi	r21, 0x3F	; 63
    1dde:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1de2:	88 23       	and	r24, r24
    1de4:	44 f4       	brge	.+16     	; 0x1df6 <LCD_sendCommand+0x9e>
		__ticks = 1;
    1de6:	fe 01       	movw	r30, r28
    1de8:	e7 5a       	subi	r30, 0xA7	; 167
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	81 e0       	ldi	r24, 0x01	; 1
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	91 83       	std	Z+1, r25	; 0x01
    1df2:	80 83       	st	Z, r24
    1df4:	64 c0       	rjmp	.+200    	; 0x1ebe <LCD_sendCommand+0x166>
	else if (__tmp > 65535)
    1df6:	fe 01       	movw	r30, r28
    1df8:	e5 5a       	subi	r30, 0xA5	; 165
    1dfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfc:	60 81       	ld	r22, Z
    1dfe:	71 81       	ldd	r23, Z+1	; 0x01
    1e00:	82 81       	ldd	r24, Z+2	; 0x02
    1e02:	93 81       	ldd	r25, Z+3	; 0x03
    1e04:	20 e0       	ldi	r18, 0x00	; 0
    1e06:	3f ef       	ldi	r19, 0xFF	; 255
    1e08:	4f e7       	ldi	r20, 0x7F	; 127
    1e0a:	57 e4       	ldi	r21, 0x47	; 71
    1e0c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1e10:	18 16       	cp	r1, r24
    1e12:	0c f0       	brlt	.+2      	; 0x1e16 <LCD_sendCommand+0xbe>
    1e14:	43 c0       	rjmp	.+134    	; 0x1e9c <LCD_sendCommand+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e16:	fe 01       	movw	r30, r28
    1e18:	e1 5a       	subi	r30, 0xA1	; 161
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	60 81       	ld	r22, Z
    1e1e:	71 81       	ldd	r23, Z+1	; 0x01
    1e20:	82 81       	ldd	r24, Z+2	; 0x02
    1e22:	93 81       	ldd	r25, Z+3	; 0x03
    1e24:	20 e0       	ldi	r18, 0x00	; 0
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	40 e2       	ldi	r20, 0x20	; 32
    1e2a:	51 e4       	ldi	r21, 0x41	; 65
    1e2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e30:	dc 01       	movw	r26, r24
    1e32:	cb 01       	movw	r24, r22
    1e34:	8e 01       	movw	r16, r28
    1e36:	07 5a       	subi	r16, 0xA7	; 167
    1e38:	1f 4f       	sbci	r17, 0xFF	; 255
    1e3a:	bc 01       	movw	r22, r24
    1e3c:	cd 01       	movw	r24, r26
    1e3e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e42:	dc 01       	movw	r26, r24
    1e44:	cb 01       	movw	r24, r22
    1e46:	f8 01       	movw	r30, r16
    1e48:	91 83       	std	Z+1, r25	; 0x01
    1e4a:	80 83       	st	Z, r24
    1e4c:	1f c0       	rjmp	.+62     	; 0x1e8c <LCD_sendCommand+0x134>
    1e4e:	fe 01       	movw	r30, r28
    1e50:	e9 5a       	subi	r30, 0xA9	; 169
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	80 e9       	ldi	r24, 0x90	; 144
    1e56:	91 e0       	ldi	r25, 0x01	; 1
    1e58:	91 83       	std	Z+1, r25	; 0x01
    1e5a:	80 83       	st	Z, r24
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	e9 5a       	subi	r30, 0xA9	; 169
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 81       	ld	r24, Z
    1e64:	91 81       	ldd	r25, Z+1	; 0x01
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <LCD_sendCommand+0x10e>
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	e9 5a       	subi	r30, 0xA9	; 169
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e74:	de 01       	movw	r26, r28
    1e76:	a7 5a       	subi	r26, 0xA7	; 167
    1e78:	bf 4f       	sbci	r27, 0xFF	; 255
    1e7a:	fe 01       	movw	r30, r28
    1e7c:	e7 5a       	subi	r30, 0xA7	; 167
    1e7e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e80:	80 81       	ld	r24, Z
    1e82:	91 81       	ldd	r25, Z+1	; 0x01
    1e84:	01 97       	sbiw	r24, 0x01	; 1
    1e86:	11 96       	adiw	r26, 0x01	; 1
    1e88:	9c 93       	st	X, r25
    1e8a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e8c:	fe 01       	movw	r30, r28
    1e8e:	e7 5a       	subi	r30, 0xA7	; 167
    1e90:	ff 4f       	sbci	r31, 0xFF	; 255
    1e92:	80 81       	ld	r24, Z
    1e94:	91 81       	ldd	r25, Z+1	; 0x01
    1e96:	00 97       	sbiw	r24, 0x00	; 0
    1e98:	d1 f6       	brne	.-76     	; 0x1e4e <LCD_sendCommand+0xf6>
    1e9a:	27 c0       	rjmp	.+78     	; 0x1eea <LCD_sendCommand+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e9c:	8e 01       	movw	r16, r28
    1e9e:	07 5a       	subi	r16, 0xA7	; 167
    1ea0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ea2:	fe 01       	movw	r30, r28
    1ea4:	e5 5a       	subi	r30, 0xA5	; 165
    1ea6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea8:	60 81       	ld	r22, Z
    1eaa:	71 81       	ldd	r23, Z+1	; 0x01
    1eac:	82 81       	ldd	r24, Z+2	; 0x02
    1eae:	93 81       	ldd	r25, Z+3	; 0x03
    1eb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	f8 01       	movw	r30, r16
    1eba:	91 83       	std	Z+1, r25	; 0x01
    1ebc:	80 83       	st	Z, r24
    1ebe:	de 01       	movw	r26, r28
    1ec0:	ab 5a       	subi	r26, 0xAB	; 171
    1ec2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ec4:	fe 01       	movw	r30, r28
    1ec6:	e7 5a       	subi	r30, 0xA7	; 167
    1ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eca:	80 81       	ld	r24, Z
    1ecc:	91 81       	ldd	r25, Z+1	; 0x01
    1ece:	8d 93       	st	X+, r24
    1ed0:	9c 93       	st	X, r25
    1ed2:	fe 01       	movw	r30, r28
    1ed4:	eb 5a       	subi	r30, 0xAB	; 171
    1ed6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed8:	80 81       	ld	r24, Z
    1eda:	91 81       	ldd	r25, Z+1	; 0x01
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <LCD_sendCommand+0x184>
    1ee0:	fe 01       	movw	r30, r28
    1ee2:	eb 5a       	subi	r30, 0xAB	; 171
    1ee4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ee6:	91 83       	std	Z+1, r25	; 0x01
    1ee8:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1eea:	80 e0       	ldi	r24, 0x00	; 0
    1eec:	62 e0       	ldi	r22, 0x02	; 2
    1eee:	41 e0       	ldi	r20, 0x01	; 1
    1ef0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	ef 5a       	subi	r30, 0xAF	; 175
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	80 e0       	ldi	r24, 0x00	; 0
    1efc:	90 e0       	ldi	r25, 0x00	; 0
    1efe:	a0 e8       	ldi	r26, 0x80	; 128
    1f00:	bf e3       	ldi	r27, 0x3F	; 63
    1f02:	80 83       	st	Z, r24
    1f04:	91 83       	std	Z+1, r25	; 0x01
    1f06:	a2 83       	std	Z+2, r26	; 0x02
    1f08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f0a:	8e 01       	movw	r16, r28
    1f0c:	03 5b       	subi	r16, 0xB3	; 179
    1f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    1f10:	fe 01       	movw	r30, r28
    1f12:	ef 5a       	subi	r30, 0xAF	; 175
    1f14:	ff 4f       	sbci	r31, 0xFF	; 255
    1f16:	60 81       	ld	r22, Z
    1f18:	71 81       	ldd	r23, Z+1	; 0x01
    1f1a:	82 81       	ldd	r24, Z+2	; 0x02
    1f1c:	93 81       	ldd	r25, Z+3	; 0x03
    1f1e:	20 e0       	ldi	r18, 0x00	; 0
    1f20:	30 e0       	ldi	r19, 0x00	; 0
    1f22:	4a e7       	ldi	r20, 0x7A	; 122
    1f24:	55 e4       	ldi	r21, 0x45	; 69
    1f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f2a:	dc 01       	movw	r26, r24
    1f2c:	cb 01       	movw	r24, r22
    1f2e:	f8 01       	movw	r30, r16
    1f30:	80 83       	st	Z, r24
    1f32:	91 83       	std	Z+1, r25	; 0x01
    1f34:	a2 83       	std	Z+2, r26	; 0x02
    1f36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f38:	fe 01       	movw	r30, r28
    1f3a:	e3 5b       	subi	r30, 0xB3	; 179
    1f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f3e:	60 81       	ld	r22, Z
    1f40:	71 81       	ldd	r23, Z+1	; 0x01
    1f42:	82 81       	ldd	r24, Z+2	; 0x02
    1f44:	93 81       	ldd	r25, Z+3	; 0x03
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e8       	ldi	r20, 0x80	; 128
    1f4c:	5f e3       	ldi	r21, 0x3F	; 63
    1f4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f52:	88 23       	and	r24, r24
    1f54:	44 f4       	brge	.+16     	; 0x1f66 <LCD_sendCommand+0x20e>
		__ticks = 1;
    1f56:	fe 01       	movw	r30, r28
    1f58:	e5 5b       	subi	r30, 0xB5	; 181
    1f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f5c:	81 e0       	ldi	r24, 0x01	; 1
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	91 83       	std	Z+1, r25	; 0x01
    1f62:	80 83       	st	Z, r24
    1f64:	64 c0       	rjmp	.+200    	; 0x202e <LCD_sendCommand+0x2d6>
	else if (__tmp > 65535)
    1f66:	fe 01       	movw	r30, r28
    1f68:	e3 5b       	subi	r30, 0xB3	; 179
    1f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6c:	60 81       	ld	r22, Z
    1f6e:	71 81       	ldd	r23, Z+1	; 0x01
    1f70:	82 81       	ldd	r24, Z+2	; 0x02
    1f72:	93 81       	ldd	r25, Z+3	; 0x03
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	3f ef       	ldi	r19, 0xFF	; 255
    1f78:	4f e7       	ldi	r20, 0x7F	; 127
    1f7a:	57 e4       	ldi	r21, 0x47	; 71
    1f7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f80:	18 16       	cp	r1, r24
    1f82:	0c f0       	brlt	.+2      	; 0x1f86 <LCD_sendCommand+0x22e>
    1f84:	43 c0       	rjmp	.+134    	; 0x200c <LCD_sendCommand+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f86:	fe 01       	movw	r30, r28
    1f88:	ef 5a       	subi	r30, 0xAF	; 175
    1f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1f8c:	60 81       	ld	r22, Z
    1f8e:	71 81       	ldd	r23, Z+1	; 0x01
    1f90:	82 81       	ldd	r24, Z+2	; 0x02
    1f92:	93 81       	ldd	r25, Z+3	; 0x03
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e2       	ldi	r20, 0x20	; 32
    1f9a:	51 e4       	ldi	r21, 0x41	; 65
    1f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fa0:	dc 01       	movw	r26, r24
    1fa2:	cb 01       	movw	r24, r22
    1fa4:	8e 01       	movw	r16, r28
    1fa6:	05 5b       	subi	r16, 0xB5	; 181
    1fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    1faa:	bc 01       	movw	r22, r24
    1fac:	cd 01       	movw	r24, r26
    1fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	f8 01       	movw	r30, r16
    1fb8:	91 83       	std	Z+1, r25	; 0x01
    1fba:	80 83       	st	Z, r24
    1fbc:	1f c0       	rjmp	.+62     	; 0x1ffc <LCD_sendCommand+0x2a4>
    1fbe:	fe 01       	movw	r30, r28
    1fc0:	e7 5b       	subi	r30, 0xB7	; 183
    1fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc4:	80 e9       	ldi	r24, 0x90	; 144
    1fc6:	91 e0       	ldi	r25, 0x01	; 1
    1fc8:	91 83       	std	Z+1, r25	; 0x01
    1fca:	80 83       	st	Z, r24
    1fcc:	fe 01       	movw	r30, r28
    1fce:	e7 5b       	subi	r30, 0xB7	; 183
    1fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd2:	80 81       	ld	r24, Z
    1fd4:	91 81       	ldd	r25, Z+1	; 0x01
    1fd6:	01 97       	sbiw	r24, 0x01	; 1
    1fd8:	f1 f7       	brne	.-4      	; 0x1fd6 <LCD_sendCommand+0x27e>
    1fda:	fe 01       	movw	r30, r28
    1fdc:	e7 5b       	subi	r30, 0xB7	; 183
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	91 83       	std	Z+1, r25	; 0x01
    1fe2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fe4:	de 01       	movw	r26, r28
    1fe6:	a5 5b       	subi	r26, 0xB5	; 181
    1fe8:	bf 4f       	sbci	r27, 0xFF	; 255
    1fea:	fe 01       	movw	r30, r28
    1fec:	e5 5b       	subi	r30, 0xB5	; 181
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	80 81       	ld	r24, Z
    1ff2:	91 81       	ldd	r25, Z+1	; 0x01
    1ff4:	01 97       	sbiw	r24, 0x01	; 1
    1ff6:	11 96       	adiw	r26, 0x01	; 1
    1ff8:	9c 93       	st	X, r25
    1ffa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ffc:	fe 01       	movw	r30, r28
    1ffe:	e5 5b       	subi	r30, 0xB5	; 181
    2000:	ff 4f       	sbci	r31, 0xFF	; 255
    2002:	80 81       	ld	r24, Z
    2004:	91 81       	ldd	r25, Z+1	; 0x01
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	d1 f6       	brne	.-76     	; 0x1fbe <LCD_sendCommand+0x266>
    200a:	27 c0       	rjmp	.+78     	; 0x205a <LCD_sendCommand+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    200c:	8e 01       	movw	r16, r28
    200e:	05 5b       	subi	r16, 0xB5	; 181
    2010:	1f 4f       	sbci	r17, 0xFF	; 255
    2012:	fe 01       	movw	r30, r28
    2014:	e3 5b       	subi	r30, 0xB3	; 179
    2016:	ff 4f       	sbci	r31, 0xFF	; 255
    2018:	60 81       	ld	r22, Z
    201a:	71 81       	ldd	r23, Z+1	; 0x01
    201c:	82 81       	ldd	r24, Z+2	; 0x02
    201e:	93 81       	ldd	r25, Z+3	; 0x03
    2020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	f8 01       	movw	r30, r16
    202a:	91 83       	std	Z+1, r25	; 0x01
    202c:	80 83       	st	Z, r24
    202e:	de 01       	movw	r26, r28
    2030:	a9 5b       	subi	r26, 0xB9	; 185
    2032:	bf 4f       	sbci	r27, 0xFF	; 255
    2034:	fe 01       	movw	r30, r28
    2036:	e5 5b       	subi	r30, 0xB5	; 181
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
    203a:	80 81       	ld	r24, Z
    203c:	91 81       	ldd	r25, Z+1	; 0x01
    203e:	8d 93       	st	X+, r24
    2040:	9c 93       	st	X, r25
    2042:	fe 01       	movw	r30, r28
    2044:	e9 5b       	subi	r30, 0xB9	; 185
    2046:	ff 4f       	sbci	r31, 0xFF	; 255
    2048:	80 81       	ld	r24, Z
    204a:	91 81       	ldd	r25, Z+1	; 0x01
    204c:	01 97       	sbiw	r24, 0x01	; 1
    204e:	f1 f7       	brne	.-4      	; 0x204c <LCD_sendCommand+0x2f4>
    2050:	fe 01       	movw	r30, r28
    2052:	e9 5b       	subi	r30, 0xB9	; 185
    2054:	ff 4f       	sbci	r31, 0xFF	; 255
    2056:	91 83       	std	Z+1, r25	; 0x01
    2058:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,4));
    205a:	fe 01       	movw	r30, r28
    205c:	ed 59       	subi	r30, 0x9D	; 157
    205e:	ff 4f       	sbci	r31, 0xFF	; 255
    2060:	80 81       	ld	r24, Z
    2062:	88 2f       	mov	r24, r24
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	80 71       	andi	r24, 0x10	; 16
    2068:	90 70       	andi	r25, 0x00	; 0
    206a:	95 95       	asr	r25
    206c:	87 95       	ror	r24
    206e:	95 95       	asr	r25
    2070:	87 95       	ror	r24
    2072:	95 95       	asr	r25
    2074:	87 95       	ror	r24
    2076:	95 95       	asr	r25
    2078:	87 95       	ror	r24
    207a:	98 2f       	mov	r25, r24
    207c:	80 e0       	ldi	r24, 0x00	; 0
    207e:	63 e0       	ldi	r22, 0x03	; 3
    2080:	49 2f       	mov	r20, r25
    2082:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,5));
    2086:	fe 01       	movw	r30, r28
    2088:	ed 59       	subi	r30, 0x9D	; 157
    208a:	ff 4f       	sbci	r31, 0xFF	; 255
    208c:	80 81       	ld	r24, Z
    208e:	88 2f       	mov	r24, r24
    2090:	90 e0       	ldi	r25, 0x00	; 0
    2092:	80 72       	andi	r24, 0x20	; 32
    2094:	90 70       	andi	r25, 0x00	; 0
    2096:	95 95       	asr	r25
    2098:	87 95       	ror	r24
    209a:	95 95       	asr	r25
    209c:	87 95       	ror	r24
    209e:	95 95       	asr	r25
    20a0:	87 95       	ror	r24
    20a2:	95 95       	asr	r25
    20a4:	87 95       	ror	r24
    20a6:	95 95       	asr	r25
    20a8:	87 95       	ror	r24
    20aa:	98 2f       	mov	r25, r24
    20ac:	80 e0       	ldi	r24, 0x00	; 0
    20ae:	64 e0       	ldi	r22, 0x04	; 4
    20b0:	49 2f       	mov	r20, r25
    20b2:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,6));
    20b6:	fe 01       	movw	r30, r28
    20b8:	ed 59       	subi	r30, 0x9D	; 157
    20ba:	ff 4f       	sbci	r31, 0xFF	; 255
    20bc:	80 81       	ld	r24, Z
    20be:	88 2f       	mov	r24, r24
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	80 74       	andi	r24, 0x40	; 64
    20c4:	90 70       	andi	r25, 0x00	; 0
    20c6:	08 2e       	mov	r0, r24
    20c8:	89 2f       	mov	r24, r25
    20ca:	00 0c       	add	r0, r0
    20cc:	88 1f       	adc	r24, r24
    20ce:	99 0b       	sbc	r25, r25
    20d0:	00 0c       	add	r0, r0
    20d2:	88 1f       	adc	r24, r24
    20d4:	99 1f       	adc	r25, r25
    20d6:	98 2f       	mov	r25, r24
    20d8:	80 e0       	ldi	r24, 0x00	; 0
    20da:	65 e0       	ldi	r22, 0x05	; 5
    20dc:	49 2f       	mov	r20, r25
    20de:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,7));
    20e2:	fe 01       	movw	r30, r28
    20e4:	ed 59       	subi	r30, 0x9D	; 157
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 81       	ld	r24, Z
    20ea:	98 2f       	mov	r25, r24
    20ec:	99 1f       	adc	r25, r25
    20ee:	99 27       	eor	r25, r25
    20f0:	99 1f       	adc	r25, r25
    20f2:	80 e0       	ldi	r24, 0x00	; 0
    20f4:	66 e0       	ldi	r22, 0x06	; 6
    20f6:	49 2f       	mov	r20, r25
    20f8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    20fc:	fe 01       	movw	r30, r28
    20fe:	ed 5b       	subi	r30, 0xBD	; 189
    2100:	ff 4f       	sbci	r31, 0xFF	; 255
    2102:	80 e0       	ldi	r24, 0x00	; 0
    2104:	90 e0       	ldi	r25, 0x00	; 0
    2106:	a0 e8       	ldi	r26, 0x80	; 128
    2108:	bf e3       	ldi	r27, 0x3F	; 63
    210a:	80 83       	st	Z, r24
    210c:	91 83       	std	Z+1, r25	; 0x01
    210e:	a2 83       	std	Z+2, r26	; 0x02
    2110:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2112:	8e 01       	movw	r16, r28
    2114:	01 5c       	subi	r16, 0xC1	; 193
    2116:	1f 4f       	sbci	r17, 0xFF	; 255
    2118:	fe 01       	movw	r30, r28
    211a:	ed 5b       	subi	r30, 0xBD	; 189
    211c:	ff 4f       	sbci	r31, 0xFF	; 255
    211e:	60 81       	ld	r22, Z
    2120:	71 81       	ldd	r23, Z+1	; 0x01
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	93 81       	ldd	r25, Z+3	; 0x03
    2126:	20 e0       	ldi	r18, 0x00	; 0
    2128:	30 e0       	ldi	r19, 0x00	; 0
    212a:	4a e7       	ldi	r20, 0x7A	; 122
    212c:	55 e4       	ldi	r21, 0x45	; 69
    212e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	f8 01       	movw	r30, r16
    2138:	80 83       	st	Z, r24
    213a:	91 83       	std	Z+1, r25	; 0x01
    213c:	a2 83       	std	Z+2, r26	; 0x02
    213e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2140:	fe 01       	movw	r30, r28
    2142:	ff 96       	adiw	r30, 0x3f	; 63
    2144:	60 81       	ld	r22, Z
    2146:	71 81       	ldd	r23, Z+1	; 0x01
    2148:	82 81       	ldd	r24, Z+2	; 0x02
    214a:	93 81       	ldd	r25, Z+3	; 0x03
    214c:	20 e0       	ldi	r18, 0x00	; 0
    214e:	30 e0       	ldi	r19, 0x00	; 0
    2150:	40 e8       	ldi	r20, 0x80	; 128
    2152:	5f e3       	ldi	r21, 0x3F	; 63
    2154:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2158:	88 23       	and	r24, r24
    215a:	2c f4       	brge	.+10     	; 0x2166 <LCD_sendCommand+0x40e>
		__ticks = 1;
    215c:	81 e0       	ldi	r24, 0x01	; 1
    215e:	90 e0       	ldi	r25, 0x00	; 0
    2160:	9e af       	std	Y+62, r25	; 0x3e
    2162:	8d af       	std	Y+61, r24	; 0x3d
    2164:	46 c0       	rjmp	.+140    	; 0x21f2 <LCD_sendCommand+0x49a>
	else if (__tmp > 65535)
    2166:	fe 01       	movw	r30, r28
    2168:	ff 96       	adiw	r30, 0x3f	; 63
    216a:	60 81       	ld	r22, Z
    216c:	71 81       	ldd	r23, Z+1	; 0x01
    216e:	82 81       	ldd	r24, Z+2	; 0x02
    2170:	93 81       	ldd	r25, Z+3	; 0x03
    2172:	20 e0       	ldi	r18, 0x00	; 0
    2174:	3f ef       	ldi	r19, 0xFF	; 255
    2176:	4f e7       	ldi	r20, 0x7F	; 127
    2178:	57 e4       	ldi	r21, 0x47	; 71
    217a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    217e:	18 16       	cp	r1, r24
    2180:	64 f5       	brge	.+88     	; 0x21da <LCD_sendCommand+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2182:	fe 01       	movw	r30, r28
    2184:	ed 5b       	subi	r30, 0xBD	; 189
    2186:	ff 4f       	sbci	r31, 0xFF	; 255
    2188:	60 81       	ld	r22, Z
    218a:	71 81       	ldd	r23, Z+1	; 0x01
    218c:	82 81       	ldd	r24, Z+2	; 0x02
    218e:	93 81       	ldd	r25, Z+3	; 0x03
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	30 e0       	ldi	r19, 0x00	; 0
    2194:	40 e2       	ldi	r20, 0x20	; 32
    2196:	51 e4       	ldi	r21, 0x41	; 65
    2198:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    219c:	dc 01       	movw	r26, r24
    219e:	cb 01       	movw	r24, r22
    21a0:	bc 01       	movw	r22, r24
    21a2:	cd 01       	movw	r24, r26
    21a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	9e af       	std	Y+62, r25	; 0x3e
    21ae:	8d af       	std	Y+61, r24	; 0x3d
    21b0:	0f c0       	rjmp	.+30     	; 0x21d0 <LCD_sendCommand+0x478>
    21b2:	80 e9       	ldi	r24, 0x90	; 144
    21b4:	91 e0       	ldi	r25, 0x01	; 1
    21b6:	9c af       	std	Y+60, r25	; 0x3c
    21b8:	8b af       	std	Y+59, r24	; 0x3b
    21ba:	8b ad       	ldd	r24, Y+59	; 0x3b
    21bc:	9c ad       	ldd	r25, Y+60	; 0x3c
    21be:	01 97       	sbiw	r24, 0x01	; 1
    21c0:	f1 f7       	brne	.-4      	; 0x21be <LCD_sendCommand+0x466>
    21c2:	9c af       	std	Y+60, r25	; 0x3c
    21c4:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21c6:	8d ad       	ldd	r24, Y+61	; 0x3d
    21c8:	9e ad       	ldd	r25, Y+62	; 0x3e
    21ca:	01 97       	sbiw	r24, 0x01	; 1
    21cc:	9e af       	std	Y+62, r25	; 0x3e
    21ce:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d0:	8d ad       	ldd	r24, Y+61	; 0x3d
    21d2:	9e ad       	ldd	r25, Y+62	; 0x3e
    21d4:	00 97       	sbiw	r24, 0x00	; 0
    21d6:	69 f7       	brne	.-38     	; 0x21b2 <LCD_sendCommand+0x45a>
    21d8:	16 c0       	rjmp	.+44     	; 0x2206 <LCD_sendCommand+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21da:	fe 01       	movw	r30, r28
    21dc:	ff 96       	adiw	r30, 0x3f	; 63
    21de:	60 81       	ld	r22, Z
    21e0:	71 81       	ldd	r23, Z+1	; 0x01
    21e2:	82 81       	ldd	r24, Z+2	; 0x02
    21e4:	93 81       	ldd	r25, Z+3	; 0x03
    21e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9e af       	std	Y+62, r25	; 0x3e
    21f0:	8d af       	std	Y+61, r24	; 0x3d
    21f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    21f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    21f6:	9a af       	std	Y+58, r25	; 0x3a
    21f8:	89 af       	std	Y+57, r24	; 0x39
    21fa:	89 ad       	ldd	r24, Y+57	; 0x39
    21fc:	9a ad       	ldd	r25, Y+58	; 0x3a
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <LCD_sendCommand+0x4a6>
    2202:	9a af       	std	Y+58, r25	; 0x3a
    2204:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2206:	80 e0       	ldi	r24, 0x00	; 0
    2208:	62 e0       	ldi	r22, 0x02	; 2
    220a:	40 e0       	ldi	r20, 0x00	; 0
    220c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    2210:	80 e0       	ldi	r24, 0x00	; 0
    2212:	90 e0       	ldi	r25, 0x00	; 0
    2214:	a0 e8       	ldi	r26, 0x80	; 128
    2216:	bf e3       	ldi	r27, 0x3F	; 63
    2218:	8d ab       	std	Y+53, r24	; 0x35
    221a:	9e ab       	std	Y+54, r25	; 0x36
    221c:	af ab       	std	Y+55, r26	; 0x37
    221e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2220:	6d a9       	ldd	r22, Y+53	; 0x35
    2222:	7e a9       	ldd	r23, Y+54	; 0x36
    2224:	8f a9       	ldd	r24, Y+55	; 0x37
    2226:	98 ad       	ldd	r25, Y+56	; 0x38
    2228:	20 e0       	ldi	r18, 0x00	; 0
    222a:	30 e0       	ldi	r19, 0x00	; 0
    222c:	4a e7       	ldi	r20, 0x7A	; 122
    222e:	55 e4       	ldi	r21, 0x45	; 69
    2230:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2234:	dc 01       	movw	r26, r24
    2236:	cb 01       	movw	r24, r22
    2238:	89 ab       	std	Y+49, r24	; 0x31
    223a:	9a ab       	std	Y+50, r25	; 0x32
    223c:	ab ab       	std	Y+51, r26	; 0x33
    223e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2240:	69 a9       	ldd	r22, Y+49	; 0x31
    2242:	7a a9       	ldd	r23, Y+50	; 0x32
    2244:	8b a9       	ldd	r24, Y+51	; 0x33
    2246:	9c a9       	ldd	r25, Y+52	; 0x34
    2248:	20 e0       	ldi	r18, 0x00	; 0
    224a:	30 e0       	ldi	r19, 0x00	; 0
    224c:	40 e8       	ldi	r20, 0x80	; 128
    224e:	5f e3       	ldi	r21, 0x3F	; 63
    2250:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2254:	88 23       	and	r24, r24
    2256:	2c f4       	brge	.+10     	; 0x2262 <LCD_sendCommand+0x50a>
		__ticks = 1;
    2258:	81 e0       	ldi	r24, 0x01	; 1
    225a:	90 e0       	ldi	r25, 0x00	; 0
    225c:	98 ab       	std	Y+48, r25	; 0x30
    225e:	8f a7       	std	Y+47, r24	; 0x2f
    2260:	3f c0       	rjmp	.+126    	; 0x22e0 <LCD_sendCommand+0x588>
	else if (__tmp > 65535)
    2262:	69 a9       	ldd	r22, Y+49	; 0x31
    2264:	7a a9       	ldd	r23, Y+50	; 0x32
    2266:	8b a9       	ldd	r24, Y+51	; 0x33
    2268:	9c a9       	ldd	r25, Y+52	; 0x34
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	3f ef       	ldi	r19, 0xFF	; 255
    226e:	4f e7       	ldi	r20, 0x7F	; 127
    2270:	57 e4       	ldi	r21, 0x47	; 71
    2272:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2276:	18 16       	cp	r1, r24
    2278:	4c f5       	brge	.+82     	; 0x22cc <LCD_sendCommand+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227a:	6d a9       	ldd	r22, Y+53	; 0x35
    227c:	7e a9       	ldd	r23, Y+54	; 0x36
    227e:	8f a9       	ldd	r24, Y+55	; 0x37
    2280:	98 ad       	ldd	r25, Y+56	; 0x38
    2282:	20 e0       	ldi	r18, 0x00	; 0
    2284:	30 e0       	ldi	r19, 0x00	; 0
    2286:	40 e2       	ldi	r20, 0x20	; 32
    2288:	51 e4       	ldi	r21, 0x41	; 65
    228a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	bc 01       	movw	r22, r24
    2294:	cd 01       	movw	r24, r26
    2296:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    229a:	dc 01       	movw	r26, r24
    229c:	cb 01       	movw	r24, r22
    229e:	98 ab       	std	Y+48, r25	; 0x30
    22a0:	8f a7       	std	Y+47, r24	; 0x2f
    22a2:	0f c0       	rjmp	.+30     	; 0x22c2 <LCD_sendCommand+0x56a>
    22a4:	80 e9       	ldi	r24, 0x90	; 144
    22a6:	91 e0       	ldi	r25, 0x01	; 1
    22a8:	9e a7       	std	Y+46, r25	; 0x2e
    22aa:	8d a7       	std	Y+45, r24	; 0x2d
    22ac:	8d a5       	ldd	r24, Y+45	; 0x2d
    22ae:	9e a5       	ldd	r25, Y+46	; 0x2e
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	f1 f7       	brne	.-4      	; 0x22b0 <LCD_sendCommand+0x558>
    22b4:	9e a7       	std	Y+46, r25	; 0x2e
    22b6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22b8:	8f a5       	ldd	r24, Y+47	; 0x2f
    22ba:	98 a9       	ldd	r25, Y+48	; 0x30
    22bc:	01 97       	sbiw	r24, 0x01	; 1
    22be:	98 ab       	std	Y+48, r25	; 0x30
    22c0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22c2:	8f a5       	ldd	r24, Y+47	; 0x2f
    22c4:	98 a9       	ldd	r25, Y+48	; 0x30
    22c6:	00 97       	sbiw	r24, 0x00	; 0
    22c8:	69 f7       	brne	.-38     	; 0x22a4 <LCD_sendCommand+0x54c>
    22ca:	14 c0       	rjmp	.+40     	; 0x22f4 <LCD_sendCommand+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22cc:	69 a9       	ldd	r22, Y+49	; 0x31
    22ce:	7a a9       	ldd	r23, Y+50	; 0x32
    22d0:	8b a9       	ldd	r24, Y+51	; 0x33
    22d2:	9c a9       	ldd	r25, Y+52	; 0x34
    22d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22d8:	dc 01       	movw	r26, r24
    22da:	cb 01       	movw	r24, r22
    22dc:	98 ab       	std	Y+48, r25	; 0x30
    22de:	8f a7       	std	Y+47, r24	; 0x2f
    22e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e2:	98 a9       	ldd	r25, Y+48	; 0x30
    22e4:	9c a7       	std	Y+44, r25	; 0x2c
    22e6:	8b a7       	std	Y+43, r24	; 0x2b
    22e8:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ea:	9c a5       	ldd	r25, Y+44	; 0x2c
    22ec:	01 97       	sbiw	r24, 0x01	; 1
    22ee:	f1 f7       	brne	.-4      	; 0x22ec <LCD_sendCommand+0x594>
    22f0:	9c a7       	std	Y+44, r25	; 0x2c
    22f2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    22f4:	80 e0       	ldi	r24, 0x00	; 0
    22f6:	62 e0       	ldi	r22, 0x02	; 2
    22f8:	41 e0       	ldi	r20, 0x01	; 1
    22fa:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	a0 e8       	ldi	r26, 0x80	; 128
    2304:	bf e3       	ldi	r27, 0x3F	; 63
    2306:	8f a3       	std	Y+39, r24	; 0x27
    2308:	98 a7       	std	Y+40, r25	; 0x28
    230a:	a9 a7       	std	Y+41, r26	; 0x29
    230c:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230e:	6f a1       	ldd	r22, Y+39	; 0x27
    2310:	78 a5       	ldd	r23, Y+40	; 0x28
    2312:	89 a5       	ldd	r24, Y+41	; 0x29
    2314:	9a a5       	ldd	r25, Y+42	; 0x2a
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	4a e7       	ldi	r20, 0x7A	; 122
    231c:	55 e4       	ldi	r21, 0x45	; 69
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	8b a3       	std	Y+35, r24	; 0x23
    2328:	9c a3       	std	Y+36, r25	; 0x24
    232a:	ad a3       	std	Y+37, r26	; 0x25
    232c:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    232e:	6b a1       	ldd	r22, Y+35	; 0x23
    2330:	7c a1       	ldd	r23, Y+36	; 0x24
    2332:	8d a1       	ldd	r24, Y+37	; 0x25
    2334:	9e a1       	ldd	r25, Y+38	; 0x26
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e8       	ldi	r20, 0x80	; 128
    233c:	5f e3       	ldi	r21, 0x3F	; 63
    233e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2342:	88 23       	and	r24, r24
    2344:	2c f4       	brge	.+10     	; 0x2350 <LCD_sendCommand+0x5f8>
		__ticks = 1;
    2346:	81 e0       	ldi	r24, 0x01	; 1
    2348:	90 e0       	ldi	r25, 0x00	; 0
    234a:	9a a3       	std	Y+34, r25	; 0x22
    234c:	89 a3       	std	Y+33, r24	; 0x21
    234e:	3f c0       	rjmp	.+126    	; 0x23ce <LCD_sendCommand+0x676>
	else if (__tmp > 65535)
    2350:	6b a1       	ldd	r22, Y+35	; 0x23
    2352:	7c a1       	ldd	r23, Y+36	; 0x24
    2354:	8d a1       	ldd	r24, Y+37	; 0x25
    2356:	9e a1       	ldd	r25, Y+38	; 0x26
    2358:	20 e0       	ldi	r18, 0x00	; 0
    235a:	3f ef       	ldi	r19, 0xFF	; 255
    235c:	4f e7       	ldi	r20, 0x7F	; 127
    235e:	57 e4       	ldi	r21, 0x47	; 71
    2360:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2364:	18 16       	cp	r1, r24
    2366:	4c f5       	brge	.+82     	; 0x23ba <LCD_sendCommand+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2368:	6f a1       	ldd	r22, Y+39	; 0x27
    236a:	78 a5       	ldd	r23, Y+40	; 0x28
    236c:	89 a5       	ldd	r24, Y+41	; 0x29
    236e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2370:	20 e0       	ldi	r18, 0x00	; 0
    2372:	30 e0       	ldi	r19, 0x00	; 0
    2374:	40 e2       	ldi	r20, 0x20	; 32
    2376:	51 e4       	ldi	r21, 0x41	; 65
    2378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	bc 01       	movw	r22, r24
    2382:	cd 01       	movw	r24, r26
    2384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2388:	dc 01       	movw	r26, r24
    238a:	cb 01       	movw	r24, r22
    238c:	9a a3       	std	Y+34, r25	; 0x22
    238e:	89 a3       	std	Y+33, r24	; 0x21
    2390:	0f c0       	rjmp	.+30     	; 0x23b0 <LCD_sendCommand+0x658>
    2392:	80 e9       	ldi	r24, 0x90	; 144
    2394:	91 e0       	ldi	r25, 0x01	; 1
    2396:	98 a3       	std	Y+32, r25	; 0x20
    2398:	8f 8f       	std	Y+31, r24	; 0x1f
    239a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    239c:	98 a1       	ldd	r25, Y+32	; 0x20
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	f1 f7       	brne	.-4      	; 0x239e <LCD_sendCommand+0x646>
    23a2:	98 a3       	std	Y+32, r25	; 0x20
    23a4:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23a6:	89 a1       	ldd	r24, Y+33	; 0x21
    23a8:	9a a1       	ldd	r25, Y+34	; 0x22
    23aa:	01 97       	sbiw	r24, 0x01	; 1
    23ac:	9a a3       	std	Y+34, r25	; 0x22
    23ae:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23b0:	89 a1       	ldd	r24, Y+33	; 0x21
    23b2:	9a a1       	ldd	r25, Y+34	; 0x22
    23b4:	00 97       	sbiw	r24, 0x00	; 0
    23b6:	69 f7       	brne	.-38     	; 0x2392 <LCD_sendCommand+0x63a>
    23b8:	14 c0       	rjmp	.+40     	; 0x23e2 <LCD_sendCommand+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ba:	6b a1       	ldd	r22, Y+35	; 0x23
    23bc:	7c a1       	ldd	r23, Y+36	; 0x24
    23be:	8d a1       	ldd	r24, Y+37	; 0x25
    23c0:	9e a1       	ldd	r25, Y+38	; 0x26
    23c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23c6:	dc 01       	movw	r26, r24
    23c8:	cb 01       	movw	r24, r22
    23ca:	9a a3       	std	Y+34, r25	; 0x22
    23cc:	89 a3       	std	Y+33, r24	; 0x21
    23ce:	89 a1       	ldd	r24, Y+33	; 0x21
    23d0:	9a a1       	ldd	r25, Y+34	; 0x22
    23d2:	9e 8f       	std	Y+30, r25	; 0x1e
    23d4:	8d 8f       	std	Y+29, r24	; 0x1d
    23d6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    23d8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <LCD_sendCommand+0x682>
    23de:	9e 8f       	std	Y+30, r25	; 0x1e
    23e0:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(command,0));
    23e2:	fe 01       	movw	r30, r28
    23e4:	ed 59       	subi	r30, 0x9D	; 157
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	80 81       	ld	r24, Z
    23ea:	98 2f       	mov	r25, r24
    23ec:	91 70       	andi	r25, 0x01	; 1
    23ee:	80 e0       	ldi	r24, 0x00	; 0
    23f0:	63 e0       	ldi	r22, 0x03	; 3
    23f2:	49 2f       	mov	r20, r25
    23f4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(command,1));
    23f8:	fe 01       	movw	r30, r28
    23fa:	ed 59       	subi	r30, 0x9D	; 157
    23fc:	ff 4f       	sbci	r31, 0xFF	; 255
    23fe:	80 81       	ld	r24, Z
    2400:	88 2f       	mov	r24, r24
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	82 70       	andi	r24, 0x02	; 2
    2406:	90 70       	andi	r25, 0x00	; 0
    2408:	95 95       	asr	r25
    240a:	87 95       	ror	r24
    240c:	98 2f       	mov	r25, r24
    240e:	80 e0       	ldi	r24, 0x00	; 0
    2410:	64 e0       	ldi	r22, 0x04	; 4
    2412:	49 2f       	mov	r20, r25
    2414:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(command,2));
    2418:	fe 01       	movw	r30, r28
    241a:	ed 59       	subi	r30, 0x9D	; 157
    241c:	ff 4f       	sbci	r31, 0xFF	; 255
    241e:	80 81       	ld	r24, Z
    2420:	88 2f       	mov	r24, r24
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	84 70       	andi	r24, 0x04	; 4
    2426:	90 70       	andi	r25, 0x00	; 0
    2428:	95 95       	asr	r25
    242a:	87 95       	ror	r24
    242c:	95 95       	asr	r25
    242e:	87 95       	ror	r24
    2430:	98 2f       	mov	r25, r24
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	65 e0       	ldi	r22, 0x05	; 5
    2436:	49 2f       	mov	r20, r25
    2438:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(command,3));
    243c:	fe 01       	movw	r30, r28
    243e:	ed 59       	subi	r30, 0x9D	; 157
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 81       	ld	r24, Z
    2444:	88 2f       	mov	r24, r24
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	88 70       	andi	r24, 0x08	; 8
    244a:	90 70       	andi	r25, 0x00	; 0
    244c:	95 95       	asr	r25
    244e:	87 95       	ror	r24
    2450:	95 95       	asr	r25
    2452:	87 95       	ror	r24
    2454:	95 95       	asr	r25
    2456:	87 95       	ror	r24
    2458:	98 2f       	mov	r25, r24
    245a:	80 e0       	ldi	r24, 0x00	; 0
    245c:	66 e0       	ldi	r22, 0x06	; 6
    245e:	49 2f       	mov	r20, r25
    2460:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    2464:	80 e0       	ldi	r24, 0x00	; 0
    2466:	90 e0       	ldi	r25, 0x00	; 0
    2468:	a0 e8       	ldi	r26, 0x80	; 128
    246a:	bf e3       	ldi	r27, 0x3F	; 63
    246c:	89 8f       	std	Y+25, r24	; 0x19
    246e:	9a 8f       	std	Y+26, r25	; 0x1a
    2470:	ab 8f       	std	Y+27, r26	; 0x1b
    2472:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2474:	69 8d       	ldd	r22, Y+25	; 0x19
    2476:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2478:	8b 8d       	ldd	r24, Y+27	; 0x1b
    247a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    247c:	20 e0       	ldi	r18, 0x00	; 0
    247e:	30 e0       	ldi	r19, 0x00	; 0
    2480:	4a e7       	ldi	r20, 0x7A	; 122
    2482:	55 e4       	ldi	r21, 0x45	; 69
    2484:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2488:	dc 01       	movw	r26, r24
    248a:	cb 01       	movw	r24, r22
    248c:	8d 8b       	std	Y+21, r24	; 0x15
    248e:	9e 8b       	std	Y+22, r25	; 0x16
    2490:	af 8b       	std	Y+23, r26	; 0x17
    2492:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2494:	6d 89       	ldd	r22, Y+21	; 0x15
    2496:	7e 89       	ldd	r23, Y+22	; 0x16
    2498:	8f 89       	ldd	r24, Y+23	; 0x17
    249a:	98 8d       	ldd	r25, Y+24	; 0x18
    249c:	20 e0       	ldi	r18, 0x00	; 0
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	40 e8       	ldi	r20, 0x80	; 128
    24a2:	5f e3       	ldi	r21, 0x3F	; 63
    24a4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a8:	88 23       	and	r24, r24
    24aa:	2c f4       	brge	.+10     	; 0x24b6 <LCD_sendCommand+0x75e>
		__ticks = 1;
    24ac:	81 e0       	ldi	r24, 0x01	; 1
    24ae:	90 e0       	ldi	r25, 0x00	; 0
    24b0:	9c 8b       	std	Y+20, r25	; 0x14
    24b2:	8b 8b       	std	Y+19, r24	; 0x13
    24b4:	3f c0       	rjmp	.+126    	; 0x2534 <LCD_sendCommand+0x7dc>
	else if (__tmp > 65535)
    24b6:	6d 89       	ldd	r22, Y+21	; 0x15
    24b8:	7e 89       	ldd	r23, Y+22	; 0x16
    24ba:	8f 89       	ldd	r24, Y+23	; 0x17
    24bc:	98 8d       	ldd	r25, Y+24	; 0x18
    24be:	20 e0       	ldi	r18, 0x00	; 0
    24c0:	3f ef       	ldi	r19, 0xFF	; 255
    24c2:	4f e7       	ldi	r20, 0x7F	; 127
    24c4:	57 e4       	ldi	r21, 0x47	; 71
    24c6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24ca:	18 16       	cp	r1, r24
    24cc:	4c f5       	brge	.+82     	; 0x2520 <LCD_sendCommand+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24ce:	69 8d       	ldd	r22, Y+25	; 0x19
    24d0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24d2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24d4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24d6:	20 e0       	ldi	r18, 0x00	; 0
    24d8:	30 e0       	ldi	r19, 0x00	; 0
    24da:	40 e2       	ldi	r20, 0x20	; 32
    24dc:	51 e4       	ldi	r21, 0x41	; 65
    24de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e2:	dc 01       	movw	r26, r24
    24e4:	cb 01       	movw	r24, r22
    24e6:	bc 01       	movw	r22, r24
    24e8:	cd 01       	movw	r24, r26
    24ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ee:	dc 01       	movw	r26, r24
    24f0:	cb 01       	movw	r24, r22
    24f2:	9c 8b       	std	Y+20, r25	; 0x14
    24f4:	8b 8b       	std	Y+19, r24	; 0x13
    24f6:	0f c0       	rjmp	.+30     	; 0x2516 <LCD_sendCommand+0x7be>
    24f8:	80 e9       	ldi	r24, 0x90	; 144
    24fa:	91 e0       	ldi	r25, 0x01	; 1
    24fc:	9a 8b       	std	Y+18, r25	; 0x12
    24fe:	89 8b       	std	Y+17, r24	; 0x11
    2500:	89 89       	ldd	r24, Y+17	; 0x11
    2502:	9a 89       	ldd	r25, Y+18	; 0x12
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <LCD_sendCommand+0x7ac>
    2508:	9a 8b       	std	Y+18, r25	; 0x12
    250a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250c:	8b 89       	ldd	r24, Y+19	; 0x13
    250e:	9c 89       	ldd	r25, Y+20	; 0x14
    2510:	01 97       	sbiw	r24, 0x01	; 1
    2512:	9c 8b       	std	Y+20, r25	; 0x14
    2514:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2516:	8b 89       	ldd	r24, Y+19	; 0x13
    2518:	9c 89       	ldd	r25, Y+20	; 0x14
    251a:	00 97       	sbiw	r24, 0x00	; 0
    251c:	69 f7       	brne	.-38     	; 0x24f8 <LCD_sendCommand+0x7a0>
    251e:	14 c0       	rjmp	.+40     	; 0x2548 <LCD_sendCommand+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2520:	6d 89       	ldd	r22, Y+21	; 0x15
    2522:	7e 89       	ldd	r23, Y+22	; 0x16
    2524:	8f 89       	ldd	r24, Y+23	; 0x17
    2526:	98 8d       	ldd	r25, Y+24	; 0x18
    2528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252c:	dc 01       	movw	r26, r24
    252e:	cb 01       	movw	r24, r22
    2530:	9c 8b       	std	Y+20, r25	; 0x14
    2532:	8b 8b       	std	Y+19, r24	; 0x13
    2534:	8b 89       	ldd	r24, Y+19	; 0x13
    2536:	9c 89       	ldd	r25, Y+20	; 0x14
    2538:	98 8b       	std	Y+16, r25	; 0x10
    253a:	8f 87       	std	Y+15, r24	; 0x0f
    253c:	8f 85       	ldd	r24, Y+15	; 0x0f
    253e:	98 89       	ldd	r25, Y+16	; 0x10
    2540:	01 97       	sbiw	r24, 0x01	; 1
    2542:	f1 f7       	brne	.-4      	; 0x2540 <LCD_sendCommand+0x7e8>
    2544:	98 8b       	std	Y+16, r25	; 0x10
    2546:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	62 e0       	ldi	r22, 0x02	; 2
    254c:	40 e0       	ldi	r20, 0x00	; 0
    254e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    2552:	80 e0       	ldi	r24, 0x00	; 0
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	a0 e8       	ldi	r26, 0x80	; 128
    2558:	bf e3       	ldi	r27, 0x3F	; 63
    255a:	8b 87       	std	Y+11, r24	; 0x0b
    255c:	9c 87       	std	Y+12, r25	; 0x0c
    255e:	ad 87       	std	Y+13, r26	; 0x0d
    2560:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2562:	6b 85       	ldd	r22, Y+11	; 0x0b
    2564:	7c 85       	ldd	r23, Y+12	; 0x0c
    2566:	8d 85       	ldd	r24, Y+13	; 0x0d
    2568:	9e 85       	ldd	r25, Y+14	; 0x0e
    256a:	20 e0       	ldi	r18, 0x00	; 0
    256c:	30 e0       	ldi	r19, 0x00	; 0
    256e:	4a e7       	ldi	r20, 0x7A	; 122
    2570:	55 e4       	ldi	r21, 0x45	; 69
    2572:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	8f 83       	std	Y+7, r24	; 0x07
    257c:	98 87       	std	Y+8, r25	; 0x08
    257e:	a9 87       	std	Y+9, r26	; 0x09
    2580:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2582:	6f 81       	ldd	r22, Y+7	; 0x07
    2584:	78 85       	ldd	r23, Y+8	; 0x08
    2586:	89 85       	ldd	r24, Y+9	; 0x09
    2588:	9a 85       	ldd	r25, Y+10	; 0x0a
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	40 e8       	ldi	r20, 0x80	; 128
    2590:	5f e3       	ldi	r21, 0x3F	; 63
    2592:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2596:	88 23       	and	r24, r24
    2598:	2c f4       	brge	.+10     	; 0x25a4 <LCD_sendCommand+0x84c>
		__ticks = 1;
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	90 e0       	ldi	r25, 0x00	; 0
    259e:	9e 83       	std	Y+6, r25	; 0x06
    25a0:	8d 83       	std	Y+5, r24	; 0x05
    25a2:	3f c0       	rjmp	.+126    	; 0x2622 <LCD_sendCommand+0x8ca>
	else if (__tmp > 65535)
    25a4:	6f 81       	ldd	r22, Y+7	; 0x07
    25a6:	78 85       	ldd	r23, Y+8	; 0x08
    25a8:	89 85       	ldd	r24, Y+9	; 0x09
    25aa:	9a 85       	ldd	r25, Y+10	; 0x0a
    25ac:	20 e0       	ldi	r18, 0x00	; 0
    25ae:	3f ef       	ldi	r19, 0xFF	; 255
    25b0:	4f e7       	ldi	r20, 0x7F	; 127
    25b2:	57 e4       	ldi	r21, 0x47	; 71
    25b4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25b8:	18 16       	cp	r1, r24
    25ba:	4c f5       	brge	.+82     	; 0x260e <LCD_sendCommand+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25bc:	6b 85       	ldd	r22, Y+11	; 0x0b
    25be:	7c 85       	ldd	r23, Y+12	; 0x0c
    25c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    25c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e2       	ldi	r20, 0x20	; 32
    25ca:	51 e4       	ldi	r21, 0x41	; 65
    25cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	bc 01       	movw	r22, r24
    25d6:	cd 01       	movw	r24, r26
    25d8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25dc:	dc 01       	movw	r26, r24
    25de:	cb 01       	movw	r24, r22
    25e0:	9e 83       	std	Y+6, r25	; 0x06
    25e2:	8d 83       	std	Y+5, r24	; 0x05
    25e4:	0f c0       	rjmp	.+30     	; 0x2604 <LCD_sendCommand+0x8ac>
    25e6:	80 e9       	ldi	r24, 0x90	; 144
    25e8:	91 e0       	ldi	r25, 0x01	; 1
    25ea:	9c 83       	std	Y+4, r25	; 0x04
    25ec:	8b 83       	std	Y+3, r24	; 0x03
    25ee:	8b 81       	ldd	r24, Y+3	; 0x03
    25f0:	9c 81       	ldd	r25, Y+4	; 0x04
    25f2:	01 97       	sbiw	r24, 0x01	; 1
    25f4:	f1 f7       	brne	.-4      	; 0x25f2 <LCD_sendCommand+0x89a>
    25f6:	9c 83       	std	Y+4, r25	; 0x04
    25f8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25fa:	8d 81       	ldd	r24, Y+5	; 0x05
    25fc:	9e 81       	ldd	r25, Y+6	; 0x06
    25fe:	01 97       	sbiw	r24, 0x01	; 1
    2600:	9e 83       	std	Y+6, r25	; 0x06
    2602:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2604:	8d 81       	ldd	r24, Y+5	; 0x05
    2606:	9e 81       	ldd	r25, Y+6	; 0x06
    2608:	00 97       	sbiw	r24, 0x00	; 0
    260a:	69 f7       	brne	.-38     	; 0x25e6 <LCD_sendCommand+0x88e>
    260c:	14 c0       	rjmp	.+40     	; 0x2636 <LCD_sendCommand+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    260e:	6f 81       	ldd	r22, Y+7	; 0x07
    2610:	78 85       	ldd	r23, Y+8	; 0x08
    2612:	89 85       	ldd	r24, Y+9	; 0x09
    2614:	9a 85       	ldd	r25, Y+10	; 0x0a
    2616:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    261a:	dc 01       	movw	r26, r24
    261c:	cb 01       	movw	r24, r22
    261e:	9e 83       	std	Y+6, r25	; 0x06
    2620:	8d 83       	std	Y+5, r24	; 0x05
    2622:	8d 81       	ldd	r24, Y+5	; 0x05
    2624:	9e 81       	ldd	r25, Y+6	; 0x06
    2626:	9a 83       	std	Y+2, r25	; 0x02
    2628:	89 83       	std	Y+1, r24	; 0x01
    262a:	89 81       	ldd	r24, Y+1	; 0x01
    262c:	9a 81       	ldd	r25, Y+2	; 0x02
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	f1 f7       	brne	.-4      	; 0x262e <LCD_sendCommand+0x8d6>
    2632:	9a 83       	std	Y+2, r25	; 0x02
    2634:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2636:	cd 59       	subi	r28, 0x9D	; 157
    2638:	df 4f       	sbci	r29, 0xFF	; 255
    263a:	0f b6       	in	r0, 0x3f	; 63
    263c:	f8 94       	cli
    263e:	de bf       	out	0x3e, r29	; 62
    2640:	0f be       	out	0x3f, r0	; 63
    2642:	cd bf       	out	0x3d, r28	; 61
    2644:	cf 91       	pop	r28
    2646:	df 91       	pop	r29
    2648:	1f 91       	pop	r17
    264a:	0f 91       	pop	r16
    264c:	08 95       	ret

0000264e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    264e:	0f 93       	push	r16
    2650:	1f 93       	push	r17
    2652:	df 93       	push	r29
    2654:	cf 93       	push	r28
    2656:	cd b7       	in	r28, 0x3d	; 61
    2658:	de b7       	in	r29, 0x3e	; 62
    265a:	c3 56       	subi	r28, 0x63	; 99
    265c:	d0 40       	sbci	r29, 0x00	; 0
    265e:	0f b6       	in	r0, 0x3f	; 63
    2660:	f8 94       	cli
    2662:	de bf       	out	0x3e, r29	; 62
    2664:	0f be       	out	0x3f, r0	; 63
    2666:	cd bf       	out	0x3d, r28	; 61
    2668:	fe 01       	movw	r30, r28
    266a:	ed 59       	subi	r30, 0x9D	; 157
    266c:	ff 4f       	sbci	r31, 0xFF	; 255
    266e:	80 83       	st	Z, r24
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	61 e0       	ldi	r22, 0x01	; 1
    2674:	41 e0       	ldi	r20, 0x01	; 1
    2676:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    267a:	fe 01       	movw	r30, r28
    267c:	e1 5a       	subi	r30, 0xA1	; 161
    267e:	ff 4f       	sbci	r31, 0xFF	; 255
    2680:	80 e0       	ldi	r24, 0x00	; 0
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	a0 e8       	ldi	r26, 0x80	; 128
    2686:	bf e3       	ldi	r27, 0x3F	; 63
    2688:	80 83       	st	Z, r24
    268a:	91 83       	std	Z+1, r25	; 0x01
    268c:	a2 83       	std	Z+2, r26	; 0x02
    268e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2690:	8e 01       	movw	r16, r28
    2692:	05 5a       	subi	r16, 0xA5	; 165
    2694:	1f 4f       	sbci	r17, 0xFF	; 255
    2696:	fe 01       	movw	r30, r28
    2698:	e1 5a       	subi	r30, 0xA1	; 161
    269a:	ff 4f       	sbci	r31, 0xFF	; 255
    269c:	60 81       	ld	r22, Z
    269e:	71 81       	ldd	r23, Z+1	; 0x01
    26a0:	82 81       	ldd	r24, Z+2	; 0x02
    26a2:	93 81       	ldd	r25, Z+3	; 0x03
    26a4:	20 e0       	ldi	r18, 0x00	; 0
    26a6:	30 e0       	ldi	r19, 0x00	; 0
    26a8:	4a e7       	ldi	r20, 0x7A	; 122
    26aa:	55 e4       	ldi	r21, 0x45	; 69
    26ac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b0:	dc 01       	movw	r26, r24
    26b2:	cb 01       	movw	r24, r22
    26b4:	f8 01       	movw	r30, r16
    26b6:	80 83       	st	Z, r24
    26b8:	91 83       	std	Z+1, r25	; 0x01
    26ba:	a2 83       	std	Z+2, r26	; 0x02
    26bc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    26be:	fe 01       	movw	r30, r28
    26c0:	e5 5a       	subi	r30, 0xA5	; 165
    26c2:	ff 4f       	sbci	r31, 0xFF	; 255
    26c4:	60 81       	ld	r22, Z
    26c6:	71 81       	ldd	r23, Z+1	; 0x01
    26c8:	82 81       	ldd	r24, Z+2	; 0x02
    26ca:	93 81       	ldd	r25, Z+3	; 0x03
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e8       	ldi	r20, 0x80	; 128
    26d2:	5f e3       	ldi	r21, 0x3F	; 63
    26d4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26d8:	88 23       	and	r24, r24
    26da:	44 f4       	brge	.+16     	; 0x26ec <LCD_displayCharacter+0x9e>
		__ticks = 1;
    26dc:	fe 01       	movw	r30, r28
    26de:	e7 5a       	subi	r30, 0xA7	; 167
    26e0:	ff 4f       	sbci	r31, 0xFF	; 255
    26e2:	81 e0       	ldi	r24, 0x01	; 1
    26e4:	90 e0       	ldi	r25, 0x00	; 0
    26e6:	91 83       	std	Z+1, r25	; 0x01
    26e8:	80 83       	st	Z, r24
    26ea:	64 c0       	rjmp	.+200    	; 0x27b4 <LCD_displayCharacter+0x166>
	else if (__tmp > 65535)
    26ec:	fe 01       	movw	r30, r28
    26ee:	e5 5a       	subi	r30, 0xA5	; 165
    26f0:	ff 4f       	sbci	r31, 0xFF	; 255
    26f2:	60 81       	ld	r22, Z
    26f4:	71 81       	ldd	r23, Z+1	; 0x01
    26f6:	82 81       	ldd	r24, Z+2	; 0x02
    26f8:	93 81       	ldd	r25, Z+3	; 0x03
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	3f ef       	ldi	r19, 0xFF	; 255
    26fe:	4f e7       	ldi	r20, 0x7F	; 127
    2700:	57 e4       	ldi	r21, 0x47	; 71
    2702:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2706:	18 16       	cp	r1, r24
    2708:	0c f0       	brlt	.+2      	; 0x270c <LCD_displayCharacter+0xbe>
    270a:	43 c0       	rjmp	.+134    	; 0x2792 <LCD_displayCharacter+0x144>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270c:	fe 01       	movw	r30, r28
    270e:	e1 5a       	subi	r30, 0xA1	; 161
    2710:	ff 4f       	sbci	r31, 0xFF	; 255
    2712:	60 81       	ld	r22, Z
    2714:	71 81       	ldd	r23, Z+1	; 0x01
    2716:	82 81       	ldd	r24, Z+2	; 0x02
    2718:	93 81       	ldd	r25, Z+3	; 0x03
    271a:	20 e0       	ldi	r18, 0x00	; 0
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	40 e2       	ldi	r20, 0x20	; 32
    2720:	51 e4       	ldi	r21, 0x41	; 65
    2722:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2726:	dc 01       	movw	r26, r24
    2728:	cb 01       	movw	r24, r22
    272a:	8e 01       	movw	r16, r28
    272c:	07 5a       	subi	r16, 0xA7	; 167
    272e:	1f 4f       	sbci	r17, 0xFF	; 255
    2730:	bc 01       	movw	r22, r24
    2732:	cd 01       	movw	r24, r26
    2734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	f8 01       	movw	r30, r16
    273e:	91 83       	std	Z+1, r25	; 0x01
    2740:	80 83       	st	Z, r24
    2742:	1f c0       	rjmp	.+62     	; 0x2782 <LCD_displayCharacter+0x134>
    2744:	fe 01       	movw	r30, r28
    2746:	e9 5a       	subi	r30, 0xA9	; 169
    2748:	ff 4f       	sbci	r31, 0xFF	; 255
    274a:	80 e9       	ldi	r24, 0x90	; 144
    274c:	91 e0       	ldi	r25, 0x01	; 1
    274e:	91 83       	std	Z+1, r25	; 0x01
    2750:	80 83       	st	Z, r24
    2752:	fe 01       	movw	r30, r28
    2754:	e9 5a       	subi	r30, 0xA9	; 169
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	80 81       	ld	r24, Z
    275a:	91 81       	ldd	r25, Z+1	; 0x01
    275c:	01 97       	sbiw	r24, 0x01	; 1
    275e:	f1 f7       	brne	.-4      	; 0x275c <LCD_displayCharacter+0x10e>
    2760:	fe 01       	movw	r30, r28
    2762:	e9 5a       	subi	r30, 0xA9	; 169
    2764:	ff 4f       	sbci	r31, 0xFF	; 255
    2766:	91 83       	std	Z+1, r25	; 0x01
    2768:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276a:	de 01       	movw	r26, r28
    276c:	a7 5a       	subi	r26, 0xA7	; 167
    276e:	bf 4f       	sbci	r27, 0xFF	; 255
    2770:	fe 01       	movw	r30, r28
    2772:	e7 5a       	subi	r30, 0xA7	; 167
    2774:	ff 4f       	sbci	r31, 0xFF	; 255
    2776:	80 81       	ld	r24, Z
    2778:	91 81       	ldd	r25, Z+1	; 0x01
    277a:	01 97       	sbiw	r24, 0x01	; 1
    277c:	11 96       	adiw	r26, 0x01	; 1
    277e:	9c 93       	st	X, r25
    2780:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2782:	fe 01       	movw	r30, r28
    2784:	e7 5a       	subi	r30, 0xA7	; 167
    2786:	ff 4f       	sbci	r31, 0xFF	; 255
    2788:	80 81       	ld	r24, Z
    278a:	91 81       	ldd	r25, Z+1	; 0x01
    278c:	00 97       	sbiw	r24, 0x00	; 0
    278e:	d1 f6       	brne	.-76     	; 0x2744 <LCD_displayCharacter+0xf6>
    2790:	27 c0       	rjmp	.+78     	; 0x27e0 <LCD_displayCharacter+0x192>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2792:	8e 01       	movw	r16, r28
    2794:	07 5a       	subi	r16, 0xA7	; 167
    2796:	1f 4f       	sbci	r17, 0xFF	; 255
    2798:	fe 01       	movw	r30, r28
    279a:	e5 5a       	subi	r30, 0xA5	; 165
    279c:	ff 4f       	sbci	r31, 0xFF	; 255
    279e:	60 81       	ld	r22, Z
    27a0:	71 81       	ldd	r23, Z+1	; 0x01
    27a2:	82 81       	ldd	r24, Z+2	; 0x02
    27a4:	93 81       	ldd	r25, Z+3	; 0x03
    27a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27aa:	dc 01       	movw	r26, r24
    27ac:	cb 01       	movw	r24, r22
    27ae:	f8 01       	movw	r30, r16
    27b0:	91 83       	std	Z+1, r25	; 0x01
    27b2:	80 83       	st	Z, r24
    27b4:	de 01       	movw	r26, r28
    27b6:	ab 5a       	subi	r26, 0xAB	; 171
    27b8:	bf 4f       	sbci	r27, 0xFF	; 255
    27ba:	fe 01       	movw	r30, r28
    27bc:	e7 5a       	subi	r30, 0xA7	; 167
    27be:	ff 4f       	sbci	r31, 0xFF	; 255
    27c0:	80 81       	ld	r24, Z
    27c2:	91 81       	ldd	r25, Z+1	; 0x01
    27c4:	8d 93       	st	X+, r24
    27c6:	9c 93       	st	X, r25
    27c8:	fe 01       	movw	r30, r28
    27ca:	eb 5a       	subi	r30, 0xAB	; 171
    27cc:	ff 4f       	sbci	r31, 0xFF	; 255
    27ce:	80 81       	ld	r24, Z
    27d0:	91 81       	ldd	r25, Z+1	; 0x01
    27d2:	01 97       	sbiw	r24, 0x01	; 1
    27d4:	f1 f7       	brne	.-4      	; 0x27d2 <LCD_displayCharacter+0x184>
    27d6:	fe 01       	movw	r30, r28
    27d8:	eb 5a       	subi	r30, 0xAB	; 171
    27da:	ff 4f       	sbci	r31, 0xFF	; 255
    27dc:	91 83       	std	Z+1, r25	; 0x01
    27de:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    27e0:	80 e0       	ldi	r24, 0x00	; 0
    27e2:	62 e0       	ldi	r22, 0x02	; 2
    27e4:	41 e0       	ldi	r20, 0x01	; 1
    27e6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    27ea:	fe 01       	movw	r30, r28
    27ec:	ef 5a       	subi	r30, 0xAF	; 175
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	80 e0       	ldi	r24, 0x00	; 0
    27f2:	90 e0       	ldi	r25, 0x00	; 0
    27f4:	a0 e8       	ldi	r26, 0x80	; 128
    27f6:	bf e3       	ldi	r27, 0x3F	; 63
    27f8:	80 83       	st	Z, r24
    27fa:	91 83       	std	Z+1, r25	; 0x01
    27fc:	a2 83       	std	Z+2, r26	; 0x02
    27fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2800:	8e 01       	movw	r16, r28
    2802:	03 5b       	subi	r16, 0xB3	; 179
    2804:	1f 4f       	sbci	r17, 0xFF	; 255
    2806:	fe 01       	movw	r30, r28
    2808:	ef 5a       	subi	r30, 0xAF	; 175
    280a:	ff 4f       	sbci	r31, 0xFF	; 255
    280c:	60 81       	ld	r22, Z
    280e:	71 81       	ldd	r23, Z+1	; 0x01
    2810:	82 81       	ldd	r24, Z+2	; 0x02
    2812:	93 81       	ldd	r25, Z+3	; 0x03
    2814:	20 e0       	ldi	r18, 0x00	; 0
    2816:	30 e0       	ldi	r19, 0x00	; 0
    2818:	4a e7       	ldi	r20, 0x7A	; 122
    281a:	55 e4       	ldi	r21, 0x45	; 69
    281c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2820:	dc 01       	movw	r26, r24
    2822:	cb 01       	movw	r24, r22
    2824:	f8 01       	movw	r30, r16
    2826:	80 83       	st	Z, r24
    2828:	91 83       	std	Z+1, r25	; 0x01
    282a:	a2 83       	std	Z+2, r26	; 0x02
    282c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    282e:	fe 01       	movw	r30, r28
    2830:	e3 5b       	subi	r30, 0xB3	; 179
    2832:	ff 4f       	sbci	r31, 0xFF	; 255
    2834:	60 81       	ld	r22, Z
    2836:	71 81       	ldd	r23, Z+1	; 0x01
    2838:	82 81       	ldd	r24, Z+2	; 0x02
    283a:	93 81       	ldd	r25, Z+3	; 0x03
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e8       	ldi	r20, 0x80	; 128
    2842:	5f e3       	ldi	r21, 0x3F	; 63
    2844:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2848:	88 23       	and	r24, r24
    284a:	44 f4       	brge	.+16     	; 0x285c <LCD_displayCharacter+0x20e>
		__ticks = 1;
    284c:	fe 01       	movw	r30, r28
    284e:	e5 5b       	subi	r30, 0xB5	; 181
    2850:	ff 4f       	sbci	r31, 0xFF	; 255
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	91 83       	std	Z+1, r25	; 0x01
    2858:	80 83       	st	Z, r24
    285a:	64 c0       	rjmp	.+200    	; 0x2924 <LCD_displayCharacter+0x2d6>
	else if (__tmp > 65535)
    285c:	fe 01       	movw	r30, r28
    285e:	e3 5b       	subi	r30, 0xB3	; 179
    2860:	ff 4f       	sbci	r31, 0xFF	; 255
    2862:	60 81       	ld	r22, Z
    2864:	71 81       	ldd	r23, Z+1	; 0x01
    2866:	82 81       	ldd	r24, Z+2	; 0x02
    2868:	93 81       	ldd	r25, Z+3	; 0x03
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	3f ef       	ldi	r19, 0xFF	; 255
    286e:	4f e7       	ldi	r20, 0x7F	; 127
    2870:	57 e4       	ldi	r21, 0x47	; 71
    2872:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2876:	18 16       	cp	r1, r24
    2878:	0c f0       	brlt	.+2      	; 0x287c <LCD_displayCharacter+0x22e>
    287a:	43 c0       	rjmp	.+134    	; 0x2902 <LCD_displayCharacter+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287c:	fe 01       	movw	r30, r28
    287e:	ef 5a       	subi	r30, 0xAF	; 175
    2880:	ff 4f       	sbci	r31, 0xFF	; 255
    2882:	60 81       	ld	r22, Z
    2884:	71 81       	ldd	r23, Z+1	; 0x01
    2886:	82 81       	ldd	r24, Z+2	; 0x02
    2888:	93 81       	ldd	r25, Z+3	; 0x03
    288a:	20 e0       	ldi	r18, 0x00	; 0
    288c:	30 e0       	ldi	r19, 0x00	; 0
    288e:	40 e2       	ldi	r20, 0x20	; 32
    2890:	51 e4       	ldi	r21, 0x41	; 65
    2892:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2896:	dc 01       	movw	r26, r24
    2898:	cb 01       	movw	r24, r22
    289a:	8e 01       	movw	r16, r28
    289c:	05 5b       	subi	r16, 0xB5	; 181
    289e:	1f 4f       	sbci	r17, 0xFF	; 255
    28a0:	bc 01       	movw	r22, r24
    28a2:	cd 01       	movw	r24, r26
    28a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a8:	dc 01       	movw	r26, r24
    28aa:	cb 01       	movw	r24, r22
    28ac:	f8 01       	movw	r30, r16
    28ae:	91 83       	std	Z+1, r25	; 0x01
    28b0:	80 83       	st	Z, r24
    28b2:	1f c0       	rjmp	.+62     	; 0x28f2 <LCD_displayCharacter+0x2a4>
    28b4:	fe 01       	movw	r30, r28
    28b6:	e7 5b       	subi	r30, 0xB7	; 183
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	80 e9       	ldi	r24, 0x90	; 144
    28bc:	91 e0       	ldi	r25, 0x01	; 1
    28be:	91 83       	std	Z+1, r25	; 0x01
    28c0:	80 83       	st	Z, r24
    28c2:	fe 01       	movw	r30, r28
    28c4:	e7 5b       	subi	r30, 0xB7	; 183
    28c6:	ff 4f       	sbci	r31, 0xFF	; 255
    28c8:	80 81       	ld	r24, Z
    28ca:	91 81       	ldd	r25, Z+1	; 0x01
    28cc:	01 97       	sbiw	r24, 0x01	; 1
    28ce:	f1 f7       	brne	.-4      	; 0x28cc <LCD_displayCharacter+0x27e>
    28d0:	fe 01       	movw	r30, r28
    28d2:	e7 5b       	subi	r30, 0xB7	; 183
    28d4:	ff 4f       	sbci	r31, 0xFF	; 255
    28d6:	91 83       	std	Z+1, r25	; 0x01
    28d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28da:	de 01       	movw	r26, r28
    28dc:	a5 5b       	subi	r26, 0xB5	; 181
    28de:	bf 4f       	sbci	r27, 0xFF	; 255
    28e0:	fe 01       	movw	r30, r28
    28e2:	e5 5b       	subi	r30, 0xB5	; 181
    28e4:	ff 4f       	sbci	r31, 0xFF	; 255
    28e6:	80 81       	ld	r24, Z
    28e8:	91 81       	ldd	r25, Z+1	; 0x01
    28ea:	01 97       	sbiw	r24, 0x01	; 1
    28ec:	11 96       	adiw	r26, 0x01	; 1
    28ee:	9c 93       	st	X, r25
    28f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f2:	fe 01       	movw	r30, r28
    28f4:	e5 5b       	subi	r30, 0xB5	; 181
    28f6:	ff 4f       	sbci	r31, 0xFF	; 255
    28f8:	80 81       	ld	r24, Z
    28fa:	91 81       	ldd	r25, Z+1	; 0x01
    28fc:	00 97       	sbiw	r24, 0x00	; 0
    28fe:	d1 f6       	brne	.-76     	; 0x28b4 <LCD_displayCharacter+0x266>
    2900:	27 c0       	rjmp	.+78     	; 0x2950 <LCD_displayCharacter+0x302>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2902:	8e 01       	movw	r16, r28
    2904:	05 5b       	subi	r16, 0xB5	; 181
    2906:	1f 4f       	sbci	r17, 0xFF	; 255
    2908:	fe 01       	movw	r30, r28
    290a:	e3 5b       	subi	r30, 0xB3	; 179
    290c:	ff 4f       	sbci	r31, 0xFF	; 255
    290e:	60 81       	ld	r22, Z
    2910:	71 81       	ldd	r23, Z+1	; 0x01
    2912:	82 81       	ldd	r24, Z+2	; 0x02
    2914:	93 81       	ldd	r25, Z+3	; 0x03
    2916:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	f8 01       	movw	r30, r16
    2920:	91 83       	std	Z+1, r25	; 0x01
    2922:	80 83       	st	Z, r24
    2924:	de 01       	movw	r26, r28
    2926:	a9 5b       	subi	r26, 0xB9	; 185
    2928:	bf 4f       	sbci	r27, 0xFF	; 255
    292a:	fe 01       	movw	r30, r28
    292c:	e5 5b       	subi	r30, 0xB5	; 181
    292e:	ff 4f       	sbci	r31, 0xFF	; 255
    2930:	80 81       	ld	r24, Z
    2932:	91 81       	ldd	r25, Z+1	; 0x01
    2934:	8d 93       	st	X+, r24
    2936:	9c 93       	st	X, r25
    2938:	fe 01       	movw	r30, r28
    293a:	e9 5b       	subi	r30, 0xB9	; 185
    293c:	ff 4f       	sbci	r31, 0xFF	; 255
    293e:	80 81       	ld	r24, Z
    2940:	91 81       	ldd	r25, Z+1	; 0x01
    2942:	01 97       	sbiw	r24, 0x01	; 1
    2944:	f1 f7       	brne	.-4      	; 0x2942 <LCD_displayCharacter+0x2f4>
    2946:	fe 01       	movw	r30, r28
    2948:	e9 5b       	subi	r30, 0xB9	; 185
    294a:	ff 4f       	sbci	r31, 0xFF	; 255
    294c:	91 83       	std	Z+1, r25	; 0x01
    294e:	80 83       	st	Z, r24
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

#if(LCD_DATA_BITS_MODE == 4)
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,4));
    2950:	fe 01       	movw	r30, r28
    2952:	ed 59       	subi	r30, 0x9D	; 157
    2954:	ff 4f       	sbci	r31, 0xFF	; 255
    2956:	80 81       	ld	r24, Z
    2958:	88 2f       	mov	r24, r24
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	80 71       	andi	r24, 0x10	; 16
    295e:	90 70       	andi	r25, 0x00	; 0
    2960:	95 95       	asr	r25
    2962:	87 95       	ror	r24
    2964:	95 95       	asr	r25
    2966:	87 95       	ror	r24
    2968:	95 95       	asr	r25
    296a:	87 95       	ror	r24
    296c:	95 95       	asr	r25
    296e:	87 95       	ror	r24
    2970:	98 2f       	mov	r25, r24
    2972:	80 e0       	ldi	r24, 0x00	; 0
    2974:	63 e0       	ldi	r22, 0x03	; 3
    2976:	49 2f       	mov	r20, r25
    2978:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,5));
    297c:	fe 01       	movw	r30, r28
    297e:	ed 59       	subi	r30, 0x9D	; 157
    2980:	ff 4f       	sbci	r31, 0xFF	; 255
    2982:	80 81       	ld	r24, Z
    2984:	88 2f       	mov	r24, r24
    2986:	90 e0       	ldi	r25, 0x00	; 0
    2988:	80 72       	andi	r24, 0x20	; 32
    298a:	90 70       	andi	r25, 0x00	; 0
    298c:	95 95       	asr	r25
    298e:	87 95       	ror	r24
    2990:	95 95       	asr	r25
    2992:	87 95       	ror	r24
    2994:	95 95       	asr	r25
    2996:	87 95       	ror	r24
    2998:	95 95       	asr	r25
    299a:	87 95       	ror	r24
    299c:	95 95       	asr	r25
    299e:	87 95       	ror	r24
    29a0:	98 2f       	mov	r25, r24
    29a2:	80 e0       	ldi	r24, 0x00	; 0
    29a4:	64 e0       	ldi	r22, 0x04	; 4
    29a6:	49 2f       	mov	r20, r25
    29a8:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,6));
    29ac:	fe 01       	movw	r30, r28
    29ae:	ed 59       	subi	r30, 0x9D	; 157
    29b0:	ff 4f       	sbci	r31, 0xFF	; 255
    29b2:	80 81       	ld	r24, Z
    29b4:	88 2f       	mov	r24, r24
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	80 74       	andi	r24, 0x40	; 64
    29ba:	90 70       	andi	r25, 0x00	; 0
    29bc:	08 2e       	mov	r0, r24
    29be:	89 2f       	mov	r24, r25
    29c0:	00 0c       	add	r0, r0
    29c2:	88 1f       	adc	r24, r24
    29c4:	99 0b       	sbc	r25, r25
    29c6:	00 0c       	add	r0, r0
    29c8:	88 1f       	adc	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	98 2f       	mov	r25, r24
    29ce:	80 e0       	ldi	r24, 0x00	; 0
    29d0:	65 e0       	ldi	r22, 0x05	; 5
    29d2:	49 2f       	mov	r20, r25
    29d4:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,7));
    29d8:	fe 01       	movw	r30, r28
    29da:	ed 59       	subi	r30, 0x9D	; 157
    29dc:	ff 4f       	sbci	r31, 0xFF	; 255
    29de:	80 81       	ld	r24, Z
    29e0:	98 2f       	mov	r25, r24
    29e2:	99 1f       	adc	r25, r25
    29e4:	99 27       	eor	r25, r25
    29e6:	99 1f       	adc	r25, r25
    29e8:	80 e0       	ldi	r24, 0x00	; 0
    29ea:	66 e0       	ldi	r22, 0x06	; 6
    29ec:	49 2f       	mov	r20, r25
    29ee:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    29f2:	fe 01       	movw	r30, r28
    29f4:	ed 5b       	subi	r30, 0xBD	; 189
    29f6:	ff 4f       	sbci	r31, 0xFF	; 255
    29f8:	80 e0       	ldi	r24, 0x00	; 0
    29fa:	90 e0       	ldi	r25, 0x00	; 0
    29fc:	a0 e8       	ldi	r26, 0x80	; 128
    29fe:	bf e3       	ldi	r27, 0x3F	; 63
    2a00:	80 83       	st	Z, r24
    2a02:	91 83       	std	Z+1, r25	; 0x01
    2a04:	a2 83       	std	Z+2, r26	; 0x02
    2a06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a08:	8e 01       	movw	r16, r28
    2a0a:	01 5c       	subi	r16, 0xC1	; 193
    2a0c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a0e:	fe 01       	movw	r30, r28
    2a10:	ed 5b       	subi	r30, 0xBD	; 189
    2a12:	ff 4f       	sbci	r31, 0xFF	; 255
    2a14:	60 81       	ld	r22, Z
    2a16:	71 81       	ldd	r23, Z+1	; 0x01
    2a18:	82 81       	ldd	r24, Z+2	; 0x02
    2a1a:	93 81       	ldd	r25, Z+3	; 0x03
    2a1c:	20 e0       	ldi	r18, 0x00	; 0
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	4a e7       	ldi	r20, 0x7A	; 122
    2a22:	55 e4       	ldi	r21, 0x45	; 69
    2a24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a28:	dc 01       	movw	r26, r24
    2a2a:	cb 01       	movw	r24, r22
    2a2c:	f8 01       	movw	r30, r16
    2a2e:	80 83       	st	Z, r24
    2a30:	91 83       	std	Z+1, r25	; 0x01
    2a32:	a2 83       	std	Z+2, r26	; 0x02
    2a34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2a36:	fe 01       	movw	r30, r28
    2a38:	ff 96       	adiw	r30, 0x3f	; 63
    2a3a:	60 81       	ld	r22, Z
    2a3c:	71 81       	ldd	r23, Z+1	; 0x01
    2a3e:	82 81       	ldd	r24, Z+2	; 0x02
    2a40:	93 81       	ldd	r25, Z+3	; 0x03
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	40 e8       	ldi	r20, 0x80	; 128
    2a48:	5f e3       	ldi	r21, 0x3F	; 63
    2a4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a4e:	88 23       	and	r24, r24
    2a50:	2c f4       	brge	.+10     	; 0x2a5c <LCD_displayCharacter+0x40e>
		__ticks = 1;
    2a52:	81 e0       	ldi	r24, 0x01	; 1
    2a54:	90 e0       	ldi	r25, 0x00	; 0
    2a56:	9e af       	std	Y+62, r25	; 0x3e
    2a58:	8d af       	std	Y+61, r24	; 0x3d
    2a5a:	46 c0       	rjmp	.+140    	; 0x2ae8 <LCD_displayCharacter+0x49a>
	else if (__tmp > 65535)
    2a5c:	fe 01       	movw	r30, r28
    2a5e:	ff 96       	adiw	r30, 0x3f	; 63
    2a60:	60 81       	ld	r22, Z
    2a62:	71 81       	ldd	r23, Z+1	; 0x01
    2a64:	82 81       	ldd	r24, Z+2	; 0x02
    2a66:	93 81       	ldd	r25, Z+3	; 0x03
    2a68:	20 e0       	ldi	r18, 0x00	; 0
    2a6a:	3f ef       	ldi	r19, 0xFF	; 255
    2a6c:	4f e7       	ldi	r20, 0x7F	; 127
    2a6e:	57 e4       	ldi	r21, 0x47	; 71
    2a70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a74:	18 16       	cp	r1, r24
    2a76:	64 f5       	brge	.+88     	; 0x2ad0 <LCD_displayCharacter+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a78:	fe 01       	movw	r30, r28
    2a7a:	ed 5b       	subi	r30, 0xBD	; 189
    2a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7e:	60 81       	ld	r22, Z
    2a80:	71 81       	ldd	r23, Z+1	; 0x01
    2a82:	82 81       	ldd	r24, Z+2	; 0x02
    2a84:	93 81       	ldd	r25, Z+3	; 0x03
    2a86:	20 e0       	ldi	r18, 0x00	; 0
    2a88:	30 e0       	ldi	r19, 0x00	; 0
    2a8a:	40 e2       	ldi	r20, 0x20	; 32
    2a8c:	51 e4       	ldi	r21, 0x41	; 65
    2a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a92:	dc 01       	movw	r26, r24
    2a94:	cb 01       	movw	r24, r22
    2a96:	bc 01       	movw	r22, r24
    2a98:	cd 01       	movw	r24, r26
    2a9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a9e:	dc 01       	movw	r26, r24
    2aa0:	cb 01       	movw	r24, r22
    2aa2:	9e af       	std	Y+62, r25	; 0x3e
    2aa4:	8d af       	std	Y+61, r24	; 0x3d
    2aa6:	0f c0       	rjmp	.+30     	; 0x2ac6 <LCD_displayCharacter+0x478>
    2aa8:	80 e9       	ldi	r24, 0x90	; 144
    2aaa:	91 e0       	ldi	r25, 0x01	; 1
    2aac:	9c af       	std	Y+60, r25	; 0x3c
    2aae:	8b af       	std	Y+59, r24	; 0x3b
    2ab0:	8b ad       	ldd	r24, Y+59	; 0x3b
    2ab2:	9c ad       	ldd	r25, Y+60	; 0x3c
    2ab4:	01 97       	sbiw	r24, 0x01	; 1
    2ab6:	f1 f7       	brne	.-4      	; 0x2ab4 <LCD_displayCharacter+0x466>
    2ab8:	9c af       	std	Y+60, r25	; 0x3c
    2aba:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2abc:	8d ad       	ldd	r24, Y+61	; 0x3d
    2abe:	9e ad       	ldd	r25, Y+62	; 0x3e
    2ac0:	01 97       	sbiw	r24, 0x01	; 1
    2ac2:	9e af       	std	Y+62, r25	; 0x3e
    2ac4:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ac6:	8d ad       	ldd	r24, Y+61	; 0x3d
    2ac8:	9e ad       	ldd	r25, Y+62	; 0x3e
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	69 f7       	brne	.-38     	; 0x2aa8 <LCD_displayCharacter+0x45a>
    2ace:	16 c0       	rjmp	.+44     	; 0x2afc <LCD_displayCharacter+0x4ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad0:	fe 01       	movw	r30, r28
    2ad2:	ff 96       	adiw	r30, 0x3f	; 63
    2ad4:	60 81       	ld	r22, Z
    2ad6:	71 81       	ldd	r23, Z+1	; 0x01
    2ad8:	82 81       	ldd	r24, Z+2	; 0x02
    2ada:	93 81       	ldd	r25, Z+3	; 0x03
    2adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	9e af       	std	Y+62, r25	; 0x3e
    2ae6:	8d af       	std	Y+61, r24	; 0x3d
    2ae8:	8d ad       	ldd	r24, Y+61	; 0x3d
    2aea:	9e ad       	ldd	r25, Y+62	; 0x3e
    2aec:	9a af       	std	Y+58, r25	; 0x3a
    2aee:	89 af       	std	Y+57, r24	; 0x39
    2af0:	89 ad       	ldd	r24, Y+57	; 0x39
    2af2:	9a ad       	ldd	r25, Y+58	; 0x3a
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <LCD_displayCharacter+0x4a6>
    2af8:	9a af       	std	Y+58, r25	; 0x3a
    2afa:	89 af       	std	Y+57, r24	; 0x39

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2afc:	80 e0       	ldi	r24, 0x00	; 0
    2afe:	62 e0       	ldi	r22, 0x02	; 2
    2b00:	40 e0       	ldi	r20, 0x00	; 0
    2b02:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    2b06:	80 e0       	ldi	r24, 0x00	; 0
    2b08:	90 e0       	ldi	r25, 0x00	; 0
    2b0a:	a0 e8       	ldi	r26, 0x80	; 128
    2b0c:	bf e3       	ldi	r27, 0x3F	; 63
    2b0e:	8d ab       	std	Y+53, r24	; 0x35
    2b10:	9e ab       	std	Y+54, r25	; 0x36
    2b12:	af ab       	std	Y+55, r26	; 0x37
    2b14:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b16:	6d a9       	ldd	r22, Y+53	; 0x35
    2b18:	7e a9       	ldd	r23, Y+54	; 0x36
    2b1a:	8f a9       	ldd	r24, Y+55	; 0x37
    2b1c:	98 ad       	ldd	r25, Y+56	; 0x38
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	4a e7       	ldi	r20, 0x7A	; 122
    2b24:	55 e4       	ldi	r21, 0x45	; 69
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	89 ab       	std	Y+49, r24	; 0x31
    2b30:	9a ab       	std	Y+50, r25	; 0x32
    2b32:	ab ab       	std	Y+51, r26	; 0x33
    2b34:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b36:	69 a9       	ldd	r22, Y+49	; 0x31
    2b38:	7a a9       	ldd	r23, Y+50	; 0x32
    2b3a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b3c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b3e:	20 e0       	ldi	r18, 0x00	; 0
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	40 e8       	ldi	r20, 0x80	; 128
    2b44:	5f e3       	ldi	r21, 0x3F	; 63
    2b46:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b4a:	88 23       	and	r24, r24
    2b4c:	2c f4       	brge	.+10     	; 0x2b58 <LCD_displayCharacter+0x50a>
		__ticks = 1;
    2b4e:	81 e0       	ldi	r24, 0x01	; 1
    2b50:	90 e0       	ldi	r25, 0x00	; 0
    2b52:	98 ab       	std	Y+48, r25	; 0x30
    2b54:	8f a7       	std	Y+47, r24	; 0x2f
    2b56:	3f c0       	rjmp	.+126    	; 0x2bd6 <LCD_displayCharacter+0x588>
	else if (__tmp > 65535)
    2b58:	69 a9       	ldd	r22, Y+49	; 0x31
    2b5a:	7a a9       	ldd	r23, Y+50	; 0x32
    2b5c:	8b a9       	ldd	r24, Y+51	; 0x33
    2b5e:	9c a9       	ldd	r25, Y+52	; 0x34
    2b60:	20 e0       	ldi	r18, 0x00	; 0
    2b62:	3f ef       	ldi	r19, 0xFF	; 255
    2b64:	4f e7       	ldi	r20, 0x7F	; 127
    2b66:	57 e4       	ldi	r21, 0x47	; 71
    2b68:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b6c:	18 16       	cp	r1, r24
    2b6e:	4c f5       	brge	.+82     	; 0x2bc2 <LCD_displayCharacter+0x574>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b70:	6d a9       	ldd	r22, Y+53	; 0x35
    2b72:	7e a9       	ldd	r23, Y+54	; 0x36
    2b74:	8f a9       	ldd	r24, Y+55	; 0x37
    2b76:	98 ad       	ldd	r25, Y+56	; 0x38
    2b78:	20 e0       	ldi	r18, 0x00	; 0
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	40 e2       	ldi	r20, 0x20	; 32
    2b7e:	51 e4       	ldi	r21, 0x41	; 65
    2b80:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b84:	dc 01       	movw	r26, r24
    2b86:	cb 01       	movw	r24, r22
    2b88:	bc 01       	movw	r22, r24
    2b8a:	cd 01       	movw	r24, r26
    2b8c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b90:	dc 01       	movw	r26, r24
    2b92:	cb 01       	movw	r24, r22
    2b94:	98 ab       	std	Y+48, r25	; 0x30
    2b96:	8f a7       	std	Y+47, r24	; 0x2f
    2b98:	0f c0       	rjmp	.+30     	; 0x2bb8 <LCD_displayCharacter+0x56a>
    2b9a:	80 e9       	ldi	r24, 0x90	; 144
    2b9c:	91 e0       	ldi	r25, 0x01	; 1
    2b9e:	9e a7       	std	Y+46, r25	; 0x2e
    2ba0:	8d a7       	std	Y+45, r24	; 0x2d
    2ba2:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ba4:	9e a5       	ldd	r25, Y+46	; 0x2e
    2ba6:	01 97       	sbiw	r24, 0x01	; 1
    2ba8:	f1 f7       	brne	.-4      	; 0x2ba6 <LCD_displayCharacter+0x558>
    2baa:	9e a7       	std	Y+46, r25	; 0x2e
    2bac:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bae:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bb0:	98 a9       	ldd	r25, Y+48	; 0x30
    2bb2:	01 97       	sbiw	r24, 0x01	; 1
    2bb4:	98 ab       	std	Y+48, r25	; 0x30
    2bb6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2bb8:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bba:	98 a9       	ldd	r25, Y+48	; 0x30
    2bbc:	00 97       	sbiw	r24, 0x00	; 0
    2bbe:	69 f7       	brne	.-38     	; 0x2b9a <LCD_displayCharacter+0x54c>
    2bc0:	14 c0       	rjmp	.+40     	; 0x2bea <LCD_displayCharacter+0x59c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bc2:	69 a9       	ldd	r22, Y+49	; 0x31
    2bc4:	7a a9       	ldd	r23, Y+50	; 0x32
    2bc6:	8b a9       	ldd	r24, Y+51	; 0x33
    2bc8:	9c a9       	ldd	r25, Y+52	; 0x34
    2bca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bce:	dc 01       	movw	r26, r24
    2bd0:	cb 01       	movw	r24, r22
    2bd2:	98 ab       	std	Y+48, r25	; 0x30
    2bd4:	8f a7       	std	Y+47, r24	; 0x2f
    2bd6:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bd8:	98 a9       	ldd	r25, Y+48	; 0x30
    2bda:	9c a7       	std	Y+44, r25	; 0x2c
    2bdc:	8b a7       	std	Y+43, r24	; 0x2b
    2bde:	8b a5       	ldd	r24, Y+43	; 0x2b
    2be0:	9c a5       	ldd	r25, Y+44	; 0x2c
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	f1 f7       	brne	.-4      	; 0x2be2 <LCD_displayCharacter+0x594>
    2be6:	9c a7       	std	Y+44, r25	; 0x2c
    2be8:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Th = 13ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    2bea:	80 e0       	ldi	r24, 0x00	; 0
    2bec:	62 e0       	ldi	r22, 0x02	; 2
    2bee:	41 e0       	ldi	r20, 0x01	; 1
    2bf0:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    2bf4:	80 e0       	ldi	r24, 0x00	; 0
    2bf6:	90 e0       	ldi	r25, 0x00	; 0
    2bf8:	a0 e8       	ldi	r26, 0x80	; 128
    2bfa:	bf e3       	ldi	r27, 0x3F	; 63
    2bfc:	8f a3       	std	Y+39, r24	; 0x27
    2bfe:	98 a7       	std	Y+40, r25	; 0x28
    2c00:	a9 a7       	std	Y+41, r26	; 0x29
    2c02:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c04:	6f a1       	ldd	r22, Y+39	; 0x27
    2c06:	78 a5       	ldd	r23, Y+40	; 0x28
    2c08:	89 a5       	ldd	r24, Y+41	; 0x29
    2c0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	30 e0       	ldi	r19, 0x00	; 0
    2c10:	4a e7       	ldi	r20, 0x7A	; 122
    2c12:	55 e4       	ldi	r21, 0x45	; 69
    2c14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c18:	dc 01       	movw	r26, r24
    2c1a:	cb 01       	movw	r24, r22
    2c1c:	8b a3       	std	Y+35, r24	; 0x23
    2c1e:	9c a3       	std	Y+36, r25	; 0x24
    2c20:	ad a3       	std	Y+37, r26	; 0x25
    2c22:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c24:	6b a1       	ldd	r22, Y+35	; 0x23
    2c26:	7c a1       	ldd	r23, Y+36	; 0x24
    2c28:	8d a1       	ldd	r24, Y+37	; 0x25
    2c2a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c2c:	20 e0       	ldi	r18, 0x00	; 0
    2c2e:	30 e0       	ldi	r19, 0x00	; 0
    2c30:	40 e8       	ldi	r20, 0x80	; 128
    2c32:	5f e3       	ldi	r21, 0x3F	; 63
    2c34:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c38:	88 23       	and	r24, r24
    2c3a:	2c f4       	brge	.+10     	; 0x2c46 <LCD_displayCharacter+0x5f8>
		__ticks = 1;
    2c3c:	81 e0       	ldi	r24, 0x01	; 1
    2c3e:	90 e0       	ldi	r25, 0x00	; 0
    2c40:	9a a3       	std	Y+34, r25	; 0x22
    2c42:	89 a3       	std	Y+33, r24	; 0x21
    2c44:	3f c0       	rjmp	.+126    	; 0x2cc4 <LCD_displayCharacter+0x676>
	else if (__tmp > 65535)
    2c46:	6b a1       	ldd	r22, Y+35	; 0x23
    2c48:	7c a1       	ldd	r23, Y+36	; 0x24
    2c4a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c4c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	3f ef       	ldi	r19, 0xFF	; 255
    2c52:	4f e7       	ldi	r20, 0x7F	; 127
    2c54:	57 e4       	ldi	r21, 0x47	; 71
    2c56:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c5a:	18 16       	cp	r1, r24
    2c5c:	4c f5       	brge	.+82     	; 0x2cb0 <LCD_displayCharacter+0x662>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c5e:	6f a1       	ldd	r22, Y+39	; 0x27
    2c60:	78 a5       	ldd	r23, Y+40	; 0x28
    2c62:	89 a5       	ldd	r24, Y+41	; 0x29
    2c64:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c66:	20 e0       	ldi	r18, 0x00	; 0
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	40 e2       	ldi	r20, 0x20	; 32
    2c6c:	51 e4       	ldi	r21, 0x41	; 65
    2c6e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c72:	dc 01       	movw	r26, r24
    2c74:	cb 01       	movw	r24, r22
    2c76:	bc 01       	movw	r22, r24
    2c78:	cd 01       	movw	r24, r26
    2c7a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7e:	dc 01       	movw	r26, r24
    2c80:	cb 01       	movw	r24, r22
    2c82:	9a a3       	std	Y+34, r25	; 0x22
    2c84:	89 a3       	std	Y+33, r24	; 0x21
    2c86:	0f c0       	rjmp	.+30     	; 0x2ca6 <LCD_displayCharacter+0x658>
    2c88:	80 e9       	ldi	r24, 0x90	; 144
    2c8a:	91 e0       	ldi	r25, 0x01	; 1
    2c8c:	98 a3       	std	Y+32, r25	; 0x20
    2c8e:	8f 8f       	std	Y+31, r24	; 0x1f
    2c90:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c92:	98 a1       	ldd	r25, Y+32	; 0x20
    2c94:	01 97       	sbiw	r24, 0x01	; 1
    2c96:	f1 f7       	brne	.-4      	; 0x2c94 <LCD_displayCharacter+0x646>
    2c98:	98 a3       	std	Y+32, r25	; 0x20
    2c9a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c9c:	89 a1       	ldd	r24, Y+33	; 0x21
    2c9e:	9a a1       	ldd	r25, Y+34	; 0x22
    2ca0:	01 97       	sbiw	r24, 0x01	; 1
    2ca2:	9a a3       	std	Y+34, r25	; 0x22
    2ca4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ca6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ca8:	9a a1       	ldd	r25, Y+34	; 0x22
    2caa:	00 97       	sbiw	r24, 0x00	; 0
    2cac:	69 f7       	brne	.-38     	; 0x2c88 <LCD_displayCharacter+0x63a>
    2cae:	14 c0       	rjmp	.+40     	; 0x2cd8 <LCD_displayCharacter+0x68a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cb0:	6b a1       	ldd	r22, Y+35	; 0x23
    2cb2:	7c a1       	ldd	r23, Y+36	; 0x24
    2cb4:	8d a1       	ldd	r24, Y+37	; 0x25
    2cb6:	9e a1       	ldd	r25, Y+38	; 0x26
    2cb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cbc:	dc 01       	movw	r26, r24
    2cbe:	cb 01       	movw	r24, r22
    2cc0:	9a a3       	std	Y+34, r25	; 0x22
    2cc2:	89 a3       	std	Y+33, r24	; 0x21
    2cc4:	89 a1       	ldd	r24, Y+33	; 0x21
    2cc6:	9a a1       	ldd	r25, Y+34	; 0x22
    2cc8:	9e 8f       	std	Y+30, r25	; 0x1e
    2cca:	8d 8f       	std	Y+29, r24	; 0x1d
    2ccc:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cce:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cd0:	01 97       	sbiw	r24, 0x01	; 1
    2cd2:	f1 f7       	brne	.-4      	; 0x2cd0 <LCD_displayCharacter+0x682>
    2cd4:	9e 8f       	std	Y+30, r25	; 0x1e
    2cd6:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */

	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB4_PIN_ID,GET_BIT(data,0));
    2cd8:	fe 01       	movw	r30, r28
    2cda:	ed 59       	subi	r30, 0x9D	; 157
    2cdc:	ff 4f       	sbci	r31, 0xFF	; 255
    2cde:	80 81       	ld	r24, Z
    2ce0:	98 2f       	mov	r25, r24
    2ce2:	91 70       	andi	r25, 0x01	; 1
    2ce4:	80 e0       	ldi	r24, 0x00	; 0
    2ce6:	63 e0       	ldi	r22, 0x03	; 3
    2ce8:	49 2f       	mov	r20, r25
    2cea:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB5_PIN_ID,GET_BIT(data,1));
    2cee:	fe 01       	movw	r30, r28
    2cf0:	ed 59       	subi	r30, 0x9D	; 157
    2cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf4:	80 81       	ld	r24, Z
    2cf6:	88 2f       	mov	r24, r24
    2cf8:	90 e0       	ldi	r25, 0x00	; 0
    2cfa:	82 70       	andi	r24, 0x02	; 2
    2cfc:	90 70       	andi	r25, 0x00	; 0
    2cfe:	95 95       	asr	r25
    2d00:	87 95       	ror	r24
    2d02:	98 2f       	mov	r25, r24
    2d04:	80 e0       	ldi	r24, 0x00	; 0
    2d06:	64 e0       	ldi	r22, 0x04	; 4
    2d08:	49 2f       	mov	r20, r25
    2d0a:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB6_PIN_ID,GET_BIT(data,2));
    2d0e:	fe 01       	movw	r30, r28
    2d10:	ed 59       	subi	r30, 0x9D	; 157
    2d12:	ff 4f       	sbci	r31, 0xFF	; 255
    2d14:	80 81       	ld	r24, Z
    2d16:	88 2f       	mov	r24, r24
    2d18:	90 e0       	ldi	r25, 0x00	; 0
    2d1a:	84 70       	andi	r24, 0x04	; 4
    2d1c:	90 70       	andi	r25, 0x00	; 0
    2d1e:	95 95       	asr	r25
    2d20:	87 95       	ror	r24
    2d22:	95 95       	asr	r25
    2d24:	87 95       	ror	r24
    2d26:	98 2f       	mov	r25, r24
    2d28:	80 e0       	ldi	r24, 0x00	; 0
    2d2a:	65 e0       	ldi	r22, 0x05	; 5
    2d2c:	49 2f       	mov	r20, r25
    2d2e:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
	GPIO_writePin(LCD_DATA_PORT_ID,LCD_DB7_PIN_ID,GET_BIT(data,3));
    2d32:	fe 01       	movw	r30, r28
    2d34:	ed 59       	subi	r30, 0x9D	; 157
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	80 81       	ld	r24, Z
    2d3a:	88 2f       	mov	r24, r24
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	88 70       	andi	r24, 0x08	; 8
    2d40:	90 70       	andi	r25, 0x00	; 0
    2d42:	95 95       	asr	r25
    2d44:	87 95       	ror	r24
    2d46:	95 95       	asr	r25
    2d48:	87 95       	ror	r24
    2d4a:	95 95       	asr	r25
    2d4c:	87 95       	ror	r24
    2d4e:	98 2f       	mov	r25, r24
    2d50:	80 e0       	ldi	r24, 0x00	; 0
    2d52:	66 e0       	ldi	r22, 0x06	; 6
    2d54:	49 2f       	mov	r20, r25
    2d56:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	a0 e8       	ldi	r26, 0x80	; 128
    2d60:	bf e3       	ldi	r27, 0x3F	; 63
    2d62:	89 8f       	std	Y+25, r24	; 0x19
    2d64:	9a 8f       	std	Y+26, r25	; 0x1a
    2d66:	ab 8f       	std	Y+27, r26	; 0x1b
    2d68:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6a:	69 8d       	ldd	r22, Y+25	; 0x19
    2d6c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d6e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d70:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	4a e7       	ldi	r20, 0x7A	; 122
    2d78:	55 e4       	ldi	r21, 0x45	; 69
    2d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	8d 8b       	std	Y+21, r24	; 0x15
    2d84:	9e 8b       	std	Y+22, r25	; 0x16
    2d86:	af 8b       	std	Y+23, r26	; 0x17
    2d88:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d8a:	6d 89       	ldd	r22, Y+21	; 0x15
    2d8c:	7e 89       	ldd	r23, Y+22	; 0x16
    2d8e:	8f 89       	ldd	r24, Y+23	; 0x17
    2d90:	98 8d       	ldd	r25, Y+24	; 0x18
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e8       	ldi	r20, 0x80	; 128
    2d98:	5f e3       	ldi	r21, 0x3F	; 63
    2d9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d9e:	88 23       	and	r24, r24
    2da0:	2c f4       	brge	.+10     	; 0x2dac <LCD_displayCharacter+0x75e>
		__ticks = 1;
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	9c 8b       	std	Y+20, r25	; 0x14
    2da8:	8b 8b       	std	Y+19, r24	; 0x13
    2daa:	3f c0       	rjmp	.+126    	; 0x2e2a <LCD_displayCharacter+0x7dc>
	else if (__tmp > 65535)
    2dac:	6d 89       	ldd	r22, Y+21	; 0x15
    2dae:	7e 89       	ldd	r23, Y+22	; 0x16
    2db0:	8f 89       	ldd	r24, Y+23	; 0x17
    2db2:	98 8d       	ldd	r25, Y+24	; 0x18
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	3f ef       	ldi	r19, 0xFF	; 255
    2db8:	4f e7       	ldi	r20, 0x7F	; 127
    2dba:	57 e4       	ldi	r21, 0x47	; 71
    2dbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc0:	18 16       	cp	r1, r24
    2dc2:	4c f5       	brge	.+82     	; 0x2e16 <LCD_displayCharacter+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc4:	69 8d       	ldd	r22, Y+25	; 0x19
    2dc6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dc8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2dca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e2       	ldi	r20, 0x20	; 32
    2dd2:	51 e4       	ldi	r21, 0x41	; 65
    2dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	bc 01       	movw	r22, r24
    2dde:	cd 01       	movw	r24, r26
    2de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	9c 8b       	std	Y+20, r25	; 0x14
    2dea:	8b 8b       	std	Y+19, r24	; 0x13
    2dec:	0f c0       	rjmp	.+30     	; 0x2e0c <LCD_displayCharacter+0x7be>
    2dee:	80 e9       	ldi	r24, 0x90	; 144
    2df0:	91 e0       	ldi	r25, 0x01	; 1
    2df2:	9a 8b       	std	Y+18, r25	; 0x12
    2df4:	89 8b       	std	Y+17, r24	; 0x11
    2df6:	89 89       	ldd	r24, Y+17	; 0x11
    2df8:	9a 89       	ldd	r25, Y+18	; 0x12
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	f1 f7       	brne	.-4      	; 0x2dfa <LCD_displayCharacter+0x7ac>
    2dfe:	9a 8b       	std	Y+18, r25	; 0x12
    2e00:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e02:	8b 89       	ldd	r24, Y+19	; 0x13
    2e04:	9c 89       	ldd	r25, Y+20	; 0x14
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	9c 8b       	std	Y+20, r25	; 0x14
    2e0a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e0e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	69 f7       	brne	.-38     	; 0x2dee <LCD_displayCharacter+0x7a0>
    2e14:	14 c0       	rjmp	.+40     	; 0x2e3e <LCD_displayCharacter+0x7f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e16:	6d 89       	ldd	r22, Y+21	; 0x15
    2e18:	7e 89       	ldd	r23, Y+22	; 0x16
    2e1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	9c 8b       	std	Y+20, r25	; 0x14
    2e28:	8b 8b       	std	Y+19, r24	; 0x13
    2e2a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e2c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e2e:	98 8b       	std	Y+16, r25	; 0x10
    2e30:	8f 87       	std	Y+15, r24	; 0x0f
    2e32:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e34:	98 89       	ldd	r25, Y+16	; 0x10
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <LCD_displayCharacter+0x7e8>
    2e3a:	98 8b       	std	Y+16, r25	; 0x10
    2e3c:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2e3e:	80 e0       	ldi	r24, 0x00	; 0
    2e40:	62 e0       	ldi	r22, 0x02	; 2
    2e42:	40 e0       	ldi	r20, 0x00	; 0
    2e44:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	a0 e8       	ldi	r26, 0x80	; 128
    2e4e:	bf e3       	ldi	r27, 0x3F	; 63
    2e50:	8b 87       	std	Y+11, r24	; 0x0b
    2e52:	9c 87       	std	Y+12, r25	; 0x0c
    2e54:	ad 87       	std	Y+13, r26	; 0x0d
    2e56:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e58:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e5a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e5c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e5e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	4a e7       	ldi	r20, 0x7A	; 122
    2e66:	55 e4       	ldi	r21, 0x45	; 69
    2e68:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	8f 83       	std	Y+7, r24	; 0x07
    2e72:	98 87       	std	Y+8, r25	; 0x08
    2e74:	a9 87       	std	Y+9, r26	; 0x09
    2e76:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e78:	6f 81       	ldd	r22, Y+7	; 0x07
    2e7a:	78 85       	ldd	r23, Y+8	; 0x08
    2e7c:	89 85       	ldd	r24, Y+9	; 0x09
    2e7e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e80:	20 e0       	ldi	r18, 0x00	; 0
    2e82:	30 e0       	ldi	r19, 0x00	; 0
    2e84:	40 e8       	ldi	r20, 0x80	; 128
    2e86:	5f e3       	ldi	r21, 0x3F	; 63
    2e88:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e8c:	88 23       	and	r24, r24
    2e8e:	2c f4       	brge	.+10     	; 0x2e9a <LCD_displayCharacter+0x84c>
		__ticks = 1;
    2e90:	81 e0       	ldi	r24, 0x01	; 1
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	9e 83       	std	Y+6, r25	; 0x06
    2e96:	8d 83       	std	Y+5, r24	; 0x05
    2e98:	3f c0       	rjmp	.+126    	; 0x2f18 <LCD_displayCharacter+0x8ca>
	else if (__tmp > 65535)
    2e9a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e9c:	78 85       	ldd	r23, Y+8	; 0x08
    2e9e:	89 85       	ldd	r24, Y+9	; 0x09
    2ea0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea2:	20 e0       	ldi	r18, 0x00	; 0
    2ea4:	3f ef       	ldi	r19, 0xFF	; 255
    2ea6:	4f e7       	ldi	r20, 0x7F	; 127
    2ea8:	57 e4       	ldi	r21, 0x47	; 71
    2eaa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eae:	18 16       	cp	r1, r24
    2eb0:	4c f5       	brge	.+82     	; 0x2f04 <LCD_displayCharacter+0x8b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2eb4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2eb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2eb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2eba:	20 e0       	ldi	r18, 0x00	; 0
    2ebc:	30 e0       	ldi	r19, 0x00	; 0
    2ebe:	40 e2       	ldi	r20, 0x20	; 32
    2ec0:	51 e4       	ldi	r21, 0x41	; 65
    2ec2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec6:	dc 01       	movw	r26, r24
    2ec8:	cb 01       	movw	r24, r22
    2eca:	bc 01       	movw	r22, r24
    2ecc:	cd 01       	movw	r24, r26
    2ece:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed2:	dc 01       	movw	r26, r24
    2ed4:	cb 01       	movw	r24, r22
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
    2eda:	0f c0       	rjmp	.+30     	; 0x2efa <LCD_displayCharacter+0x8ac>
    2edc:	80 e9       	ldi	r24, 0x90	; 144
    2ede:	91 e0       	ldi	r25, 0x01	; 1
    2ee0:	9c 83       	std	Y+4, r25	; 0x04
    2ee2:	8b 83       	std	Y+3, r24	; 0x03
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ee8:	01 97       	sbiw	r24, 0x01	; 1
    2eea:	f1 f7       	brne	.-4      	; 0x2ee8 <LCD_displayCharacter+0x89a>
    2eec:	9c 83       	std	Y+4, r25	; 0x04
    2eee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef4:	01 97       	sbiw	r24, 0x01	; 1
    2ef6:	9e 83       	std	Y+6, r25	; 0x06
    2ef8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efa:	8d 81       	ldd	r24, Y+5	; 0x05
    2efc:	9e 81       	ldd	r25, Y+6	; 0x06
    2efe:	00 97       	sbiw	r24, 0x00	; 0
    2f00:	69 f7       	brne	.-38     	; 0x2edc <LCD_displayCharacter+0x88e>
    2f02:	14 c0       	rjmp	.+40     	; 0x2f2c <LCD_displayCharacter+0x8de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f04:	6f 81       	ldd	r22, Y+7	; 0x07
    2f06:	78 85       	ldd	r23, Y+8	; 0x08
    2f08:	89 85       	ldd	r24, Y+9	; 0x09
    2f0a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f10:	dc 01       	movw	r26, r24
    2f12:	cb 01       	movw	r24, r22
    2f14:	9e 83       	std	Y+6, r25	; 0x06
    2f16:	8d 83       	std	Y+5, r24	; 0x05
    2f18:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2f1c:	9a 83       	std	Y+2, r25	; 0x02
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    2f20:	89 81       	ldd	r24, Y+1	; 0x01
    2f22:	9a 81       	ldd	r25, Y+2	; 0x02
    2f24:	01 97       	sbiw	r24, 0x01	; 1
    2f26:	f1 f7       	brne	.-4      	; 0x2f24 <LCD_displayCharacter+0x8d6>
    2f28:	9a 83       	std	Y+2, r25	; 0x02
    2f2a:	89 83       	std	Y+1, r24	; 0x01
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2f2c:	cd 59       	subi	r28, 0x9D	; 157
    2f2e:	df 4f       	sbci	r29, 0xFF	; 255
    2f30:	0f b6       	in	r0, 0x3f	; 63
    2f32:	f8 94       	cli
    2f34:	de bf       	out	0x3e, r29	; 62
    2f36:	0f be       	out	0x3f, r0	; 63
    2f38:	cd bf       	out	0x3d, r28	; 61
    2f3a:	cf 91       	pop	r28
    2f3c:	df 91       	pop	r29
    2f3e:	1f 91       	pop	r17
    2f40:	0f 91       	pop	r16
    2f42:	08 95       	ret

00002f44 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2f44:	df 93       	push	r29
    2f46:	cf 93       	push	r28
    2f48:	00 d0       	rcall	.+0      	; 0x2f4a <LCD_displayString+0x6>
    2f4a:	0f 92       	push	r0
    2f4c:	cd b7       	in	r28, 0x3d	; 61
    2f4e:	de b7       	in	r29, 0x3e	; 62
    2f50:	9b 83       	std	Y+3, r25	; 0x03
    2f52:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2f54:	19 82       	std	Y+1, r1	; 0x01
    2f56:	0e c0       	rjmp	.+28     	; 0x2f74 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2f58:	89 81       	ldd	r24, Y+1	; 0x01
    2f5a:	28 2f       	mov	r18, r24
    2f5c:	30 e0       	ldi	r19, 0x00	; 0
    2f5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f60:	9b 81       	ldd	r25, Y+3	; 0x03
    2f62:	fc 01       	movw	r30, r24
    2f64:	e2 0f       	add	r30, r18
    2f66:	f3 1f       	adc	r31, r19
    2f68:	80 81       	ld	r24, Z
    2f6a:	0e 94 27 13 	call	0x264e	; 0x264e <LCD_displayCharacter>
		i++;
    2f6e:	89 81       	ldd	r24, Y+1	; 0x01
    2f70:	8f 5f       	subi	r24, 0xFF	; 255
    2f72:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2f74:	89 81       	ldd	r24, Y+1	; 0x01
    2f76:	28 2f       	mov	r18, r24
    2f78:	30 e0       	ldi	r19, 0x00	; 0
    2f7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2f7c:	9b 81       	ldd	r25, Y+3	; 0x03
    2f7e:	fc 01       	movw	r30, r24
    2f80:	e2 0f       	add	r30, r18
    2f82:	f3 1f       	adc	r31, r19
    2f84:	80 81       	ld	r24, Z
    2f86:	88 23       	and	r24, r24
    2f88:	39 f7       	brne	.-50     	; 0x2f58 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2f8a:	0f 90       	pop	r0
    2f8c:	0f 90       	pop	r0
    2f8e:	0f 90       	pop	r0
    2f90:	cf 91       	pop	r28
    2f92:	df 91       	pop	r29
    2f94:	08 95       	ret

00002f96 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2f96:	df 93       	push	r29
    2f98:	cf 93       	push	r28
    2f9a:	00 d0       	rcall	.+0      	; 0x2f9c <LCD_moveCursor+0x6>
    2f9c:	00 d0       	rcall	.+0      	; 0x2f9e <LCD_moveCursor+0x8>
    2f9e:	0f 92       	push	r0
    2fa0:	cd b7       	in	r28, 0x3d	; 61
    2fa2:	de b7       	in	r29, 0x3e	; 62
    2fa4:	8a 83       	std	Y+2, r24	; 0x02
    2fa6:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    2faa:	28 2f       	mov	r18, r24
    2fac:	30 e0       	ldi	r19, 0x00	; 0
    2fae:	3d 83       	std	Y+5, r19	; 0x05
    2fb0:	2c 83       	std	Y+4, r18	; 0x04
    2fb2:	8c 81       	ldd	r24, Y+4	; 0x04
    2fb4:	9d 81       	ldd	r25, Y+5	; 0x05
    2fb6:	81 30       	cpi	r24, 0x01	; 1
    2fb8:	91 05       	cpc	r25, r1
    2fba:	c1 f0       	breq	.+48     	; 0x2fec <LCD_moveCursor+0x56>
    2fbc:	2c 81       	ldd	r18, Y+4	; 0x04
    2fbe:	3d 81       	ldd	r19, Y+5	; 0x05
    2fc0:	22 30       	cpi	r18, 0x02	; 2
    2fc2:	31 05       	cpc	r19, r1
    2fc4:	2c f4       	brge	.+10     	; 0x2fd0 <LCD_moveCursor+0x3a>
    2fc6:	8c 81       	ldd	r24, Y+4	; 0x04
    2fc8:	9d 81       	ldd	r25, Y+5	; 0x05
    2fca:	00 97       	sbiw	r24, 0x00	; 0
    2fcc:	61 f0       	breq	.+24     	; 0x2fe6 <LCD_moveCursor+0x50>
    2fce:	19 c0       	rjmp	.+50     	; 0x3002 <LCD_moveCursor+0x6c>
    2fd0:	2c 81       	ldd	r18, Y+4	; 0x04
    2fd2:	3d 81       	ldd	r19, Y+5	; 0x05
    2fd4:	22 30       	cpi	r18, 0x02	; 2
    2fd6:	31 05       	cpc	r19, r1
    2fd8:	69 f0       	breq	.+26     	; 0x2ff4 <LCD_moveCursor+0x5e>
    2fda:	8c 81       	ldd	r24, Y+4	; 0x04
    2fdc:	9d 81       	ldd	r25, Y+5	; 0x05
    2fde:	83 30       	cpi	r24, 0x03	; 3
    2fe0:	91 05       	cpc	r25, r1
    2fe2:	61 f0       	breq	.+24     	; 0x2ffc <LCD_moveCursor+0x66>
    2fe4:	0e c0       	rjmp	.+28     	; 0x3002 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2fe6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fe8:	89 83       	std	Y+1, r24	; 0x01
    2fea:	0b c0       	rjmp	.+22     	; 0x3002 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2fec:	8b 81       	ldd	r24, Y+3	; 0x03
    2fee:	80 5c       	subi	r24, 0xC0	; 192
    2ff0:	89 83       	std	Y+1, r24	; 0x01
    2ff2:	07 c0       	rjmp	.+14     	; 0x3002 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff6:	80 5f       	subi	r24, 0xF0	; 240
    2ff8:	89 83       	std	Y+1, r24	; 0x01
    2ffa:	03 c0       	rjmp	.+6      	; 0x3002 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2ffc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ffe:	80 5b       	subi	r24, 0xB0	; 176
    3000:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    3002:	89 81       	ldd	r24, Y+1	; 0x01
    3004:	80 68       	ori	r24, 0x80	; 128
    3006:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_sendCommand>
}
    300a:	0f 90       	pop	r0
    300c:	0f 90       	pop	r0
    300e:	0f 90       	pop	r0
    3010:	0f 90       	pop	r0
    3012:	0f 90       	pop	r0
    3014:	cf 91       	pop	r28
    3016:	df 91       	pop	r29
    3018:	08 95       	ret

0000301a <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    301a:	df 93       	push	r29
    301c:	cf 93       	push	r28
    301e:	00 d0       	rcall	.+0      	; 0x3020 <LCD_displayStringRowColumn+0x6>
    3020:	00 d0       	rcall	.+0      	; 0x3022 <LCD_displayStringRowColumn+0x8>
    3022:	cd b7       	in	r28, 0x3d	; 61
    3024:	de b7       	in	r29, 0x3e	; 62
    3026:	89 83       	std	Y+1, r24	; 0x01
    3028:	6a 83       	std	Y+2, r22	; 0x02
    302a:	5c 83       	std	Y+4, r21	; 0x04
    302c:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    302e:	89 81       	ldd	r24, Y+1	; 0x01
    3030:	6a 81       	ldd	r22, Y+2	; 0x02
    3032:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    3036:	8b 81       	ldd	r24, Y+3	; 0x03
    3038:	9c 81       	ldd	r25, Y+4	; 0x04
    303a:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <LCD_displayString>
}
    303e:	0f 90       	pop	r0
    3040:	0f 90       	pop	r0
    3042:	0f 90       	pop	r0
    3044:	0f 90       	pop	r0
    3046:	cf 91       	pop	r28
    3048:	df 91       	pop	r29
    304a:	08 95       	ret

0000304c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    304c:	df 93       	push	r29
    304e:	cf 93       	push	r28
    3050:	cd b7       	in	r28, 0x3d	; 61
    3052:	de b7       	in	r29, 0x3e	; 62
    3054:	62 97       	sbiw	r28, 0x12	; 18
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	de bf       	out	0x3e, r29	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	cd bf       	out	0x3d, r28	; 61
    3060:	9a 8b       	std	Y+18, r25	; 0x12
    3062:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    3064:	89 89       	ldd	r24, Y+17	; 0x11
    3066:	9a 89       	ldd	r25, Y+18	; 0x12
    3068:	9e 01       	movw	r18, r28
    306a:	2f 5f       	subi	r18, 0xFF	; 255
    306c:	3f 4f       	sbci	r19, 0xFF	; 255
    306e:	b9 01       	movw	r22, r18
    3070:	4a e0       	ldi	r20, 0x0A	; 10
    3072:	50 e0       	ldi	r21, 0x00	; 0
    3074:	0e 94 d1 19 	call	0x33a2	; 0x33a2 <itoa>
   LCD_displayString(buff); /* Display the string */
    3078:	ce 01       	movw	r24, r28
    307a:	01 96       	adiw	r24, 0x01	; 1
    307c:	0e 94 a2 17 	call	0x2f44	; 0x2f44 <LCD_displayString>
}
    3080:	62 96       	adiw	r28, 0x12	; 18
    3082:	0f b6       	in	r0, 0x3f	; 63
    3084:	f8 94       	cli
    3086:	de bf       	out	0x3e, r29	; 62
    3088:	0f be       	out	0x3f, r0	; 63
    308a:	cd bf       	out	0x3d, r28	; 61
    308c:	cf 91       	pop	r28
    308e:	df 91       	pop	r29
    3090:	08 95       	ret

00003092 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    3092:	df 93       	push	r29
    3094:	cf 93       	push	r28
    3096:	cd b7       	in	r28, 0x3d	; 61
    3098:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <LCD_sendCommand>
}
    30a0:	cf 91       	pop	r28
    30a2:	df 91       	pop	r29
    30a4:	08 95       	ret

000030a6 <Ultrasonic_init>:
 * This function initializes the ultrasonic sensor by setting the trigger pin as output
 * and configuring the ICU (Input Capture Unit) to detect the echo signal on the rising edge.
 * It also sets up the callback function for edge processing (ISR).
 */
void Ultrasonic_init(void)
{
    30a6:	df 93       	push	r29
    30a8:	cf 93       	push	r28
    30aa:	00 d0       	rcall	.+0      	; 0x30ac <Ultrasonic_init+0x6>
    30ac:	cd b7       	in	r28, 0x3d	; 61
    30ae:	de b7       	in	r29, 0x3e	; 62
    /* Set the trigger pin as output */
    GPIO_setupPinDirection(UltraSonic_TRIGGER_PORT_ID, UltraSonic_TRIGGER_PIN_ID, PIN_OUTPUT);
    30b0:	83 e0       	ldi	r24, 0x03	; 3
    30b2:	67 e0       	ldi	r22, 0x07	; 7
    30b4:	41 e0       	ldi	r20, 0x01	; 1
    30b6:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <GPIO_setupPinDirection>

    /* Configure ICU to use a prescaler of F_CPU/8 and detect the rising edge */
    ICU_ConfigType ICU_Config = {F_CPU_8, RAISING};
    30ba:	82 e0       	ldi	r24, 0x02	; 2
    30bc:	89 83       	std	Y+1, r24	; 0x01
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	8a 83       	std	Y+2, r24	; 0x02
    ICU_init(&ICU_Config);
    30c2:	ce 01       	movw	r24, r28
    30c4:	01 96       	adiw	r24, 0x01	; 1
    30c6:	0e 94 4a 0d 	call	0x1a94	; 0x1a94 <ICU_init>

    /* Set the callback function to handle edge detection */
    ICU_setCallBack(Ultrasonic_edgeProcessing);
    30ca:	87 e7       	ldi	r24, 0x77	; 119
    30cc:	99 e1       	ldi	r25, 0x19	; 25
    30ce:	0e 94 93 0d 	call	0x1b26	; 0x1b26 <ICU_setCallBack>
}
    30d2:	0f 90       	pop	r0
    30d4:	0f 90       	pop	r0
    30d6:	cf 91       	pop	r28
    30d8:	df 91       	pop	r29
    30da:	08 95       	ret

000030dc <Ultrasonic_Trigger>:
 * Sends a trigger pulse to the ultrasonic sensor.
 * The pulse is high for a short duration (defined by TRIGGER_DELAY_VALUE)
 * and then pulled low, which triggers the ultrasonic sensor to send out a sound wave.
 */
void Ultrasonic_Trigger(void)
{
    30dc:	df 93       	push	r29
    30de:	cf 93       	push	r28
    30e0:	cd b7       	in	r28, 0x3d	; 61
    30e2:	de b7       	in	r29, 0x3e	; 62
    30e4:	68 97       	sbiw	r28, 0x18	; 24
    30e6:	0f b6       	in	r0, 0x3f	; 63
    30e8:	f8 94       	cli
    30ea:	de bf       	out	0x3e, r29	; 62
    30ec:	0f be       	out	0x3f, r0	; 63
    30ee:	cd bf       	out	0x3d, r28	; 61
    /* Set trigger pin high */
    GPIO_writePin(UltraSonic_TRIGGER_PORT_ID, UltraSonic_TRIGGER_PIN_ID, LOGIC_HIGH);
    30f0:	83 e0       	ldi	r24, 0x03	; 3
    30f2:	67 e0       	ldi	r22, 0x07	; 7
    30f4:	41 e0       	ldi	r20, 0x01	; 1
    30f6:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
    30fa:	80 e0       	ldi	r24, 0x00	; 0
    30fc:	90 e0       	ldi	r25, 0x00	; 0
    30fe:	a0 e7       	ldi	r26, 0x70	; 112
    3100:	b1 e4       	ldi	r27, 0x41	; 65
    3102:	8d 8b       	std	Y+21, r24	; 0x15
    3104:	9e 8b       	std	Y+22, r25	; 0x16
    3106:	af 8b       	std	Y+23, r26	; 0x17
    3108:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    310a:	6d 89       	ldd	r22, Y+21	; 0x15
    310c:	7e 89       	ldd	r23, Y+22	; 0x16
    310e:	8f 89       	ldd	r24, Y+23	; 0x17
    3110:	98 8d       	ldd	r25, Y+24	; 0x18
    3112:	2b ea       	ldi	r18, 0xAB	; 171
    3114:	3a ea       	ldi	r19, 0xAA	; 170
    3116:	4a ea       	ldi	r20, 0xAA	; 170
    3118:	50 e4       	ldi	r21, 0x40	; 64
    311a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    311e:	dc 01       	movw	r26, r24
    3120:	cb 01       	movw	r24, r22
    3122:	89 8b       	std	Y+17, r24	; 0x11
    3124:	9a 8b       	std	Y+18, r25	; 0x12
    3126:	ab 8b       	std	Y+19, r26	; 0x13
    3128:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    312a:	69 89       	ldd	r22, Y+17	; 0x11
    312c:	7a 89       	ldd	r23, Y+18	; 0x12
    312e:	8b 89       	ldd	r24, Y+19	; 0x13
    3130:	9c 89       	ldd	r25, Y+20	; 0x14
    3132:	20 e0       	ldi	r18, 0x00	; 0
    3134:	30 e0       	ldi	r19, 0x00	; 0
    3136:	40 e8       	ldi	r20, 0x80	; 128
    3138:	5f e3       	ldi	r21, 0x3F	; 63
    313a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    313e:	88 23       	and	r24, r24
    3140:	1c f4       	brge	.+6      	; 0x3148 <Ultrasonic_Trigger+0x6c>
		__ticks = 1;
    3142:	81 e0       	ldi	r24, 0x01	; 1
    3144:	88 8b       	std	Y+16, r24	; 0x10
    3146:	91 c0       	rjmp	.+290    	; 0x326a <Ultrasonic_Trigger+0x18e>
	else if (__tmp > 255)
    3148:	69 89       	ldd	r22, Y+17	; 0x11
    314a:	7a 89       	ldd	r23, Y+18	; 0x12
    314c:	8b 89       	ldd	r24, Y+19	; 0x13
    314e:	9c 89       	ldd	r25, Y+20	; 0x14
    3150:	20 e0       	ldi	r18, 0x00	; 0
    3152:	30 e0       	ldi	r19, 0x00	; 0
    3154:	4f e7       	ldi	r20, 0x7F	; 127
    3156:	53 e4       	ldi	r21, 0x43	; 67
    3158:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    315c:	18 16       	cp	r1, r24
    315e:	0c f0       	brlt	.+2      	; 0x3162 <Ultrasonic_Trigger+0x86>
    3160:	7b c0       	rjmp	.+246    	; 0x3258 <Ultrasonic_Trigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    3162:	6d 89       	ldd	r22, Y+21	; 0x15
    3164:	7e 89       	ldd	r23, Y+22	; 0x16
    3166:	8f 89       	ldd	r24, Y+23	; 0x17
    3168:	98 8d       	ldd	r25, Y+24	; 0x18
    316a:	20 e0       	ldi	r18, 0x00	; 0
    316c:	30 e0       	ldi	r19, 0x00	; 0
    316e:	4a e7       	ldi	r20, 0x7A	; 122
    3170:	54 e4       	ldi	r21, 0x44	; 68
    3172:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3176:	dc 01       	movw	r26, r24
    3178:	cb 01       	movw	r24, r22
    317a:	8c 87       	std	Y+12, r24	; 0x0c
    317c:	9d 87       	std	Y+13, r25	; 0x0d
    317e:	ae 87       	std	Y+14, r26	; 0x0e
    3180:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3182:	6c 85       	ldd	r22, Y+12	; 0x0c
    3184:	7d 85       	ldd	r23, Y+13	; 0x0d
    3186:	8e 85       	ldd	r24, Y+14	; 0x0e
    3188:	9f 85       	ldd	r25, Y+15	; 0x0f
    318a:	20 e0       	ldi	r18, 0x00	; 0
    318c:	30 e0       	ldi	r19, 0x00	; 0
    318e:	4a e7       	ldi	r20, 0x7A	; 122
    3190:	55 e4       	ldi	r21, 0x45	; 69
    3192:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3196:	dc 01       	movw	r26, r24
    3198:	cb 01       	movw	r24, r22
    319a:	88 87       	std	Y+8, r24	; 0x08
    319c:	99 87       	std	Y+9, r25	; 0x09
    319e:	aa 87       	std	Y+10, r26	; 0x0a
    31a0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    31a2:	68 85       	ldd	r22, Y+8	; 0x08
    31a4:	79 85       	ldd	r23, Y+9	; 0x09
    31a6:	8a 85       	ldd	r24, Y+10	; 0x0a
    31a8:	9b 85       	ldd	r25, Y+11	; 0x0b
    31aa:	20 e0       	ldi	r18, 0x00	; 0
    31ac:	30 e0       	ldi	r19, 0x00	; 0
    31ae:	40 e8       	ldi	r20, 0x80	; 128
    31b0:	5f e3       	ldi	r21, 0x3F	; 63
    31b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31b6:	88 23       	and	r24, r24
    31b8:	2c f4       	brge	.+10     	; 0x31c4 <Ultrasonic_Trigger+0xe8>
		__ticks = 1;
    31ba:	81 e0       	ldi	r24, 0x01	; 1
    31bc:	90 e0       	ldi	r25, 0x00	; 0
    31be:	9f 83       	std	Y+7, r25	; 0x07
    31c0:	8e 83       	std	Y+6, r24	; 0x06
    31c2:	3f c0       	rjmp	.+126    	; 0x3242 <Ultrasonic_Trigger+0x166>
	else if (__tmp > 65535)
    31c4:	68 85       	ldd	r22, Y+8	; 0x08
    31c6:	79 85       	ldd	r23, Y+9	; 0x09
    31c8:	8a 85       	ldd	r24, Y+10	; 0x0a
    31ca:	9b 85       	ldd	r25, Y+11	; 0x0b
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	3f ef       	ldi	r19, 0xFF	; 255
    31d0:	4f e7       	ldi	r20, 0x7F	; 127
    31d2:	57 e4       	ldi	r21, 0x47	; 71
    31d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31d8:	18 16       	cp	r1, r24
    31da:	4c f5       	brge	.+82     	; 0x322e <Ultrasonic_Trigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31dc:	6c 85       	ldd	r22, Y+12	; 0x0c
    31de:	7d 85       	ldd	r23, Y+13	; 0x0d
    31e0:	8e 85       	ldd	r24, Y+14	; 0x0e
    31e2:	9f 85       	ldd	r25, Y+15	; 0x0f
    31e4:	20 e0       	ldi	r18, 0x00	; 0
    31e6:	30 e0       	ldi	r19, 0x00	; 0
    31e8:	40 e2       	ldi	r20, 0x20	; 32
    31ea:	51 e4       	ldi	r21, 0x41	; 65
    31ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31f0:	dc 01       	movw	r26, r24
    31f2:	cb 01       	movw	r24, r22
    31f4:	bc 01       	movw	r22, r24
    31f6:	cd 01       	movw	r24, r26
    31f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    31fc:	dc 01       	movw	r26, r24
    31fe:	cb 01       	movw	r24, r22
    3200:	9f 83       	std	Y+7, r25	; 0x07
    3202:	8e 83       	std	Y+6, r24	; 0x06
    3204:	0f c0       	rjmp	.+30     	; 0x3224 <Ultrasonic_Trigger+0x148>
    3206:	80 e9       	ldi	r24, 0x90	; 144
    3208:	91 e0       	ldi	r25, 0x01	; 1
    320a:	9d 83       	std	Y+5, r25	; 0x05
    320c:	8c 83       	std	Y+4, r24	; 0x04
    320e:	8c 81       	ldd	r24, Y+4	; 0x04
    3210:	9d 81       	ldd	r25, Y+5	; 0x05
    3212:	01 97       	sbiw	r24, 0x01	; 1
    3214:	f1 f7       	brne	.-4      	; 0x3212 <Ultrasonic_Trigger+0x136>
    3216:	9d 83       	std	Y+5, r25	; 0x05
    3218:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    321a:	8e 81       	ldd	r24, Y+6	; 0x06
    321c:	9f 81       	ldd	r25, Y+7	; 0x07
    321e:	01 97       	sbiw	r24, 0x01	; 1
    3220:	9f 83       	std	Y+7, r25	; 0x07
    3222:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3224:	8e 81       	ldd	r24, Y+6	; 0x06
    3226:	9f 81       	ldd	r25, Y+7	; 0x07
    3228:	00 97       	sbiw	r24, 0x00	; 0
    322a:	69 f7       	brne	.-38     	; 0x3206 <Ultrasonic_Trigger+0x12a>
    322c:	24 c0       	rjmp	.+72     	; 0x3276 <Ultrasonic_Trigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    322e:	68 85       	ldd	r22, Y+8	; 0x08
    3230:	79 85       	ldd	r23, Y+9	; 0x09
    3232:	8a 85       	ldd	r24, Y+10	; 0x0a
    3234:	9b 85       	ldd	r25, Y+11	; 0x0b
    3236:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323a:	dc 01       	movw	r26, r24
    323c:	cb 01       	movw	r24, r22
    323e:	9f 83       	std	Y+7, r25	; 0x07
    3240:	8e 83       	std	Y+6, r24	; 0x06
    3242:	8e 81       	ldd	r24, Y+6	; 0x06
    3244:	9f 81       	ldd	r25, Y+7	; 0x07
    3246:	9b 83       	std	Y+3, r25	; 0x03
    3248:	8a 83       	std	Y+2, r24	; 0x02
    324a:	8a 81       	ldd	r24, Y+2	; 0x02
    324c:	9b 81       	ldd	r25, Y+3	; 0x03
    324e:	01 97       	sbiw	r24, 0x01	; 1
    3250:	f1 f7       	brne	.-4      	; 0x324e <Ultrasonic_Trigger+0x172>
    3252:	9b 83       	std	Y+3, r25	; 0x03
    3254:	8a 83       	std	Y+2, r24	; 0x02
    3256:	0f c0       	rjmp	.+30     	; 0x3276 <Ultrasonic_Trigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    3258:	69 89       	ldd	r22, Y+17	; 0x11
    325a:	7a 89       	ldd	r23, Y+18	; 0x12
    325c:	8b 89       	ldd	r24, Y+19	; 0x13
    325e:	9c 89       	ldd	r25, Y+20	; 0x14
    3260:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3264:	dc 01       	movw	r26, r24
    3266:	cb 01       	movw	r24, r22
    3268:	88 8b       	std	Y+16, r24	; 0x10
    326a:	88 89       	ldd	r24, Y+16	; 0x10
    326c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	8a 95       	dec	r24
    3272:	f1 f7       	brne	.-4      	; 0x3270 <Ultrasonic_Trigger+0x194>
    3274:	89 83       	std	Y+1, r24	; 0x01

    /* Wait for the required delay (at least 10µs) */
    _delay_us(TRIGGER_DELAY_VALUE);

    /* Set trigger pin low */
    GPIO_writePin(UltraSonic_TRIGGER_PORT_ID, UltraSonic_TRIGGER_PIN_ID, LOGIC_LOW);
    3276:	83 e0       	ldi	r24, 0x03	; 3
    3278:	67 e0       	ldi	r22, 0x07	; 7
    327a:	40 e0       	ldi	r20, 0x00	; 0
    327c:	0e 94 c4 0a 	call	0x1588	; 0x1588 <GPIO_writePin>
}
    3280:	68 96       	adiw	r28, 0x18	; 24
    3282:	0f b6       	in	r0, 0x3f	; 63
    3284:	f8 94       	cli
    3286:	de bf       	out	0x3e, r29	; 62
    3288:	0f be       	out	0x3f, r0	; 63
    328a:	cd bf       	out	0x3d, r28	; 61
    328c:	cf 91       	pop	r28
    328e:	df 91       	pop	r29
    3290:	08 95       	ret

00003292 <Ultrasonic_readDistance>:
 *
 * Returns:
 * The distance to the detected object in centimeters.
 */
uint16 Ultrasonic_readDistance(void)
{
    3292:	df 93       	push	r29
    3294:	cf 93       	push	r28
    3296:	cd b7       	in	r28, 0x3d	; 61
    3298:	de b7       	in	r29, 0x3e	; 62
    /* Send the trigger pulse */
    Ultrasonic_Trigger();
    329a:	0e 94 6e 18 	call	0x30dc	; 0x30dc <Ultrasonic_Trigger>

    /* Calculate distance in cm: high time / 117.6 (based on the speed of sound) */
    distance = g_highTime / 117.6;
    329e:	80 91 90 01 	lds	r24, 0x0190
    32a2:	90 91 91 01 	lds	r25, 0x0191
    32a6:	cc 01       	movw	r24, r24
    32a8:	a0 e0       	ldi	r26, 0x00	; 0
    32aa:	b0 e0       	ldi	r27, 0x00	; 0
    32ac:	bc 01       	movw	r22, r24
    32ae:	cd 01       	movw	r24, r26
    32b0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    32b4:	dc 01       	movw	r26, r24
    32b6:	cb 01       	movw	r24, r22
    32b8:	bc 01       	movw	r22, r24
    32ba:	cd 01       	movw	r24, r26
    32bc:	23 e3       	ldi	r18, 0x33	; 51
    32be:	33 e3       	ldi	r19, 0x33	; 51
    32c0:	4b ee       	ldi	r20, 0xEB	; 235
    32c2:	52 e4       	ldi	r21, 0x42	; 66
    32c4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    32c8:	dc 01       	movw	r26, r24
    32ca:	cb 01       	movw	r24, r22
    32cc:	bc 01       	movw	r22, r24
    32ce:	cd 01       	movw	r24, r26
    32d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    32d4:	dc 01       	movw	r26, r24
    32d6:	cb 01       	movw	r24, r22
    32d8:	90 93 93 01 	sts	0x0193, r25
    32dc:	80 93 92 01 	sts	0x0192, r24

    return distance;
    32e0:	80 91 92 01 	lds	r24, 0x0192
    32e4:	90 91 93 01 	lds	r25, 0x0193
}
    32e8:	cf 91       	pop	r28
    32ea:	df 91       	pop	r29
    32ec:	08 95       	ret

000032ee <Ultrasonic_edgeProcessing>:
 * On the first rising edge, it clears the ICU timer and switches to detect the falling edge.
 * On the falling edge, it records the pulse duration (high time), switches back to rising edge,
 * and resets the edge count for the next trigger.
 */
void Ultrasonic_edgeProcessing(void)
{
    32ee:	df 93       	push	r29
    32f0:	cf 93       	push	r28
    32f2:	cd b7       	in	r28, 0x3d	; 61
    32f4:	de b7       	in	r29, 0x3e	; 62
    if (g_edgeCount == 0)
    32f6:	80 91 94 01 	lds	r24, 0x0194
    32fa:	88 23       	and	r24, r24
    32fc:	49 f4       	brne	.+18     	; 0x3310 <Ultrasonic_edgeProcessing+0x22>
    {
        /* First edge: rising edge detected, start measuring the high time */
        ICU_clearTimerValue();  /* Clear the timer to start fresh */
    32fe:	0e 94 cf 0d 	call	0x1b9e	; 0x1b9e <ICU_clearTimerValue>
        ICU_setEdgeDetectionType(FALLING);  /* Switch to detect falling edge */
    3302:	80 e0       	ldi	r24, 0x00	; 0
    3304:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <ICU_setEdgeDetectionType>
        g_edgeCount = 1;  /* Increment edge count */
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	80 93 94 01 	sts	0x0194, r24
    330e:	0f c0       	rjmp	.+30     	; 0x332e <Ultrasonic_edgeProcessing+0x40>
    }
    else if (g_edgeCount == 1)
    3310:	80 91 94 01 	lds	r24, 0x0194
    3314:	81 30       	cpi	r24, 0x01	; 1
    3316:	59 f4       	brne	.+22     	; 0x332e <Ultrasonic_edgeProcessing+0x40>
    {
        /* Second edge: falling edge detected, capture the high time */
        g_highTime = ICU_getInputCaptureValue();  /* Store the captured time */
    3318:	0e 94 c4 0d 	call	0x1b88	; 0x1b88 <ICU_getInputCaptureValue>
    331c:	90 93 91 01 	sts	0x0191, r25
    3320:	80 93 90 01 	sts	0x0190, r24
        ICU_setEdgeDetectionType(RAISING);  /* Switch back to rising edge */
    3324:	81 e0       	ldi	r24, 0x01	; 1
    3326:	0e 94 a5 0d 	call	0x1b4a	; 0x1b4a <ICU_setEdgeDetectionType>
        g_edgeCount = 0;  /* Reset edge count for the next cycle */
    332a:	10 92 94 01 	sts	0x0194, r1
    }
}
    332e:	cf 91       	pop	r28
    3330:	df 91       	pop	r29
    3332:	08 95       	ret

00003334 <__prologue_saves__>:
    3334:	2f 92       	push	r2
    3336:	3f 92       	push	r3
    3338:	4f 92       	push	r4
    333a:	5f 92       	push	r5
    333c:	6f 92       	push	r6
    333e:	7f 92       	push	r7
    3340:	8f 92       	push	r8
    3342:	9f 92       	push	r9
    3344:	af 92       	push	r10
    3346:	bf 92       	push	r11
    3348:	cf 92       	push	r12
    334a:	df 92       	push	r13
    334c:	ef 92       	push	r14
    334e:	ff 92       	push	r15
    3350:	0f 93       	push	r16
    3352:	1f 93       	push	r17
    3354:	cf 93       	push	r28
    3356:	df 93       	push	r29
    3358:	cd b7       	in	r28, 0x3d	; 61
    335a:	de b7       	in	r29, 0x3e	; 62
    335c:	ca 1b       	sub	r28, r26
    335e:	db 0b       	sbc	r29, r27
    3360:	0f b6       	in	r0, 0x3f	; 63
    3362:	f8 94       	cli
    3364:	de bf       	out	0x3e, r29	; 62
    3366:	0f be       	out	0x3f, r0	; 63
    3368:	cd bf       	out	0x3d, r28	; 61
    336a:	09 94       	ijmp

0000336c <__epilogue_restores__>:
    336c:	2a 88       	ldd	r2, Y+18	; 0x12
    336e:	39 88       	ldd	r3, Y+17	; 0x11
    3370:	48 88       	ldd	r4, Y+16	; 0x10
    3372:	5f 84       	ldd	r5, Y+15	; 0x0f
    3374:	6e 84       	ldd	r6, Y+14	; 0x0e
    3376:	7d 84       	ldd	r7, Y+13	; 0x0d
    3378:	8c 84       	ldd	r8, Y+12	; 0x0c
    337a:	9b 84       	ldd	r9, Y+11	; 0x0b
    337c:	aa 84       	ldd	r10, Y+10	; 0x0a
    337e:	b9 84       	ldd	r11, Y+9	; 0x09
    3380:	c8 84       	ldd	r12, Y+8	; 0x08
    3382:	df 80       	ldd	r13, Y+7	; 0x07
    3384:	ee 80       	ldd	r14, Y+6	; 0x06
    3386:	fd 80       	ldd	r15, Y+5	; 0x05
    3388:	0c 81       	ldd	r16, Y+4	; 0x04
    338a:	1b 81       	ldd	r17, Y+3	; 0x03
    338c:	aa 81       	ldd	r26, Y+2	; 0x02
    338e:	b9 81       	ldd	r27, Y+1	; 0x01
    3390:	ce 0f       	add	r28, r30
    3392:	d1 1d       	adc	r29, r1
    3394:	0f b6       	in	r0, 0x3f	; 63
    3396:	f8 94       	cli
    3398:	de bf       	out	0x3e, r29	; 62
    339a:	0f be       	out	0x3f, r0	; 63
    339c:	cd bf       	out	0x3d, r28	; 61
    339e:	ed 01       	movw	r28, r26
    33a0:	08 95       	ret

000033a2 <itoa>:
    33a2:	fb 01       	movw	r30, r22
    33a4:	9f 01       	movw	r18, r30
    33a6:	e8 94       	clt
    33a8:	42 30       	cpi	r20, 0x02	; 2
    33aa:	c4 f0       	brlt	.+48     	; 0x33dc <itoa+0x3a>
    33ac:	45 32       	cpi	r20, 0x25	; 37
    33ae:	b4 f4       	brge	.+44     	; 0x33dc <itoa+0x3a>
    33b0:	4a 30       	cpi	r20, 0x0A	; 10
    33b2:	29 f4       	brne	.+10     	; 0x33be <itoa+0x1c>
    33b4:	97 fb       	bst	r25, 7
    33b6:	1e f4       	brtc	.+6      	; 0x33be <itoa+0x1c>
    33b8:	90 95       	com	r25
    33ba:	81 95       	neg	r24
    33bc:	9f 4f       	sbci	r25, 0xFF	; 255
    33be:	64 2f       	mov	r22, r20
    33c0:	77 27       	eor	r23, r23
    33c2:	0e 94 02 1a 	call	0x3404	; 0x3404 <__udivmodhi4>
    33c6:	80 5d       	subi	r24, 0xD0	; 208
    33c8:	8a 33       	cpi	r24, 0x3A	; 58
    33ca:	0c f0       	brlt	.+2      	; 0x33ce <itoa+0x2c>
    33cc:	89 5d       	subi	r24, 0xD9	; 217
    33ce:	81 93       	st	Z+, r24
    33d0:	cb 01       	movw	r24, r22
    33d2:	00 97       	sbiw	r24, 0x00	; 0
    33d4:	a1 f7       	brne	.-24     	; 0x33be <itoa+0x1c>
    33d6:	16 f4       	brtc	.+4      	; 0x33dc <itoa+0x3a>
    33d8:	5d e2       	ldi	r21, 0x2D	; 45
    33da:	51 93       	st	Z+, r21
    33dc:	10 82       	st	Z, r1
    33de:	c9 01       	movw	r24, r18
    33e0:	0c 94 f2 19 	jmp	0x33e4	; 0x33e4 <strrev>

000033e4 <strrev>:
    33e4:	dc 01       	movw	r26, r24
    33e6:	fc 01       	movw	r30, r24
    33e8:	67 2f       	mov	r22, r23
    33ea:	71 91       	ld	r23, Z+
    33ec:	77 23       	and	r23, r23
    33ee:	e1 f7       	brne	.-8      	; 0x33e8 <strrev+0x4>
    33f0:	32 97       	sbiw	r30, 0x02	; 2
    33f2:	04 c0       	rjmp	.+8      	; 0x33fc <strrev+0x18>
    33f4:	7c 91       	ld	r23, X
    33f6:	6d 93       	st	X+, r22
    33f8:	70 83       	st	Z, r23
    33fa:	62 91       	ld	r22, -Z
    33fc:	ae 17       	cp	r26, r30
    33fe:	bf 07       	cpc	r27, r31
    3400:	c8 f3       	brcs	.-14     	; 0x33f4 <strrev+0x10>
    3402:	08 95       	ret

00003404 <__udivmodhi4>:
    3404:	aa 1b       	sub	r26, r26
    3406:	bb 1b       	sub	r27, r27
    3408:	51 e1       	ldi	r21, 0x11	; 17
    340a:	07 c0       	rjmp	.+14     	; 0x341a <__udivmodhi4_ep>

0000340c <__udivmodhi4_loop>:
    340c:	aa 1f       	adc	r26, r26
    340e:	bb 1f       	adc	r27, r27
    3410:	a6 17       	cp	r26, r22
    3412:	b7 07       	cpc	r27, r23
    3414:	10 f0       	brcs	.+4      	; 0x341a <__udivmodhi4_ep>
    3416:	a6 1b       	sub	r26, r22
    3418:	b7 0b       	sbc	r27, r23

0000341a <__udivmodhi4_ep>:
    341a:	88 1f       	adc	r24, r24
    341c:	99 1f       	adc	r25, r25
    341e:	5a 95       	dec	r21
    3420:	a9 f7       	brne	.-22     	; 0x340c <__udivmodhi4_loop>
    3422:	80 95       	com	r24
    3424:	90 95       	com	r25
    3426:	bc 01       	movw	r22, r24
    3428:	cd 01       	movw	r24, r26
    342a:	08 95       	ret

0000342c <_exit>:
    342c:	f8 94       	cli

0000342e <__stop_program>:
    342e:	ff cf       	rjmp	.-2      	; 0x342e <__stop_program>
